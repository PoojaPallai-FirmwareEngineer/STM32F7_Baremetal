
13_timers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000151c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b8  080016ec  080016ec  000116ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080017a4  080017a4  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080017a4  080017a4  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080017a4  080017a4  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080017a4  080017a4  000117a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080017a8  080017a8  000117a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080017ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000064  08001810  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08001810  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001820  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000007c6  00000000  00000000  000218b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000001f0  00000000  00000000  00022080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000178  00000000  00000000  00022270  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000021bf  00000000  00000000  000223e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000027da  00000000  00000000  000245a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a1fc8  00000000  00000000  00026d81  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c8d49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000dcc  00000000  00000000  000c8d9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080016d4 	.word	0x080016d4

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	080016d4 	.word	0x080016d4

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <set_pin_mode>:
#include "stm32f7xx.h"

#include "gpio.h"

void set_pin_mode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b089      	sub	sp, #36	; 0x24
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	60f8      	str	r0, [r7, #12]
 80002b8:	60b9      	str	r1, [r7, #8]
 80002ba:	607a      	str	r2, [r7, #4]
	 *
	 * Mode = 0b 10 = 0x2
	 * 2 << 16 ==>  bit16 =0, bit 17 =1
	 * */

	MODIFY_REG(GPIOx->MODER, (0x3 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80002bc:	68fb      	ldr	r3, [r7, #12]
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	68ba      	ldr	r2, [r7, #8]
 80002c2:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002c4:	697a      	ldr	r2, [r7, #20]
 80002c6:	fa92 f2a2 	rbit	r2, r2
 80002ca:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80002cc:	693a      	ldr	r2, [r7, #16]
 80002ce:	fab2 f282 	clz	r2, r2
 80002d2:	b2d2      	uxtb	r2, r2
 80002d4:	0052      	lsls	r2, r2, #1
 80002d6:	2103      	movs	r1, #3
 80002d8:	fa01 f202 	lsl.w	r2, r1, r2
 80002dc:	43d2      	mvns	r2, r2
 80002de:	401a      	ands	r2, r3
 80002e0:	68bb      	ldr	r3, [r7, #8]
 80002e2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002e4:	69fb      	ldr	r3, [r7, #28]
 80002e6:	fa93 f3a3 	rbit	r3, r3
 80002ea:	61bb      	str	r3, [r7, #24]
  return result;
 80002ec:	69bb      	ldr	r3, [r7, #24]
 80002ee:	fab3 f383 	clz	r3, r3
 80002f2:	b2db      	uxtb	r3, r3
 80002f4:	005b      	lsls	r3, r3, #1
 80002f6:	6879      	ldr	r1, [r7, #4]
 80002f8:	fa01 f303 	lsl.w	r3, r1, r3
 80002fc:	431a      	orrs	r2, r3
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	601a      	str	r2, [r3, #0]
}
 8000302:	bf00      	nop
 8000304:	3724      	adds	r7, #36	; 0x24
 8000306:	46bd      	mov	sp, r7
 8000308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800030c:	4770      	bx	lr
	...

08000310 <main>:
#include "timer.h"

int sensor_value;

int main(void)
{
 8000310:	b580      	push	{r7, lr}
 8000312:	af00      	add	r7, sp, #0
	uart3_rxtx_init();
 8000314:	f000 f912 	bl	800053c <uart3_rxtx_init>
	tim1_1hz_init();
 8000318:	f000 f8de 	bl	80004d8 <tim1_1hz_init>

	while(1)
	{
		// Wait for UIF
		while(!(TIM1->SR & SR_UIF)) {}
 800031c:	bf00      	nop
 800031e:	4b08      	ldr	r3, [pc, #32]	; (8000340 <main+0x30>)
 8000320:	691b      	ldr	r3, [r3, #16]
 8000322:	f003 0301 	and.w	r3, r3, #1
 8000326:	2b00      	cmp	r3, #0
 8000328:	d0f9      	beq.n	800031e <main+0xe>

		// Clear UIF
		TIM1->SR &= ~SR_UIF;
 800032a:	4b05      	ldr	r3, [pc, #20]	; (8000340 <main+0x30>)
 800032c:	691b      	ldr	r3, [r3, #16]
 800032e:	4a04      	ldr	r2, [pc, #16]	; (8000340 <main+0x30>)
 8000330:	f023 0301 	bic.w	r3, r3, #1
 8000334:	6113      	str	r3, [r2, #16]
		printf("A Timer second just passed!! \n\r");
 8000336:	4803      	ldr	r0, [pc, #12]	; (8000344 <main+0x34>)
 8000338:	f000 fa3e 	bl	80007b8 <iprintf>
		while(!(TIM1->SR & SR_UIF)) {}
 800033c:	e7ee      	b.n	800031c <main+0xc>
 800033e:	bf00      	nop
 8000340:	40010000 	.word	0x40010000
 8000344:	080016ec 	.word	0x080016ec

08000348 <set_ahb1_periph_clock>:
#include "stm32f7xx.h"
#include "rcc.h"

// Set the AHB1
void set_ahb1_periph_clock(uint32_t perihs)
{
 8000348:	b480      	push	{r7}
 800034a:	b083      	sub	sp, #12
 800034c:	af00      	add	r7, sp, #0
 800034e:	6078      	str	r0, [r7, #4]
	SET_BIT(RCC->AHB1ENR,perihs);
 8000350:	4b05      	ldr	r3, [pc, #20]	; (8000368 <set_ahb1_periph_clock+0x20>)
 8000352:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000354:	4904      	ldr	r1, [pc, #16]	; (8000368 <set_ahb1_periph_clock+0x20>)
 8000356:	687b      	ldr	r3, [r7, #4]
 8000358:	4313      	orrs	r3, r2
 800035a:	630b      	str	r3, [r1, #48]	; 0x30
}
 800035c:	bf00      	nop
 800035e:	370c      	adds	r7, #12
 8000360:	46bd      	mov	sp, r7
 8000362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000366:	4770      	bx	lr
 8000368:	40023800 	.word	0x40023800

0800036c <set_apb1_periph_clock>:
	SET_BIT(RCC->AHB2ENR,perihs);
}

// Set the APB1
void set_apb1_periph_clock(uint32_t perihs)
{
 800036c:	b480      	push	{r7}
 800036e:	b083      	sub	sp, #12
 8000370:	af00      	add	r7, sp, #0
 8000372:	6078      	str	r0, [r7, #4]
	SET_BIT(RCC->APB1ENR,perihs);
 8000374:	4b05      	ldr	r3, [pc, #20]	; (800038c <set_apb1_periph_clock+0x20>)
 8000376:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000378:	4904      	ldr	r1, [pc, #16]	; (800038c <set_apb1_periph_clock+0x20>)
 800037a:	687b      	ldr	r3, [r7, #4]
 800037c:	4313      	orrs	r3, r2
 800037e:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000380:	bf00      	nop
 8000382:	370c      	adds	r7, #12
 8000384:	46bd      	mov	sp, r7
 8000386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800038a:	4770      	bx	lr
 800038c:	40023800 	.word	0x40023800

08000390 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b086      	sub	sp, #24
 8000394:	af00      	add	r7, sp, #0
 8000396:	60f8      	str	r0, [r7, #12]
 8000398:	60b9      	str	r1, [r7, #8]
 800039a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800039c:	2300      	movs	r3, #0
 800039e:	617b      	str	r3, [r7, #20]
 80003a0:	e00a      	b.n	80003b8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80003a2:	f3af 8000 	nop.w
 80003a6:	4601      	mov	r1, r0
 80003a8:	68bb      	ldr	r3, [r7, #8]
 80003aa:	1c5a      	adds	r2, r3, #1
 80003ac:	60ba      	str	r2, [r7, #8]
 80003ae:	b2ca      	uxtb	r2, r1
 80003b0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003b2:	697b      	ldr	r3, [r7, #20]
 80003b4:	3301      	adds	r3, #1
 80003b6:	617b      	str	r3, [r7, #20]
 80003b8:	697a      	ldr	r2, [r7, #20]
 80003ba:	687b      	ldr	r3, [r7, #4]
 80003bc:	429a      	cmp	r2, r3
 80003be:	dbf0      	blt.n	80003a2 <_read+0x12>
	}

return len;
 80003c0:	687b      	ldr	r3, [r7, #4]
}
 80003c2:	4618      	mov	r0, r3
 80003c4:	3718      	adds	r7, #24
 80003c6:	46bd      	mov	sp, r7
 80003c8:	bd80      	pop	{r7, pc}

080003ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80003ca:	b580      	push	{r7, lr}
 80003cc:	b086      	sub	sp, #24
 80003ce:	af00      	add	r7, sp, #0
 80003d0:	60f8      	str	r0, [r7, #12]
 80003d2:	60b9      	str	r1, [r7, #8]
 80003d4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003d6:	2300      	movs	r3, #0
 80003d8:	617b      	str	r3, [r7, #20]
 80003da:	e009      	b.n	80003f0 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80003dc:	68bb      	ldr	r3, [r7, #8]
 80003de:	1c5a      	adds	r2, r3, #1
 80003e0:	60ba      	str	r2, [r7, #8]
 80003e2:	781b      	ldrb	r3, [r3, #0]
 80003e4:	4618      	mov	r0, r3
 80003e6:	f000 f897 	bl	8000518 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80003ea:	697b      	ldr	r3, [r7, #20]
 80003ec:	3301      	adds	r3, #1
 80003ee:	617b      	str	r3, [r7, #20]
 80003f0:	697a      	ldr	r2, [r7, #20]
 80003f2:	687b      	ldr	r3, [r7, #4]
 80003f4:	429a      	cmp	r2, r3
 80003f6:	dbf1      	blt.n	80003dc <_write+0x12>
	}
	return len;
 80003f8:	687b      	ldr	r3, [r7, #4]
}
 80003fa:	4618      	mov	r0, r3
 80003fc:	3718      	adds	r7, #24
 80003fe:	46bd      	mov	sp, r7
 8000400:	bd80      	pop	{r7, pc}

08000402 <_close>:

int _close(int file)
{
 8000402:	b480      	push	{r7}
 8000404:	b083      	sub	sp, #12
 8000406:	af00      	add	r7, sp, #0
 8000408:	6078      	str	r0, [r7, #4]
	return -1;
 800040a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800040e:	4618      	mov	r0, r3
 8000410:	370c      	adds	r7, #12
 8000412:	46bd      	mov	sp, r7
 8000414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000418:	4770      	bx	lr

0800041a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800041a:	b480      	push	{r7}
 800041c:	b083      	sub	sp, #12
 800041e:	af00      	add	r7, sp, #0
 8000420:	6078      	str	r0, [r7, #4]
 8000422:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000424:	683b      	ldr	r3, [r7, #0]
 8000426:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800042a:	605a      	str	r2, [r3, #4]
	return 0;
 800042c:	2300      	movs	r3, #0
}
 800042e:	4618      	mov	r0, r3
 8000430:	370c      	adds	r7, #12
 8000432:	46bd      	mov	sp, r7
 8000434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000438:	4770      	bx	lr

0800043a <_isatty>:

int _isatty(int file)
{
 800043a:	b480      	push	{r7}
 800043c:	b083      	sub	sp, #12
 800043e:	af00      	add	r7, sp, #0
 8000440:	6078      	str	r0, [r7, #4]
	return 1;
 8000442:	2301      	movs	r3, #1
}
 8000444:	4618      	mov	r0, r3
 8000446:	370c      	adds	r7, #12
 8000448:	46bd      	mov	sp, r7
 800044a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044e:	4770      	bx	lr

08000450 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000450:	b480      	push	{r7}
 8000452:	b085      	sub	sp, #20
 8000454:	af00      	add	r7, sp, #0
 8000456:	60f8      	str	r0, [r7, #12]
 8000458:	60b9      	str	r1, [r7, #8]
 800045a:	607a      	str	r2, [r7, #4]
	return 0;
 800045c:	2300      	movs	r3, #0
}
 800045e:	4618      	mov	r0, r3
 8000460:	3714      	adds	r7, #20
 8000462:	46bd      	mov	sp, r7
 8000464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000468:	4770      	bx	lr
	...

0800046c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b086      	sub	sp, #24
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000474:	4a14      	ldr	r2, [pc, #80]	; (80004c8 <_sbrk+0x5c>)
 8000476:	4b15      	ldr	r3, [pc, #84]	; (80004cc <_sbrk+0x60>)
 8000478:	1ad3      	subs	r3, r2, r3
 800047a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800047c:	697b      	ldr	r3, [r7, #20]
 800047e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000480:	4b13      	ldr	r3, [pc, #76]	; (80004d0 <_sbrk+0x64>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	2b00      	cmp	r3, #0
 8000486:	d102      	bne.n	800048e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000488:	4b11      	ldr	r3, [pc, #68]	; (80004d0 <_sbrk+0x64>)
 800048a:	4a12      	ldr	r2, [pc, #72]	; (80004d4 <_sbrk+0x68>)
 800048c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800048e:	4b10      	ldr	r3, [pc, #64]	; (80004d0 <_sbrk+0x64>)
 8000490:	681a      	ldr	r2, [r3, #0]
 8000492:	687b      	ldr	r3, [r7, #4]
 8000494:	4413      	add	r3, r2
 8000496:	693a      	ldr	r2, [r7, #16]
 8000498:	429a      	cmp	r2, r3
 800049a:	d207      	bcs.n	80004ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800049c:	f000 f95a 	bl	8000754 <__errno>
 80004a0:	4603      	mov	r3, r0
 80004a2:	220c      	movs	r2, #12
 80004a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80004a6:	f04f 33ff 	mov.w	r3, #4294967295
 80004aa:	e009      	b.n	80004c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80004ac:	4b08      	ldr	r3, [pc, #32]	; (80004d0 <_sbrk+0x64>)
 80004ae:	681b      	ldr	r3, [r3, #0]
 80004b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80004b2:	4b07      	ldr	r3, [pc, #28]	; (80004d0 <_sbrk+0x64>)
 80004b4:	681a      	ldr	r2, [r3, #0]
 80004b6:	687b      	ldr	r3, [r7, #4]
 80004b8:	4413      	add	r3, r2
 80004ba:	4a05      	ldr	r2, [pc, #20]	; (80004d0 <_sbrk+0x64>)
 80004bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80004be:	68fb      	ldr	r3, [r7, #12]
}
 80004c0:	4618      	mov	r0, r3
 80004c2:	3718      	adds	r7, #24
 80004c4:	46bd      	mov	sp, r7
 80004c6:	bd80      	pop	{r7, pc}
 80004c8:	20050000 	.word	0x20050000
 80004cc:	00000400 	.word	0x00000400
 80004d0:	20000080 	.word	0x20000080
 80004d4:	20000098 	.word	0x20000098

080004d8 <tim1_1hz_init>:
#define TIM1EN 		    (1U << 0)
#define CR1_CEN 		(1U << 0)


void tim1_1hz_init(void)
{
 80004d8:	b480      	push	{r7}
 80004da:	af00      	add	r7, sp, #0
	// Enable clock access to TIM1
	RCC->APB2ENR |= TIM1EN;
 80004dc:	4b0c      	ldr	r3, [pc, #48]	; (8000510 <tim1_1hz_init+0x38>)
 80004de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80004e0:	4a0b      	ldr	r2, [pc, #44]	; (8000510 <tim1_1hz_init+0x38>)
 80004e2:	f043 0301 	orr.w	r3, r3, #1
 80004e6:	6453      	str	r3, [r2, #68]	; 0x44

	// Set the prescaler
	TIM1->PSC = 1600 - 1;
 80004e8:	4b0a      	ldr	r3, [pc, #40]	; (8000514 <tim1_1hz_init+0x3c>)
 80004ea:	f240 623f 	movw	r2, #1599	; 0x63f
 80004ee:	629a      	str	r2, [r3, #40]	; 0x28

	// set auto reload value
	TIM1->ARR = 10000 - 1;
 80004f0:	4b08      	ldr	r3, [pc, #32]	; (8000514 <tim1_1hz_init+0x3c>)
 80004f2:	f242 720f 	movw	r2, #9999	; 0x270f
 80004f6:	62da      	str	r2, [r3, #44]	; 0x2c

	// enable timer
	TIM1->CR1 |= CR1_CEN;
 80004f8:	4b06      	ldr	r3, [pc, #24]	; (8000514 <tim1_1hz_init+0x3c>)
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a05      	ldr	r2, [pc, #20]	; (8000514 <tim1_1hz_init+0x3c>)
 80004fe:	f043 0301 	orr.w	r3, r3, #1
 8000502:	6013      	str	r3, [r2, #0]
}
 8000504:	bf00      	nop
 8000506:	46bd      	mov	sp, r7
 8000508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050c:	4770      	bx	lr
 800050e:	bf00      	nop
 8000510:	40023800 	.word	0x40023800
 8000514:	40010000 	.word	0x40010000

08000518 <__io_putchar>:
static void uart_enable(USART_TypeDef *USARTx);
static void uart_write(USART_TypeDef *USARTx , uint8_t value);
static void set_uart_tranfer_direction(USART_TypeDef *USARTx,uint32_t TransferDirection);

int __io_putchar(int ch)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
	uart_write(USART3, ch);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	b2db      	uxtb	r3, r3
 8000524:	4619      	mov	r1, r3
 8000526:	4804      	ldr	r0, [pc, #16]	; (8000538 <__io_putchar+0x20>)
 8000528:	f000 f868 	bl	80005fc <uart_write>
	return ch;
 800052c:	687b      	ldr	r3, [r7, #4]
}
 800052e:	4618      	mov	r0, r3
 8000530:	3708      	adds	r7, #8
 8000532:	46bd      	mov	sp, r7
 8000534:	bd80      	pop	{r7, pc}
 8000536:	bf00      	nop
 8000538:	40004800 	.word	0x40004800

0800053c <uart3_rxtx_init>:
	/*Enable USART*/
	uart_enable(USART3);
}

void uart3_rxtx_init(void)
{
 800053c:	b580      	push	{r7, lr}
 800053e:	af00      	add	r7, sp, #0
	// Configure tx pin
	/*1. Enable clock access to GPIOD*/
	 set_ahb1_periph_clock(GPIODEN);
 8000540:	2008      	movs	r0, #8
 8000542:	f7ff ff01 	bl	8000348 <set_ahb1_periph_clock>

	/*2. Set PD8 to mode to alternate function*/
	 set_pin_mode(GPIOD,  UART3_TX,  GPIO_ALTERNATE_MODE);
 8000546:	2202      	movs	r2, #2
 8000548:	f44f 7180 	mov.w	r1, #256	; 0x100
 800054c:	4828      	ldr	r0, [pc, #160]	; (80005f0 <uart3_rxtx_init+0xb4>)
 800054e:	f7ff feaf 	bl	80002b0 <set_pin_mode>

	/*3. Set alternate function to USART i.e. AF7 - 0111*/
	 GPIOD->AFR[1] |= (1U<<0);
 8000552:	4b27      	ldr	r3, [pc, #156]	; (80005f0 <uart3_rxtx_init+0xb4>)
 8000554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000556:	4a26      	ldr	r2, [pc, #152]	; (80005f0 <uart3_rxtx_init+0xb4>)
 8000558:	f043 0301 	orr.w	r3, r3, #1
 800055c:	6253      	str	r3, [r2, #36]	; 0x24
	 GPIOD->AFR[1] |= (1U<<1);
 800055e:	4b24      	ldr	r3, [pc, #144]	; (80005f0 <uart3_rxtx_init+0xb4>)
 8000560:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000562:	4a23      	ldr	r2, [pc, #140]	; (80005f0 <uart3_rxtx_init+0xb4>)
 8000564:	f043 0302 	orr.w	r3, r3, #2
 8000568:	6253      	str	r3, [r2, #36]	; 0x24
	 GPIOD->AFR[1] |= (1U<<2);
 800056a:	4b21      	ldr	r3, [pc, #132]	; (80005f0 <uart3_rxtx_init+0xb4>)
 800056c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800056e:	4a20      	ldr	r2, [pc, #128]	; (80005f0 <uart3_rxtx_init+0xb4>)
 8000570:	f043 0304 	orr.w	r3, r3, #4
 8000574:	6253      	str	r3, [r2, #36]	; 0x24
	 GPIOD->AFR[1] &= ~(1U<<3);
 8000576:	4b1e      	ldr	r3, [pc, #120]	; (80005f0 <uart3_rxtx_init+0xb4>)
 8000578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800057a:	4a1d      	ldr	r2, [pc, #116]	; (80005f0 <uart3_rxtx_init+0xb4>)
 800057c:	f023 0308 	bic.w	r3, r3, #8
 8000580:	6253      	str	r3, [r2, #36]	; 0x24

	 // Configure rx pin
	 /* Set PD9 to mode to alternate function*/
	 set_pin_mode(GPIOD,  UART3_RX,  GPIO_ALTERNATE_MODE);
 8000582:	2202      	movs	r2, #2
 8000584:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000588:	4819      	ldr	r0, [pc, #100]	; (80005f0 <uart3_rxtx_init+0xb4>)
 800058a:	f7ff fe91 	bl	80002b0 <set_pin_mode>

	 // Set alternate function to USART
	 GPIOD->AFR[1] |= (1U<<4);
 800058e:	4b18      	ldr	r3, [pc, #96]	; (80005f0 <uart3_rxtx_init+0xb4>)
 8000590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000592:	4a17      	ldr	r2, [pc, #92]	; (80005f0 <uart3_rxtx_init+0xb4>)
 8000594:	f043 0310 	orr.w	r3, r3, #16
 8000598:	6253      	str	r3, [r2, #36]	; 0x24
	 GPIOD->AFR[1] |= (1U<<5);
 800059a:	4b15      	ldr	r3, [pc, #84]	; (80005f0 <uart3_rxtx_init+0xb4>)
 800059c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800059e:	4a14      	ldr	r2, [pc, #80]	; (80005f0 <uart3_rxtx_init+0xb4>)
 80005a0:	f043 0320 	orr.w	r3, r3, #32
 80005a4:	6253      	str	r3, [r2, #36]	; 0x24
	 GPIOD->AFR[1] |= (1U<<6);
 80005a6:	4b12      	ldr	r3, [pc, #72]	; (80005f0 <uart3_rxtx_init+0xb4>)
 80005a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005aa:	4a11      	ldr	r2, [pc, #68]	; (80005f0 <uart3_rxtx_init+0xb4>)
 80005ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80005b0:	6253      	str	r3, [r2, #36]	; 0x24
	 GPIOD->AFR[1] &= ~(1U<<7);
 80005b2:	4b0f      	ldr	r3, [pc, #60]	; (80005f0 <uart3_rxtx_init+0xb4>)
 80005b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005b6:	4a0e      	ldr	r2, [pc, #56]	; (80005f0 <uart3_rxtx_init+0xb4>)
 80005b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80005bc:	6253      	str	r3, [r2, #36]	; 0x24

	/*Enable clock to the USART3 module*/
	 set_apb1_periph_clock(USART3EN);
 80005be:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80005c2:	f7ff fed3 	bl	800036c <set_apb1_periph_clock>

	/*Confiugure USART parameters*/
	 config_uart_parameters(USART3,  UART_DATAWIDTH_8B, UART_PARITY_NONE,  UART_STOPBITS_1);
 80005c6:	2300      	movs	r3, #0
 80005c8:	2200      	movs	r2, #0
 80005ca:	2100      	movs	r1, #0
 80005cc:	4809      	ldr	r0, [pc, #36]	; (80005f4 <uart3_rxtx_init+0xb8>)
 80005ce:	f000 f861 	bl	8000694 <config_uart_parameters>
	 set_uart_tranfer_direction(USART3 ,USART_CR1_TE | USART_CR1_RE);
 80005d2:	210c      	movs	r1, #12
 80005d4:	4807      	ldr	r0, [pc, #28]	; (80005f4 <uart3_rxtx_init+0xb8>)
 80005d6:	f000 f837 	bl	8000648 <set_uart_tranfer_direction>

	/*Set baudrate*/
	 uart_set_baudrate(USART3, 16000000, 115200);
 80005da:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005de:	4906      	ldr	r1, [pc, #24]	; (80005f8 <uart3_rxtx_init+0xbc>)
 80005e0:	4804      	ldr	r0, [pc, #16]	; (80005f4 <uart3_rxtx_init+0xb8>)
 80005e2:	f000 f844 	bl	800066e <uart_set_baudrate>

	/*Enable USART*/
	uart_enable(USART3);
 80005e6:	4803      	ldr	r0, [pc, #12]	; (80005f4 <uart3_rxtx_init+0xb8>)
 80005e8:	f000 f81e 	bl	8000628 <uart_enable>
}
 80005ec:	bf00      	nop
 80005ee:	bd80      	pop	{r7, pc}
 80005f0:	40020c00 	.word	0x40020c00
 80005f4:	40004800 	.word	0x40004800
 80005f8:	00f42400 	.word	0x00f42400

080005fc <uart_write>:
	while(!(USARTx->ISR & USART_ISR_RXNE)){}
	return READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU;
}

void uart_write(USART_TypeDef *USARTx , uint8_t value)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
 8000604:	460b      	mov	r3, r1
 8000606:	70fb      	strb	r3, [r7, #3]
	/*Make sure transmit data register is empty*/
//	while(!((USARTx->ISR & USART_ISR_TXE)== USART_ISR_TXE)){}
	while(!(USARTx->ISR & USART_ISR_TXE)){}
 8000608:	bf00      	nop
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	69db      	ldr	r3, [r3, #28]
 800060e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000612:	2b00      	cmp	r3, #0
 8000614:	d0f9      	beq.n	800060a <uart_write+0xe>

	/*Write value into transmit data register*/
	USARTx->TDR = value;
 8000616:	78fa      	ldrb	r2, [r7, #3]
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800061c:	bf00      	nop
 800061e:	370c      	adds	r7, #12
 8000620:	46bd      	mov	sp, r7
 8000622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000626:	4770      	bx	lr

08000628 <uart_enable>:

// Enable the usart
static void uart_enable(USART_TypeDef *USARTx)
{
 8000628:	b480      	push	{r7}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	SET_BIT(USARTx->CR1,USART_CR1_UE);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f043 0201 	orr.w	r2, r3, #1
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	601a      	str	r2, [r3, #0]
}
 800063c:	bf00      	nop
 800063e:	370c      	adds	r7, #12
 8000640:	46bd      	mov	sp, r7
 8000642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000646:	4770      	bx	lr

08000648 <set_uart_tranfer_direction>:

static void set_uart_tranfer_direction(USART_TypeDef *USARTx,uint32_t TransferDirection)
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	6078      	str	r0, [r7, #4]
 8000650:	6039      	str	r1, [r7, #0]
	MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	681b      	ldr	r3, [r3, #0]
 8000656:	f023 020c 	bic.w	r2, r3, #12
 800065a:	683b      	ldr	r3, [r7, #0]
 800065c:	431a      	orrs	r2, r3
 800065e:	687b      	ldr	r3, [r7, #4]
 8000660:	601a      	str	r2, [r3, #0]
}
 8000662:	bf00      	nop
 8000664:	370c      	adds	r7, #12
 8000666:	46bd      	mov	sp, r7
 8000668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800066c:	4770      	bx	lr

0800066e <uart_set_baudrate>:

// set the baudrate
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 800066e:	b580      	push	{r7, lr}
 8000670:	b084      	sub	sp, #16
 8000672:	af00      	add	r7, sp, #0
 8000674:	60f8      	str	r0, [r7, #12]
 8000676:	60b9      	str	r1, [r7, #8]
 8000678:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_div( PeriphClk,  BaudRate);
 800067a:	6879      	ldr	r1, [r7, #4]
 800067c:	68b8      	ldr	r0, [r7, #8]
 800067e:	f000 f82b 	bl	80006d8 <compute_uart_div>
 8000682:	4603      	mov	r3, r0
 8000684:	461a      	mov	r2, r3
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	60da      	str	r2, [r3, #12]
}
 800068a:	bf00      	nop
 800068c:	3710      	adds	r7, #16
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
	...

08000694 <config_uart_parameters>:

static void config_uart_parameters(USART_TypeDef *USARTx, uint32_t DataWidth, uint32_t Parity, uint32_t StopBits)
{
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0
 800069a:	60f8      	str	r0, [r7, #12]
 800069c:	60b9      	str	r1, [r7, #8]
 800069e:	607a      	str	r2, [r7, #4]
 80006a0:	603b      	str	r3, [r7, #0]
	MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 80006a2:	68fb      	ldr	r3, [r7, #12]
 80006a4:	681a      	ldr	r2, [r3, #0]
 80006a6:	4b0b      	ldr	r3, [pc, #44]	; (80006d4 <config_uart_parameters+0x40>)
 80006a8:	4013      	ands	r3, r2
 80006aa:	6879      	ldr	r1, [r7, #4]
 80006ac:	68ba      	ldr	r2, [r7, #8]
 80006ae:	430a      	orrs	r2, r1
 80006b0:	431a      	orrs	r2, r3
 80006b2:	68fb      	ldr	r3, [r7, #12]
 80006b4:	601a      	str	r2, [r3, #0]

	MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80006b6:	68fb      	ldr	r3, [r7, #12]
 80006b8:	685b      	ldr	r3, [r3, #4]
 80006ba:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80006be:	683b      	ldr	r3, [r7, #0]
 80006c0:	431a      	orrs	r2, r3
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	605a      	str	r2, [r3, #4]
}
 80006c6:	bf00      	nop
 80006c8:	3714      	adds	r7, #20
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	efffe9ff 	.word	0xefffe9ff

080006d8 <compute_uart_div>:

// configure the baud rate with peripheral clock
static uint16_t compute_uart_div(uint32_t PeriphClk, uint32_t BaudRate)
{
 80006d8:	b480      	push	{r7}
 80006da:	b083      	sub	sp, #12
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
 80006e0:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	085a      	lsrs	r2, r3, #1
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	441a      	add	r2, r3
 80006ea:	683b      	ldr	r3, [r7, #0]
 80006ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80006f0:	b29b      	uxth	r3, r3
}
 80006f2:	4618      	mov	r0, r3
 80006f4:	370c      	adds	r7, #12
 80006f6:	46bd      	mov	sp, r7
 80006f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006fc:	4770      	bx	lr
	...

08000700 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000700:	480d      	ldr	r0, [pc, #52]	; (8000738 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000702:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000704:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000708:	480c      	ldr	r0, [pc, #48]	; (800073c <LoopForever+0x6>)
  ldr r1, =_edata
 800070a:	490d      	ldr	r1, [pc, #52]	; (8000740 <LoopForever+0xa>)
  ldr r2, =_sidata
 800070c:	4a0d      	ldr	r2, [pc, #52]	; (8000744 <LoopForever+0xe>)
  movs r3, #0
 800070e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000710:	e002      	b.n	8000718 <LoopCopyDataInit>

08000712 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000712:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000714:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000716:	3304      	adds	r3, #4

08000718 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000718:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800071a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800071c:	d3f9      	bcc.n	8000712 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800071e:	4a0a      	ldr	r2, [pc, #40]	; (8000748 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000720:	4c0a      	ldr	r4, [pc, #40]	; (800074c <LoopForever+0x16>)
  movs r3, #0
 8000722:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000724:	e001      	b.n	800072a <LoopFillZerobss>

08000726 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000726:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000728:	3204      	adds	r2, #4

0800072a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800072a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800072c:	d3fb      	bcc.n	8000726 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800072e:	f000 f817 	bl	8000760 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000732:	f7ff fded 	bl	8000310 <main>

08000736 <LoopForever>:

LoopForever:
    b LoopForever
 8000736:	e7fe      	b.n	8000736 <LoopForever>
  ldr   r0, =_estack
 8000738:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 800073c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000740:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8000744:	080017ac 	.word	0x080017ac
  ldr r2, =_sbss
 8000748:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 800074c:	20000094 	.word	0x20000094

08000750 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000750:	e7fe      	b.n	8000750 <ADC_IRQHandler>
	...

08000754 <__errno>:
 8000754:	4b01      	ldr	r3, [pc, #4]	; (800075c <__errno+0x8>)
 8000756:	6818      	ldr	r0, [r3, #0]
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	20000000 	.word	0x20000000

08000760 <__libc_init_array>:
 8000760:	b570      	push	{r4, r5, r6, lr}
 8000762:	4d0d      	ldr	r5, [pc, #52]	; (8000798 <__libc_init_array+0x38>)
 8000764:	4c0d      	ldr	r4, [pc, #52]	; (800079c <__libc_init_array+0x3c>)
 8000766:	1b64      	subs	r4, r4, r5
 8000768:	10a4      	asrs	r4, r4, #2
 800076a:	2600      	movs	r6, #0
 800076c:	42a6      	cmp	r6, r4
 800076e:	d109      	bne.n	8000784 <__libc_init_array+0x24>
 8000770:	4d0b      	ldr	r5, [pc, #44]	; (80007a0 <__libc_init_array+0x40>)
 8000772:	4c0c      	ldr	r4, [pc, #48]	; (80007a4 <__libc_init_array+0x44>)
 8000774:	f000 ffae 	bl	80016d4 <_init>
 8000778:	1b64      	subs	r4, r4, r5
 800077a:	10a4      	asrs	r4, r4, #2
 800077c:	2600      	movs	r6, #0
 800077e:	42a6      	cmp	r6, r4
 8000780:	d105      	bne.n	800078e <__libc_init_array+0x2e>
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f855 3b04 	ldr.w	r3, [r5], #4
 8000788:	4798      	blx	r3
 800078a:	3601      	adds	r6, #1
 800078c:	e7ee      	b.n	800076c <__libc_init_array+0xc>
 800078e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000792:	4798      	blx	r3
 8000794:	3601      	adds	r6, #1
 8000796:	e7f2      	b.n	800077e <__libc_init_array+0x1e>
 8000798:	080017a4 	.word	0x080017a4
 800079c:	080017a4 	.word	0x080017a4
 80007a0:	080017a4 	.word	0x080017a4
 80007a4:	080017a8 	.word	0x080017a8

080007a8 <memset>:
 80007a8:	4402      	add	r2, r0
 80007aa:	4603      	mov	r3, r0
 80007ac:	4293      	cmp	r3, r2
 80007ae:	d100      	bne.n	80007b2 <memset+0xa>
 80007b0:	4770      	bx	lr
 80007b2:	f803 1b01 	strb.w	r1, [r3], #1
 80007b6:	e7f9      	b.n	80007ac <memset+0x4>

080007b8 <iprintf>:
 80007b8:	b40f      	push	{r0, r1, r2, r3}
 80007ba:	4b0a      	ldr	r3, [pc, #40]	; (80007e4 <iprintf+0x2c>)
 80007bc:	b513      	push	{r0, r1, r4, lr}
 80007be:	681c      	ldr	r4, [r3, #0]
 80007c0:	b124      	cbz	r4, 80007cc <iprintf+0x14>
 80007c2:	69a3      	ldr	r3, [r4, #24]
 80007c4:	b913      	cbnz	r3, 80007cc <iprintf+0x14>
 80007c6:	4620      	mov	r0, r4
 80007c8:	f000 f866 	bl	8000898 <__sinit>
 80007cc:	ab05      	add	r3, sp, #20
 80007ce:	9a04      	ldr	r2, [sp, #16]
 80007d0:	68a1      	ldr	r1, [r4, #8]
 80007d2:	9301      	str	r3, [sp, #4]
 80007d4:	4620      	mov	r0, r4
 80007d6:	f000 f9bd 	bl	8000b54 <_vfiprintf_r>
 80007da:	b002      	add	sp, #8
 80007dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80007e0:	b004      	add	sp, #16
 80007e2:	4770      	bx	lr
 80007e4:	20000000 	.word	0x20000000

080007e8 <std>:
 80007e8:	2300      	movs	r3, #0
 80007ea:	b510      	push	{r4, lr}
 80007ec:	4604      	mov	r4, r0
 80007ee:	e9c0 3300 	strd	r3, r3, [r0]
 80007f2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80007f6:	6083      	str	r3, [r0, #8]
 80007f8:	8181      	strh	r1, [r0, #12]
 80007fa:	6643      	str	r3, [r0, #100]	; 0x64
 80007fc:	81c2      	strh	r2, [r0, #14]
 80007fe:	6183      	str	r3, [r0, #24]
 8000800:	4619      	mov	r1, r3
 8000802:	2208      	movs	r2, #8
 8000804:	305c      	adds	r0, #92	; 0x5c
 8000806:	f7ff ffcf 	bl	80007a8 <memset>
 800080a:	4b05      	ldr	r3, [pc, #20]	; (8000820 <std+0x38>)
 800080c:	6263      	str	r3, [r4, #36]	; 0x24
 800080e:	4b05      	ldr	r3, [pc, #20]	; (8000824 <std+0x3c>)
 8000810:	62a3      	str	r3, [r4, #40]	; 0x28
 8000812:	4b05      	ldr	r3, [pc, #20]	; (8000828 <std+0x40>)
 8000814:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000816:	4b05      	ldr	r3, [pc, #20]	; (800082c <std+0x44>)
 8000818:	6224      	str	r4, [r4, #32]
 800081a:	6323      	str	r3, [r4, #48]	; 0x30
 800081c:	bd10      	pop	{r4, pc}
 800081e:	bf00      	nop
 8000820:	080010fd 	.word	0x080010fd
 8000824:	0800111f 	.word	0x0800111f
 8000828:	08001157 	.word	0x08001157
 800082c:	0800117b 	.word	0x0800117b

08000830 <_cleanup_r>:
 8000830:	4901      	ldr	r1, [pc, #4]	; (8000838 <_cleanup_r+0x8>)
 8000832:	f000 b8af 	b.w	8000994 <_fwalk_reent>
 8000836:	bf00      	nop
 8000838:	08001455 	.word	0x08001455

0800083c <__sfmoreglue>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	2268      	movs	r2, #104	; 0x68
 8000840:	1e4d      	subs	r5, r1, #1
 8000842:	4355      	muls	r5, r2
 8000844:	460e      	mov	r6, r1
 8000846:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800084a:	f000 f8e5 	bl	8000a18 <_malloc_r>
 800084e:	4604      	mov	r4, r0
 8000850:	b140      	cbz	r0, 8000864 <__sfmoreglue+0x28>
 8000852:	2100      	movs	r1, #0
 8000854:	e9c0 1600 	strd	r1, r6, [r0]
 8000858:	300c      	adds	r0, #12
 800085a:	60a0      	str	r0, [r4, #8]
 800085c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000860:	f7ff ffa2 	bl	80007a8 <memset>
 8000864:	4620      	mov	r0, r4
 8000866:	bd70      	pop	{r4, r5, r6, pc}

08000868 <__sfp_lock_acquire>:
 8000868:	4801      	ldr	r0, [pc, #4]	; (8000870 <__sfp_lock_acquire+0x8>)
 800086a:	f000 b8b3 	b.w	80009d4 <__retarget_lock_acquire_recursive>
 800086e:	bf00      	nop
 8000870:	20000085 	.word	0x20000085

08000874 <__sfp_lock_release>:
 8000874:	4801      	ldr	r0, [pc, #4]	; (800087c <__sfp_lock_release+0x8>)
 8000876:	f000 b8ae 	b.w	80009d6 <__retarget_lock_release_recursive>
 800087a:	bf00      	nop
 800087c:	20000085 	.word	0x20000085

08000880 <__sinit_lock_acquire>:
 8000880:	4801      	ldr	r0, [pc, #4]	; (8000888 <__sinit_lock_acquire+0x8>)
 8000882:	f000 b8a7 	b.w	80009d4 <__retarget_lock_acquire_recursive>
 8000886:	bf00      	nop
 8000888:	20000086 	.word	0x20000086

0800088c <__sinit_lock_release>:
 800088c:	4801      	ldr	r0, [pc, #4]	; (8000894 <__sinit_lock_release+0x8>)
 800088e:	f000 b8a2 	b.w	80009d6 <__retarget_lock_release_recursive>
 8000892:	bf00      	nop
 8000894:	20000086 	.word	0x20000086

08000898 <__sinit>:
 8000898:	b510      	push	{r4, lr}
 800089a:	4604      	mov	r4, r0
 800089c:	f7ff fff0 	bl	8000880 <__sinit_lock_acquire>
 80008a0:	69a3      	ldr	r3, [r4, #24]
 80008a2:	b11b      	cbz	r3, 80008ac <__sinit+0x14>
 80008a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008a8:	f7ff bff0 	b.w	800088c <__sinit_lock_release>
 80008ac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80008b0:	6523      	str	r3, [r4, #80]	; 0x50
 80008b2:	4b13      	ldr	r3, [pc, #76]	; (8000900 <__sinit+0x68>)
 80008b4:	4a13      	ldr	r2, [pc, #76]	; (8000904 <__sinit+0x6c>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	62a2      	str	r2, [r4, #40]	; 0x28
 80008ba:	42a3      	cmp	r3, r4
 80008bc:	bf04      	itt	eq
 80008be:	2301      	moveq	r3, #1
 80008c0:	61a3      	streq	r3, [r4, #24]
 80008c2:	4620      	mov	r0, r4
 80008c4:	f000 f820 	bl	8000908 <__sfp>
 80008c8:	6060      	str	r0, [r4, #4]
 80008ca:	4620      	mov	r0, r4
 80008cc:	f000 f81c 	bl	8000908 <__sfp>
 80008d0:	60a0      	str	r0, [r4, #8]
 80008d2:	4620      	mov	r0, r4
 80008d4:	f000 f818 	bl	8000908 <__sfp>
 80008d8:	2200      	movs	r2, #0
 80008da:	60e0      	str	r0, [r4, #12]
 80008dc:	2104      	movs	r1, #4
 80008de:	6860      	ldr	r0, [r4, #4]
 80008e0:	f7ff ff82 	bl	80007e8 <std>
 80008e4:	68a0      	ldr	r0, [r4, #8]
 80008e6:	2201      	movs	r2, #1
 80008e8:	2109      	movs	r1, #9
 80008ea:	f7ff ff7d 	bl	80007e8 <std>
 80008ee:	68e0      	ldr	r0, [r4, #12]
 80008f0:	2202      	movs	r2, #2
 80008f2:	2112      	movs	r1, #18
 80008f4:	f7ff ff78 	bl	80007e8 <std>
 80008f8:	2301      	movs	r3, #1
 80008fa:	61a3      	str	r3, [r4, #24]
 80008fc:	e7d2      	b.n	80008a4 <__sinit+0xc>
 80008fe:	bf00      	nop
 8000900:	0800170c 	.word	0x0800170c
 8000904:	08000831 	.word	0x08000831

08000908 <__sfp>:
 8000908:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800090a:	4607      	mov	r7, r0
 800090c:	f7ff ffac 	bl	8000868 <__sfp_lock_acquire>
 8000910:	4b1e      	ldr	r3, [pc, #120]	; (800098c <__sfp+0x84>)
 8000912:	681e      	ldr	r6, [r3, #0]
 8000914:	69b3      	ldr	r3, [r6, #24]
 8000916:	b913      	cbnz	r3, 800091e <__sfp+0x16>
 8000918:	4630      	mov	r0, r6
 800091a:	f7ff ffbd 	bl	8000898 <__sinit>
 800091e:	3648      	adds	r6, #72	; 0x48
 8000920:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8000924:	3b01      	subs	r3, #1
 8000926:	d503      	bpl.n	8000930 <__sfp+0x28>
 8000928:	6833      	ldr	r3, [r6, #0]
 800092a:	b30b      	cbz	r3, 8000970 <__sfp+0x68>
 800092c:	6836      	ldr	r6, [r6, #0]
 800092e:	e7f7      	b.n	8000920 <__sfp+0x18>
 8000930:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8000934:	b9d5      	cbnz	r5, 800096c <__sfp+0x64>
 8000936:	4b16      	ldr	r3, [pc, #88]	; (8000990 <__sfp+0x88>)
 8000938:	60e3      	str	r3, [r4, #12]
 800093a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800093e:	6665      	str	r5, [r4, #100]	; 0x64
 8000940:	f000 f847 	bl	80009d2 <__retarget_lock_init_recursive>
 8000944:	f7ff ff96 	bl	8000874 <__sfp_lock_release>
 8000948:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800094c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000950:	6025      	str	r5, [r4, #0]
 8000952:	61a5      	str	r5, [r4, #24]
 8000954:	2208      	movs	r2, #8
 8000956:	4629      	mov	r1, r5
 8000958:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800095c:	f7ff ff24 	bl	80007a8 <memset>
 8000960:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8000964:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8000968:	4620      	mov	r0, r4
 800096a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800096c:	3468      	adds	r4, #104	; 0x68
 800096e:	e7d9      	b.n	8000924 <__sfp+0x1c>
 8000970:	2104      	movs	r1, #4
 8000972:	4638      	mov	r0, r7
 8000974:	f7ff ff62 	bl	800083c <__sfmoreglue>
 8000978:	4604      	mov	r4, r0
 800097a:	6030      	str	r0, [r6, #0]
 800097c:	2800      	cmp	r0, #0
 800097e:	d1d5      	bne.n	800092c <__sfp+0x24>
 8000980:	f7ff ff78 	bl	8000874 <__sfp_lock_release>
 8000984:	230c      	movs	r3, #12
 8000986:	603b      	str	r3, [r7, #0]
 8000988:	e7ee      	b.n	8000968 <__sfp+0x60>
 800098a:	bf00      	nop
 800098c:	0800170c 	.word	0x0800170c
 8000990:	ffff0001 	.word	0xffff0001

08000994 <_fwalk_reent>:
 8000994:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000998:	4606      	mov	r6, r0
 800099a:	4688      	mov	r8, r1
 800099c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80009a0:	2700      	movs	r7, #0
 80009a2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80009a6:	f1b9 0901 	subs.w	r9, r9, #1
 80009aa:	d505      	bpl.n	80009b8 <_fwalk_reent+0x24>
 80009ac:	6824      	ldr	r4, [r4, #0]
 80009ae:	2c00      	cmp	r4, #0
 80009b0:	d1f7      	bne.n	80009a2 <_fwalk_reent+0xe>
 80009b2:	4638      	mov	r0, r7
 80009b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80009b8:	89ab      	ldrh	r3, [r5, #12]
 80009ba:	2b01      	cmp	r3, #1
 80009bc:	d907      	bls.n	80009ce <_fwalk_reent+0x3a>
 80009be:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80009c2:	3301      	adds	r3, #1
 80009c4:	d003      	beq.n	80009ce <_fwalk_reent+0x3a>
 80009c6:	4629      	mov	r1, r5
 80009c8:	4630      	mov	r0, r6
 80009ca:	47c0      	blx	r8
 80009cc:	4307      	orrs	r7, r0
 80009ce:	3568      	adds	r5, #104	; 0x68
 80009d0:	e7e9      	b.n	80009a6 <_fwalk_reent+0x12>

080009d2 <__retarget_lock_init_recursive>:
 80009d2:	4770      	bx	lr

080009d4 <__retarget_lock_acquire_recursive>:
 80009d4:	4770      	bx	lr

080009d6 <__retarget_lock_release_recursive>:
 80009d6:	4770      	bx	lr

080009d8 <sbrk_aligned>:
 80009d8:	b570      	push	{r4, r5, r6, lr}
 80009da:	4e0e      	ldr	r6, [pc, #56]	; (8000a14 <sbrk_aligned+0x3c>)
 80009dc:	460c      	mov	r4, r1
 80009de:	6831      	ldr	r1, [r6, #0]
 80009e0:	4605      	mov	r5, r0
 80009e2:	b911      	cbnz	r1, 80009ea <sbrk_aligned+0x12>
 80009e4:	f000 fb7a 	bl	80010dc <_sbrk_r>
 80009e8:	6030      	str	r0, [r6, #0]
 80009ea:	4621      	mov	r1, r4
 80009ec:	4628      	mov	r0, r5
 80009ee:	f000 fb75 	bl	80010dc <_sbrk_r>
 80009f2:	1c43      	adds	r3, r0, #1
 80009f4:	d00a      	beq.n	8000a0c <sbrk_aligned+0x34>
 80009f6:	1cc4      	adds	r4, r0, #3
 80009f8:	f024 0403 	bic.w	r4, r4, #3
 80009fc:	42a0      	cmp	r0, r4
 80009fe:	d007      	beq.n	8000a10 <sbrk_aligned+0x38>
 8000a00:	1a21      	subs	r1, r4, r0
 8000a02:	4628      	mov	r0, r5
 8000a04:	f000 fb6a 	bl	80010dc <_sbrk_r>
 8000a08:	3001      	adds	r0, #1
 8000a0a:	d101      	bne.n	8000a10 <sbrk_aligned+0x38>
 8000a0c:	f04f 34ff 	mov.w	r4, #4294967295
 8000a10:	4620      	mov	r0, r4
 8000a12:	bd70      	pop	{r4, r5, r6, pc}
 8000a14:	2000008c 	.word	0x2000008c

08000a18 <_malloc_r>:
 8000a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a1c:	1ccd      	adds	r5, r1, #3
 8000a1e:	f025 0503 	bic.w	r5, r5, #3
 8000a22:	3508      	adds	r5, #8
 8000a24:	2d0c      	cmp	r5, #12
 8000a26:	bf38      	it	cc
 8000a28:	250c      	movcc	r5, #12
 8000a2a:	2d00      	cmp	r5, #0
 8000a2c:	4607      	mov	r7, r0
 8000a2e:	db01      	blt.n	8000a34 <_malloc_r+0x1c>
 8000a30:	42a9      	cmp	r1, r5
 8000a32:	d905      	bls.n	8000a40 <_malloc_r+0x28>
 8000a34:	230c      	movs	r3, #12
 8000a36:	603b      	str	r3, [r7, #0]
 8000a38:	2600      	movs	r6, #0
 8000a3a:	4630      	mov	r0, r6
 8000a3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000a40:	4e2e      	ldr	r6, [pc, #184]	; (8000afc <_malloc_r+0xe4>)
 8000a42:	f000 fdbb 	bl	80015bc <__malloc_lock>
 8000a46:	6833      	ldr	r3, [r6, #0]
 8000a48:	461c      	mov	r4, r3
 8000a4a:	bb34      	cbnz	r4, 8000a9a <_malloc_r+0x82>
 8000a4c:	4629      	mov	r1, r5
 8000a4e:	4638      	mov	r0, r7
 8000a50:	f7ff ffc2 	bl	80009d8 <sbrk_aligned>
 8000a54:	1c43      	adds	r3, r0, #1
 8000a56:	4604      	mov	r4, r0
 8000a58:	d14d      	bne.n	8000af6 <_malloc_r+0xde>
 8000a5a:	6834      	ldr	r4, [r6, #0]
 8000a5c:	4626      	mov	r6, r4
 8000a5e:	2e00      	cmp	r6, #0
 8000a60:	d140      	bne.n	8000ae4 <_malloc_r+0xcc>
 8000a62:	6823      	ldr	r3, [r4, #0]
 8000a64:	4631      	mov	r1, r6
 8000a66:	4638      	mov	r0, r7
 8000a68:	eb04 0803 	add.w	r8, r4, r3
 8000a6c:	f000 fb36 	bl	80010dc <_sbrk_r>
 8000a70:	4580      	cmp	r8, r0
 8000a72:	d13a      	bne.n	8000aea <_malloc_r+0xd2>
 8000a74:	6821      	ldr	r1, [r4, #0]
 8000a76:	3503      	adds	r5, #3
 8000a78:	1a6d      	subs	r5, r5, r1
 8000a7a:	f025 0503 	bic.w	r5, r5, #3
 8000a7e:	3508      	adds	r5, #8
 8000a80:	2d0c      	cmp	r5, #12
 8000a82:	bf38      	it	cc
 8000a84:	250c      	movcc	r5, #12
 8000a86:	4629      	mov	r1, r5
 8000a88:	4638      	mov	r0, r7
 8000a8a:	f7ff ffa5 	bl	80009d8 <sbrk_aligned>
 8000a8e:	3001      	adds	r0, #1
 8000a90:	d02b      	beq.n	8000aea <_malloc_r+0xd2>
 8000a92:	6823      	ldr	r3, [r4, #0]
 8000a94:	442b      	add	r3, r5
 8000a96:	6023      	str	r3, [r4, #0]
 8000a98:	e00e      	b.n	8000ab8 <_malloc_r+0xa0>
 8000a9a:	6822      	ldr	r2, [r4, #0]
 8000a9c:	1b52      	subs	r2, r2, r5
 8000a9e:	d41e      	bmi.n	8000ade <_malloc_r+0xc6>
 8000aa0:	2a0b      	cmp	r2, #11
 8000aa2:	d916      	bls.n	8000ad2 <_malloc_r+0xba>
 8000aa4:	1961      	adds	r1, r4, r5
 8000aa6:	42a3      	cmp	r3, r4
 8000aa8:	6025      	str	r5, [r4, #0]
 8000aaa:	bf18      	it	ne
 8000aac:	6059      	strne	r1, [r3, #4]
 8000aae:	6863      	ldr	r3, [r4, #4]
 8000ab0:	bf08      	it	eq
 8000ab2:	6031      	streq	r1, [r6, #0]
 8000ab4:	5162      	str	r2, [r4, r5]
 8000ab6:	604b      	str	r3, [r1, #4]
 8000ab8:	4638      	mov	r0, r7
 8000aba:	f104 060b 	add.w	r6, r4, #11
 8000abe:	f000 fd83 	bl	80015c8 <__malloc_unlock>
 8000ac2:	f026 0607 	bic.w	r6, r6, #7
 8000ac6:	1d23      	adds	r3, r4, #4
 8000ac8:	1af2      	subs	r2, r6, r3
 8000aca:	d0b6      	beq.n	8000a3a <_malloc_r+0x22>
 8000acc:	1b9b      	subs	r3, r3, r6
 8000ace:	50a3      	str	r3, [r4, r2]
 8000ad0:	e7b3      	b.n	8000a3a <_malloc_r+0x22>
 8000ad2:	6862      	ldr	r2, [r4, #4]
 8000ad4:	42a3      	cmp	r3, r4
 8000ad6:	bf0c      	ite	eq
 8000ad8:	6032      	streq	r2, [r6, #0]
 8000ada:	605a      	strne	r2, [r3, #4]
 8000adc:	e7ec      	b.n	8000ab8 <_malloc_r+0xa0>
 8000ade:	4623      	mov	r3, r4
 8000ae0:	6864      	ldr	r4, [r4, #4]
 8000ae2:	e7b2      	b.n	8000a4a <_malloc_r+0x32>
 8000ae4:	4634      	mov	r4, r6
 8000ae6:	6876      	ldr	r6, [r6, #4]
 8000ae8:	e7b9      	b.n	8000a5e <_malloc_r+0x46>
 8000aea:	230c      	movs	r3, #12
 8000aec:	603b      	str	r3, [r7, #0]
 8000aee:	4638      	mov	r0, r7
 8000af0:	f000 fd6a 	bl	80015c8 <__malloc_unlock>
 8000af4:	e7a1      	b.n	8000a3a <_malloc_r+0x22>
 8000af6:	6025      	str	r5, [r4, #0]
 8000af8:	e7de      	b.n	8000ab8 <_malloc_r+0xa0>
 8000afa:	bf00      	nop
 8000afc:	20000088 	.word	0x20000088

08000b00 <__sfputc_r>:
 8000b00:	6893      	ldr	r3, [r2, #8]
 8000b02:	3b01      	subs	r3, #1
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	b410      	push	{r4}
 8000b08:	6093      	str	r3, [r2, #8]
 8000b0a:	da08      	bge.n	8000b1e <__sfputc_r+0x1e>
 8000b0c:	6994      	ldr	r4, [r2, #24]
 8000b0e:	42a3      	cmp	r3, r4
 8000b10:	db01      	blt.n	8000b16 <__sfputc_r+0x16>
 8000b12:	290a      	cmp	r1, #10
 8000b14:	d103      	bne.n	8000b1e <__sfputc_r+0x1e>
 8000b16:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b1a:	f000 bb33 	b.w	8001184 <__swbuf_r>
 8000b1e:	6813      	ldr	r3, [r2, #0]
 8000b20:	1c58      	adds	r0, r3, #1
 8000b22:	6010      	str	r0, [r2, #0]
 8000b24:	7019      	strb	r1, [r3, #0]
 8000b26:	4608      	mov	r0, r1
 8000b28:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b2c:	4770      	bx	lr

08000b2e <__sfputs_r>:
 8000b2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b30:	4606      	mov	r6, r0
 8000b32:	460f      	mov	r7, r1
 8000b34:	4614      	mov	r4, r2
 8000b36:	18d5      	adds	r5, r2, r3
 8000b38:	42ac      	cmp	r4, r5
 8000b3a:	d101      	bne.n	8000b40 <__sfputs_r+0x12>
 8000b3c:	2000      	movs	r0, #0
 8000b3e:	e007      	b.n	8000b50 <__sfputs_r+0x22>
 8000b40:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b44:	463a      	mov	r2, r7
 8000b46:	4630      	mov	r0, r6
 8000b48:	f7ff ffda 	bl	8000b00 <__sfputc_r>
 8000b4c:	1c43      	adds	r3, r0, #1
 8000b4e:	d1f3      	bne.n	8000b38 <__sfputs_r+0xa>
 8000b50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000b54 <_vfiprintf_r>:
 8000b54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b58:	460d      	mov	r5, r1
 8000b5a:	b09d      	sub	sp, #116	; 0x74
 8000b5c:	4614      	mov	r4, r2
 8000b5e:	4698      	mov	r8, r3
 8000b60:	4606      	mov	r6, r0
 8000b62:	b118      	cbz	r0, 8000b6c <_vfiprintf_r+0x18>
 8000b64:	6983      	ldr	r3, [r0, #24]
 8000b66:	b90b      	cbnz	r3, 8000b6c <_vfiprintf_r+0x18>
 8000b68:	f7ff fe96 	bl	8000898 <__sinit>
 8000b6c:	4b89      	ldr	r3, [pc, #548]	; (8000d94 <_vfiprintf_r+0x240>)
 8000b6e:	429d      	cmp	r5, r3
 8000b70:	d11b      	bne.n	8000baa <_vfiprintf_r+0x56>
 8000b72:	6875      	ldr	r5, [r6, #4]
 8000b74:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000b76:	07d9      	lsls	r1, r3, #31
 8000b78:	d405      	bmi.n	8000b86 <_vfiprintf_r+0x32>
 8000b7a:	89ab      	ldrh	r3, [r5, #12]
 8000b7c:	059a      	lsls	r2, r3, #22
 8000b7e:	d402      	bmi.n	8000b86 <_vfiprintf_r+0x32>
 8000b80:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000b82:	f7ff ff27 	bl	80009d4 <__retarget_lock_acquire_recursive>
 8000b86:	89ab      	ldrh	r3, [r5, #12]
 8000b88:	071b      	lsls	r3, r3, #28
 8000b8a:	d501      	bpl.n	8000b90 <_vfiprintf_r+0x3c>
 8000b8c:	692b      	ldr	r3, [r5, #16]
 8000b8e:	b9eb      	cbnz	r3, 8000bcc <_vfiprintf_r+0x78>
 8000b90:	4629      	mov	r1, r5
 8000b92:	4630      	mov	r0, r6
 8000b94:	f000 fb5a 	bl	800124c <__swsetup_r>
 8000b98:	b1c0      	cbz	r0, 8000bcc <_vfiprintf_r+0x78>
 8000b9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000b9c:	07dc      	lsls	r4, r3, #31
 8000b9e:	d50e      	bpl.n	8000bbe <_vfiprintf_r+0x6a>
 8000ba0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ba4:	b01d      	add	sp, #116	; 0x74
 8000ba6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000baa:	4b7b      	ldr	r3, [pc, #492]	; (8000d98 <_vfiprintf_r+0x244>)
 8000bac:	429d      	cmp	r5, r3
 8000bae:	d101      	bne.n	8000bb4 <_vfiprintf_r+0x60>
 8000bb0:	68b5      	ldr	r5, [r6, #8]
 8000bb2:	e7df      	b.n	8000b74 <_vfiprintf_r+0x20>
 8000bb4:	4b79      	ldr	r3, [pc, #484]	; (8000d9c <_vfiprintf_r+0x248>)
 8000bb6:	429d      	cmp	r5, r3
 8000bb8:	bf08      	it	eq
 8000bba:	68f5      	ldreq	r5, [r6, #12]
 8000bbc:	e7da      	b.n	8000b74 <_vfiprintf_r+0x20>
 8000bbe:	89ab      	ldrh	r3, [r5, #12]
 8000bc0:	0598      	lsls	r0, r3, #22
 8000bc2:	d4ed      	bmi.n	8000ba0 <_vfiprintf_r+0x4c>
 8000bc4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000bc6:	f7ff ff06 	bl	80009d6 <__retarget_lock_release_recursive>
 8000bca:	e7e9      	b.n	8000ba0 <_vfiprintf_r+0x4c>
 8000bcc:	2300      	movs	r3, #0
 8000bce:	9309      	str	r3, [sp, #36]	; 0x24
 8000bd0:	2320      	movs	r3, #32
 8000bd2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000bd6:	f8cd 800c 	str.w	r8, [sp, #12]
 8000bda:	2330      	movs	r3, #48	; 0x30
 8000bdc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000da0 <_vfiprintf_r+0x24c>
 8000be0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000be4:	f04f 0901 	mov.w	r9, #1
 8000be8:	4623      	mov	r3, r4
 8000bea:	469a      	mov	sl, r3
 8000bec:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000bf0:	b10a      	cbz	r2, 8000bf6 <_vfiprintf_r+0xa2>
 8000bf2:	2a25      	cmp	r2, #37	; 0x25
 8000bf4:	d1f9      	bne.n	8000bea <_vfiprintf_r+0x96>
 8000bf6:	ebba 0b04 	subs.w	fp, sl, r4
 8000bfa:	d00b      	beq.n	8000c14 <_vfiprintf_r+0xc0>
 8000bfc:	465b      	mov	r3, fp
 8000bfe:	4622      	mov	r2, r4
 8000c00:	4629      	mov	r1, r5
 8000c02:	4630      	mov	r0, r6
 8000c04:	f7ff ff93 	bl	8000b2e <__sfputs_r>
 8000c08:	3001      	adds	r0, #1
 8000c0a:	f000 80aa 	beq.w	8000d62 <_vfiprintf_r+0x20e>
 8000c0e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000c10:	445a      	add	r2, fp
 8000c12:	9209      	str	r2, [sp, #36]	; 0x24
 8000c14:	f89a 3000 	ldrb.w	r3, [sl]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	f000 80a2 	beq.w	8000d62 <_vfiprintf_r+0x20e>
 8000c1e:	2300      	movs	r3, #0
 8000c20:	f04f 32ff 	mov.w	r2, #4294967295
 8000c24:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000c28:	f10a 0a01 	add.w	sl, sl, #1
 8000c2c:	9304      	str	r3, [sp, #16]
 8000c2e:	9307      	str	r3, [sp, #28]
 8000c30:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000c34:	931a      	str	r3, [sp, #104]	; 0x68
 8000c36:	4654      	mov	r4, sl
 8000c38:	2205      	movs	r2, #5
 8000c3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c3e:	4858      	ldr	r0, [pc, #352]	; (8000da0 <_vfiprintf_r+0x24c>)
 8000c40:	f7ff fae6 	bl	8000210 <memchr>
 8000c44:	9a04      	ldr	r2, [sp, #16]
 8000c46:	b9d8      	cbnz	r0, 8000c80 <_vfiprintf_r+0x12c>
 8000c48:	06d1      	lsls	r1, r2, #27
 8000c4a:	bf44      	itt	mi
 8000c4c:	2320      	movmi	r3, #32
 8000c4e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000c52:	0713      	lsls	r3, r2, #28
 8000c54:	bf44      	itt	mi
 8000c56:	232b      	movmi	r3, #43	; 0x2b
 8000c58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000c5c:	f89a 3000 	ldrb.w	r3, [sl]
 8000c60:	2b2a      	cmp	r3, #42	; 0x2a
 8000c62:	d015      	beq.n	8000c90 <_vfiprintf_r+0x13c>
 8000c64:	9a07      	ldr	r2, [sp, #28]
 8000c66:	4654      	mov	r4, sl
 8000c68:	2000      	movs	r0, #0
 8000c6a:	f04f 0c0a 	mov.w	ip, #10
 8000c6e:	4621      	mov	r1, r4
 8000c70:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000c74:	3b30      	subs	r3, #48	; 0x30
 8000c76:	2b09      	cmp	r3, #9
 8000c78:	d94e      	bls.n	8000d18 <_vfiprintf_r+0x1c4>
 8000c7a:	b1b0      	cbz	r0, 8000caa <_vfiprintf_r+0x156>
 8000c7c:	9207      	str	r2, [sp, #28]
 8000c7e:	e014      	b.n	8000caa <_vfiprintf_r+0x156>
 8000c80:	eba0 0308 	sub.w	r3, r0, r8
 8000c84:	fa09 f303 	lsl.w	r3, r9, r3
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	9304      	str	r3, [sp, #16]
 8000c8c:	46a2      	mov	sl, r4
 8000c8e:	e7d2      	b.n	8000c36 <_vfiprintf_r+0xe2>
 8000c90:	9b03      	ldr	r3, [sp, #12]
 8000c92:	1d19      	adds	r1, r3, #4
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	9103      	str	r1, [sp, #12]
 8000c98:	2b00      	cmp	r3, #0
 8000c9a:	bfbb      	ittet	lt
 8000c9c:	425b      	neglt	r3, r3
 8000c9e:	f042 0202 	orrlt.w	r2, r2, #2
 8000ca2:	9307      	strge	r3, [sp, #28]
 8000ca4:	9307      	strlt	r3, [sp, #28]
 8000ca6:	bfb8      	it	lt
 8000ca8:	9204      	strlt	r2, [sp, #16]
 8000caa:	7823      	ldrb	r3, [r4, #0]
 8000cac:	2b2e      	cmp	r3, #46	; 0x2e
 8000cae:	d10c      	bne.n	8000cca <_vfiprintf_r+0x176>
 8000cb0:	7863      	ldrb	r3, [r4, #1]
 8000cb2:	2b2a      	cmp	r3, #42	; 0x2a
 8000cb4:	d135      	bne.n	8000d22 <_vfiprintf_r+0x1ce>
 8000cb6:	9b03      	ldr	r3, [sp, #12]
 8000cb8:	1d1a      	adds	r2, r3, #4
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	9203      	str	r2, [sp, #12]
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	bfb8      	it	lt
 8000cc2:	f04f 33ff 	movlt.w	r3, #4294967295
 8000cc6:	3402      	adds	r4, #2
 8000cc8:	9305      	str	r3, [sp, #20]
 8000cca:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8000db0 <_vfiprintf_r+0x25c>
 8000cce:	7821      	ldrb	r1, [r4, #0]
 8000cd0:	2203      	movs	r2, #3
 8000cd2:	4650      	mov	r0, sl
 8000cd4:	f7ff fa9c 	bl	8000210 <memchr>
 8000cd8:	b140      	cbz	r0, 8000cec <_vfiprintf_r+0x198>
 8000cda:	2340      	movs	r3, #64	; 0x40
 8000cdc:	eba0 000a 	sub.w	r0, r0, sl
 8000ce0:	fa03 f000 	lsl.w	r0, r3, r0
 8000ce4:	9b04      	ldr	r3, [sp, #16]
 8000ce6:	4303      	orrs	r3, r0
 8000ce8:	3401      	adds	r4, #1
 8000cea:	9304      	str	r3, [sp, #16]
 8000cec:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000cf0:	482c      	ldr	r0, [pc, #176]	; (8000da4 <_vfiprintf_r+0x250>)
 8000cf2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000cf6:	2206      	movs	r2, #6
 8000cf8:	f7ff fa8a 	bl	8000210 <memchr>
 8000cfc:	2800      	cmp	r0, #0
 8000cfe:	d03f      	beq.n	8000d80 <_vfiprintf_r+0x22c>
 8000d00:	4b29      	ldr	r3, [pc, #164]	; (8000da8 <_vfiprintf_r+0x254>)
 8000d02:	bb1b      	cbnz	r3, 8000d4c <_vfiprintf_r+0x1f8>
 8000d04:	9b03      	ldr	r3, [sp, #12]
 8000d06:	3307      	adds	r3, #7
 8000d08:	f023 0307 	bic.w	r3, r3, #7
 8000d0c:	3308      	adds	r3, #8
 8000d0e:	9303      	str	r3, [sp, #12]
 8000d10:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000d12:	443b      	add	r3, r7
 8000d14:	9309      	str	r3, [sp, #36]	; 0x24
 8000d16:	e767      	b.n	8000be8 <_vfiprintf_r+0x94>
 8000d18:	fb0c 3202 	mla	r2, ip, r2, r3
 8000d1c:	460c      	mov	r4, r1
 8000d1e:	2001      	movs	r0, #1
 8000d20:	e7a5      	b.n	8000c6e <_vfiprintf_r+0x11a>
 8000d22:	2300      	movs	r3, #0
 8000d24:	3401      	adds	r4, #1
 8000d26:	9305      	str	r3, [sp, #20]
 8000d28:	4619      	mov	r1, r3
 8000d2a:	f04f 0c0a 	mov.w	ip, #10
 8000d2e:	4620      	mov	r0, r4
 8000d30:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000d34:	3a30      	subs	r2, #48	; 0x30
 8000d36:	2a09      	cmp	r2, #9
 8000d38:	d903      	bls.n	8000d42 <_vfiprintf_r+0x1ee>
 8000d3a:	2b00      	cmp	r3, #0
 8000d3c:	d0c5      	beq.n	8000cca <_vfiprintf_r+0x176>
 8000d3e:	9105      	str	r1, [sp, #20]
 8000d40:	e7c3      	b.n	8000cca <_vfiprintf_r+0x176>
 8000d42:	fb0c 2101 	mla	r1, ip, r1, r2
 8000d46:	4604      	mov	r4, r0
 8000d48:	2301      	movs	r3, #1
 8000d4a:	e7f0      	b.n	8000d2e <_vfiprintf_r+0x1da>
 8000d4c:	ab03      	add	r3, sp, #12
 8000d4e:	9300      	str	r3, [sp, #0]
 8000d50:	462a      	mov	r2, r5
 8000d52:	4b16      	ldr	r3, [pc, #88]	; (8000dac <_vfiprintf_r+0x258>)
 8000d54:	a904      	add	r1, sp, #16
 8000d56:	4630      	mov	r0, r6
 8000d58:	f3af 8000 	nop.w
 8000d5c:	4607      	mov	r7, r0
 8000d5e:	1c78      	adds	r0, r7, #1
 8000d60:	d1d6      	bne.n	8000d10 <_vfiprintf_r+0x1bc>
 8000d62:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d64:	07d9      	lsls	r1, r3, #31
 8000d66:	d405      	bmi.n	8000d74 <_vfiprintf_r+0x220>
 8000d68:	89ab      	ldrh	r3, [r5, #12]
 8000d6a:	059a      	lsls	r2, r3, #22
 8000d6c:	d402      	bmi.n	8000d74 <_vfiprintf_r+0x220>
 8000d6e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000d70:	f7ff fe31 	bl	80009d6 <__retarget_lock_release_recursive>
 8000d74:	89ab      	ldrh	r3, [r5, #12]
 8000d76:	065b      	lsls	r3, r3, #25
 8000d78:	f53f af12 	bmi.w	8000ba0 <_vfiprintf_r+0x4c>
 8000d7c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000d7e:	e711      	b.n	8000ba4 <_vfiprintf_r+0x50>
 8000d80:	ab03      	add	r3, sp, #12
 8000d82:	9300      	str	r3, [sp, #0]
 8000d84:	462a      	mov	r2, r5
 8000d86:	4b09      	ldr	r3, [pc, #36]	; (8000dac <_vfiprintf_r+0x258>)
 8000d88:	a904      	add	r1, sp, #16
 8000d8a:	4630      	mov	r0, r6
 8000d8c:	f000 f880 	bl	8000e90 <_printf_i>
 8000d90:	e7e4      	b.n	8000d5c <_vfiprintf_r+0x208>
 8000d92:	bf00      	nop
 8000d94:	08001730 	.word	0x08001730
 8000d98:	08001750 	.word	0x08001750
 8000d9c:	08001710 	.word	0x08001710
 8000da0:	08001770 	.word	0x08001770
 8000da4:	0800177a 	.word	0x0800177a
 8000da8:	00000000 	.word	0x00000000
 8000dac:	08000b2f 	.word	0x08000b2f
 8000db0:	08001776 	.word	0x08001776

08000db4 <_printf_common>:
 8000db4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000db8:	4616      	mov	r6, r2
 8000dba:	4699      	mov	r9, r3
 8000dbc:	688a      	ldr	r2, [r1, #8]
 8000dbe:	690b      	ldr	r3, [r1, #16]
 8000dc0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000dc4:	4293      	cmp	r3, r2
 8000dc6:	bfb8      	it	lt
 8000dc8:	4613      	movlt	r3, r2
 8000dca:	6033      	str	r3, [r6, #0]
 8000dcc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000dd0:	4607      	mov	r7, r0
 8000dd2:	460c      	mov	r4, r1
 8000dd4:	b10a      	cbz	r2, 8000dda <_printf_common+0x26>
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	6033      	str	r3, [r6, #0]
 8000dda:	6823      	ldr	r3, [r4, #0]
 8000ddc:	0699      	lsls	r1, r3, #26
 8000dde:	bf42      	ittt	mi
 8000de0:	6833      	ldrmi	r3, [r6, #0]
 8000de2:	3302      	addmi	r3, #2
 8000de4:	6033      	strmi	r3, [r6, #0]
 8000de6:	6825      	ldr	r5, [r4, #0]
 8000de8:	f015 0506 	ands.w	r5, r5, #6
 8000dec:	d106      	bne.n	8000dfc <_printf_common+0x48>
 8000dee:	f104 0a19 	add.w	sl, r4, #25
 8000df2:	68e3      	ldr	r3, [r4, #12]
 8000df4:	6832      	ldr	r2, [r6, #0]
 8000df6:	1a9b      	subs	r3, r3, r2
 8000df8:	42ab      	cmp	r3, r5
 8000dfa:	dc26      	bgt.n	8000e4a <_printf_common+0x96>
 8000dfc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000e00:	1e13      	subs	r3, r2, #0
 8000e02:	6822      	ldr	r2, [r4, #0]
 8000e04:	bf18      	it	ne
 8000e06:	2301      	movne	r3, #1
 8000e08:	0692      	lsls	r2, r2, #26
 8000e0a:	d42b      	bmi.n	8000e64 <_printf_common+0xb0>
 8000e0c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000e10:	4649      	mov	r1, r9
 8000e12:	4638      	mov	r0, r7
 8000e14:	47c0      	blx	r8
 8000e16:	3001      	adds	r0, #1
 8000e18:	d01e      	beq.n	8000e58 <_printf_common+0xa4>
 8000e1a:	6823      	ldr	r3, [r4, #0]
 8000e1c:	68e5      	ldr	r5, [r4, #12]
 8000e1e:	6832      	ldr	r2, [r6, #0]
 8000e20:	f003 0306 	and.w	r3, r3, #6
 8000e24:	2b04      	cmp	r3, #4
 8000e26:	bf08      	it	eq
 8000e28:	1aad      	subeq	r5, r5, r2
 8000e2a:	68a3      	ldr	r3, [r4, #8]
 8000e2c:	6922      	ldr	r2, [r4, #16]
 8000e2e:	bf0c      	ite	eq
 8000e30:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000e34:	2500      	movne	r5, #0
 8000e36:	4293      	cmp	r3, r2
 8000e38:	bfc4      	itt	gt
 8000e3a:	1a9b      	subgt	r3, r3, r2
 8000e3c:	18ed      	addgt	r5, r5, r3
 8000e3e:	2600      	movs	r6, #0
 8000e40:	341a      	adds	r4, #26
 8000e42:	42b5      	cmp	r5, r6
 8000e44:	d11a      	bne.n	8000e7c <_printf_common+0xc8>
 8000e46:	2000      	movs	r0, #0
 8000e48:	e008      	b.n	8000e5c <_printf_common+0xa8>
 8000e4a:	2301      	movs	r3, #1
 8000e4c:	4652      	mov	r2, sl
 8000e4e:	4649      	mov	r1, r9
 8000e50:	4638      	mov	r0, r7
 8000e52:	47c0      	blx	r8
 8000e54:	3001      	adds	r0, #1
 8000e56:	d103      	bne.n	8000e60 <_printf_common+0xac>
 8000e58:	f04f 30ff 	mov.w	r0, #4294967295
 8000e5c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e60:	3501      	adds	r5, #1
 8000e62:	e7c6      	b.n	8000df2 <_printf_common+0x3e>
 8000e64:	18e1      	adds	r1, r4, r3
 8000e66:	1c5a      	adds	r2, r3, #1
 8000e68:	2030      	movs	r0, #48	; 0x30
 8000e6a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000e6e:	4422      	add	r2, r4
 8000e70:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000e74:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000e78:	3302      	adds	r3, #2
 8000e7a:	e7c7      	b.n	8000e0c <_printf_common+0x58>
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	4622      	mov	r2, r4
 8000e80:	4649      	mov	r1, r9
 8000e82:	4638      	mov	r0, r7
 8000e84:	47c0      	blx	r8
 8000e86:	3001      	adds	r0, #1
 8000e88:	d0e6      	beq.n	8000e58 <_printf_common+0xa4>
 8000e8a:	3601      	adds	r6, #1
 8000e8c:	e7d9      	b.n	8000e42 <_printf_common+0x8e>
	...

08000e90 <_printf_i>:
 8000e90:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000e94:	7e0f      	ldrb	r7, [r1, #24]
 8000e96:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000e98:	2f78      	cmp	r7, #120	; 0x78
 8000e9a:	4691      	mov	r9, r2
 8000e9c:	4680      	mov	r8, r0
 8000e9e:	460c      	mov	r4, r1
 8000ea0:	469a      	mov	sl, r3
 8000ea2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000ea6:	d807      	bhi.n	8000eb8 <_printf_i+0x28>
 8000ea8:	2f62      	cmp	r7, #98	; 0x62
 8000eaa:	d80a      	bhi.n	8000ec2 <_printf_i+0x32>
 8000eac:	2f00      	cmp	r7, #0
 8000eae:	f000 80d8 	beq.w	8001062 <_printf_i+0x1d2>
 8000eb2:	2f58      	cmp	r7, #88	; 0x58
 8000eb4:	f000 80a3 	beq.w	8000ffe <_printf_i+0x16e>
 8000eb8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000ebc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000ec0:	e03a      	b.n	8000f38 <_printf_i+0xa8>
 8000ec2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000ec6:	2b15      	cmp	r3, #21
 8000ec8:	d8f6      	bhi.n	8000eb8 <_printf_i+0x28>
 8000eca:	a101      	add	r1, pc, #4	; (adr r1, 8000ed0 <_printf_i+0x40>)
 8000ecc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000ed0:	08000f29 	.word	0x08000f29
 8000ed4:	08000f3d 	.word	0x08000f3d
 8000ed8:	08000eb9 	.word	0x08000eb9
 8000edc:	08000eb9 	.word	0x08000eb9
 8000ee0:	08000eb9 	.word	0x08000eb9
 8000ee4:	08000eb9 	.word	0x08000eb9
 8000ee8:	08000f3d 	.word	0x08000f3d
 8000eec:	08000eb9 	.word	0x08000eb9
 8000ef0:	08000eb9 	.word	0x08000eb9
 8000ef4:	08000eb9 	.word	0x08000eb9
 8000ef8:	08000eb9 	.word	0x08000eb9
 8000efc:	08001049 	.word	0x08001049
 8000f00:	08000f6d 	.word	0x08000f6d
 8000f04:	0800102b 	.word	0x0800102b
 8000f08:	08000eb9 	.word	0x08000eb9
 8000f0c:	08000eb9 	.word	0x08000eb9
 8000f10:	0800106b 	.word	0x0800106b
 8000f14:	08000eb9 	.word	0x08000eb9
 8000f18:	08000f6d 	.word	0x08000f6d
 8000f1c:	08000eb9 	.word	0x08000eb9
 8000f20:	08000eb9 	.word	0x08000eb9
 8000f24:	08001033 	.word	0x08001033
 8000f28:	682b      	ldr	r3, [r5, #0]
 8000f2a:	1d1a      	adds	r2, r3, #4
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	602a      	str	r2, [r5, #0]
 8000f30:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000f34:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000f38:	2301      	movs	r3, #1
 8000f3a:	e0a3      	b.n	8001084 <_printf_i+0x1f4>
 8000f3c:	6820      	ldr	r0, [r4, #0]
 8000f3e:	6829      	ldr	r1, [r5, #0]
 8000f40:	0606      	lsls	r6, r0, #24
 8000f42:	f101 0304 	add.w	r3, r1, #4
 8000f46:	d50a      	bpl.n	8000f5e <_printf_i+0xce>
 8000f48:	680e      	ldr	r6, [r1, #0]
 8000f4a:	602b      	str	r3, [r5, #0]
 8000f4c:	2e00      	cmp	r6, #0
 8000f4e:	da03      	bge.n	8000f58 <_printf_i+0xc8>
 8000f50:	232d      	movs	r3, #45	; 0x2d
 8000f52:	4276      	negs	r6, r6
 8000f54:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000f58:	485e      	ldr	r0, [pc, #376]	; (80010d4 <_printf_i+0x244>)
 8000f5a:	230a      	movs	r3, #10
 8000f5c:	e019      	b.n	8000f92 <_printf_i+0x102>
 8000f5e:	680e      	ldr	r6, [r1, #0]
 8000f60:	602b      	str	r3, [r5, #0]
 8000f62:	f010 0f40 	tst.w	r0, #64	; 0x40
 8000f66:	bf18      	it	ne
 8000f68:	b236      	sxthne	r6, r6
 8000f6a:	e7ef      	b.n	8000f4c <_printf_i+0xbc>
 8000f6c:	682b      	ldr	r3, [r5, #0]
 8000f6e:	6820      	ldr	r0, [r4, #0]
 8000f70:	1d19      	adds	r1, r3, #4
 8000f72:	6029      	str	r1, [r5, #0]
 8000f74:	0601      	lsls	r1, r0, #24
 8000f76:	d501      	bpl.n	8000f7c <_printf_i+0xec>
 8000f78:	681e      	ldr	r6, [r3, #0]
 8000f7a:	e002      	b.n	8000f82 <_printf_i+0xf2>
 8000f7c:	0646      	lsls	r6, r0, #25
 8000f7e:	d5fb      	bpl.n	8000f78 <_printf_i+0xe8>
 8000f80:	881e      	ldrh	r6, [r3, #0]
 8000f82:	4854      	ldr	r0, [pc, #336]	; (80010d4 <_printf_i+0x244>)
 8000f84:	2f6f      	cmp	r7, #111	; 0x6f
 8000f86:	bf0c      	ite	eq
 8000f88:	2308      	moveq	r3, #8
 8000f8a:	230a      	movne	r3, #10
 8000f8c:	2100      	movs	r1, #0
 8000f8e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000f92:	6865      	ldr	r5, [r4, #4]
 8000f94:	60a5      	str	r5, [r4, #8]
 8000f96:	2d00      	cmp	r5, #0
 8000f98:	bfa2      	ittt	ge
 8000f9a:	6821      	ldrge	r1, [r4, #0]
 8000f9c:	f021 0104 	bicge.w	r1, r1, #4
 8000fa0:	6021      	strge	r1, [r4, #0]
 8000fa2:	b90e      	cbnz	r6, 8000fa8 <_printf_i+0x118>
 8000fa4:	2d00      	cmp	r5, #0
 8000fa6:	d04d      	beq.n	8001044 <_printf_i+0x1b4>
 8000fa8:	4615      	mov	r5, r2
 8000faa:	fbb6 f1f3 	udiv	r1, r6, r3
 8000fae:	fb03 6711 	mls	r7, r3, r1, r6
 8000fb2:	5dc7      	ldrb	r7, [r0, r7]
 8000fb4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000fb8:	4637      	mov	r7, r6
 8000fba:	42bb      	cmp	r3, r7
 8000fbc:	460e      	mov	r6, r1
 8000fbe:	d9f4      	bls.n	8000faa <_printf_i+0x11a>
 8000fc0:	2b08      	cmp	r3, #8
 8000fc2:	d10b      	bne.n	8000fdc <_printf_i+0x14c>
 8000fc4:	6823      	ldr	r3, [r4, #0]
 8000fc6:	07de      	lsls	r6, r3, #31
 8000fc8:	d508      	bpl.n	8000fdc <_printf_i+0x14c>
 8000fca:	6923      	ldr	r3, [r4, #16]
 8000fcc:	6861      	ldr	r1, [r4, #4]
 8000fce:	4299      	cmp	r1, r3
 8000fd0:	bfde      	ittt	le
 8000fd2:	2330      	movle	r3, #48	; 0x30
 8000fd4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8000fd8:	f105 35ff 	addle.w	r5, r5, #4294967295
 8000fdc:	1b52      	subs	r2, r2, r5
 8000fde:	6122      	str	r2, [r4, #16]
 8000fe0:	f8cd a000 	str.w	sl, [sp]
 8000fe4:	464b      	mov	r3, r9
 8000fe6:	aa03      	add	r2, sp, #12
 8000fe8:	4621      	mov	r1, r4
 8000fea:	4640      	mov	r0, r8
 8000fec:	f7ff fee2 	bl	8000db4 <_printf_common>
 8000ff0:	3001      	adds	r0, #1
 8000ff2:	d14c      	bne.n	800108e <_printf_i+0x1fe>
 8000ff4:	f04f 30ff 	mov.w	r0, #4294967295
 8000ff8:	b004      	add	sp, #16
 8000ffa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ffe:	4835      	ldr	r0, [pc, #212]	; (80010d4 <_printf_i+0x244>)
 8001000:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8001004:	6829      	ldr	r1, [r5, #0]
 8001006:	6823      	ldr	r3, [r4, #0]
 8001008:	f851 6b04 	ldr.w	r6, [r1], #4
 800100c:	6029      	str	r1, [r5, #0]
 800100e:	061d      	lsls	r5, r3, #24
 8001010:	d514      	bpl.n	800103c <_printf_i+0x1ac>
 8001012:	07df      	lsls	r7, r3, #31
 8001014:	bf44      	itt	mi
 8001016:	f043 0320 	orrmi.w	r3, r3, #32
 800101a:	6023      	strmi	r3, [r4, #0]
 800101c:	b91e      	cbnz	r6, 8001026 <_printf_i+0x196>
 800101e:	6823      	ldr	r3, [r4, #0]
 8001020:	f023 0320 	bic.w	r3, r3, #32
 8001024:	6023      	str	r3, [r4, #0]
 8001026:	2310      	movs	r3, #16
 8001028:	e7b0      	b.n	8000f8c <_printf_i+0xfc>
 800102a:	6823      	ldr	r3, [r4, #0]
 800102c:	f043 0320 	orr.w	r3, r3, #32
 8001030:	6023      	str	r3, [r4, #0]
 8001032:	2378      	movs	r3, #120	; 0x78
 8001034:	4828      	ldr	r0, [pc, #160]	; (80010d8 <_printf_i+0x248>)
 8001036:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800103a:	e7e3      	b.n	8001004 <_printf_i+0x174>
 800103c:	0659      	lsls	r1, r3, #25
 800103e:	bf48      	it	mi
 8001040:	b2b6      	uxthmi	r6, r6
 8001042:	e7e6      	b.n	8001012 <_printf_i+0x182>
 8001044:	4615      	mov	r5, r2
 8001046:	e7bb      	b.n	8000fc0 <_printf_i+0x130>
 8001048:	682b      	ldr	r3, [r5, #0]
 800104a:	6826      	ldr	r6, [r4, #0]
 800104c:	6961      	ldr	r1, [r4, #20]
 800104e:	1d18      	adds	r0, r3, #4
 8001050:	6028      	str	r0, [r5, #0]
 8001052:	0635      	lsls	r5, r6, #24
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	d501      	bpl.n	800105c <_printf_i+0x1cc>
 8001058:	6019      	str	r1, [r3, #0]
 800105a:	e002      	b.n	8001062 <_printf_i+0x1d2>
 800105c:	0670      	lsls	r0, r6, #25
 800105e:	d5fb      	bpl.n	8001058 <_printf_i+0x1c8>
 8001060:	8019      	strh	r1, [r3, #0]
 8001062:	2300      	movs	r3, #0
 8001064:	6123      	str	r3, [r4, #16]
 8001066:	4615      	mov	r5, r2
 8001068:	e7ba      	b.n	8000fe0 <_printf_i+0x150>
 800106a:	682b      	ldr	r3, [r5, #0]
 800106c:	1d1a      	adds	r2, r3, #4
 800106e:	602a      	str	r2, [r5, #0]
 8001070:	681d      	ldr	r5, [r3, #0]
 8001072:	6862      	ldr	r2, [r4, #4]
 8001074:	2100      	movs	r1, #0
 8001076:	4628      	mov	r0, r5
 8001078:	f7ff f8ca 	bl	8000210 <memchr>
 800107c:	b108      	cbz	r0, 8001082 <_printf_i+0x1f2>
 800107e:	1b40      	subs	r0, r0, r5
 8001080:	6060      	str	r0, [r4, #4]
 8001082:	6863      	ldr	r3, [r4, #4]
 8001084:	6123      	str	r3, [r4, #16]
 8001086:	2300      	movs	r3, #0
 8001088:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800108c:	e7a8      	b.n	8000fe0 <_printf_i+0x150>
 800108e:	6923      	ldr	r3, [r4, #16]
 8001090:	462a      	mov	r2, r5
 8001092:	4649      	mov	r1, r9
 8001094:	4640      	mov	r0, r8
 8001096:	47d0      	blx	sl
 8001098:	3001      	adds	r0, #1
 800109a:	d0ab      	beq.n	8000ff4 <_printf_i+0x164>
 800109c:	6823      	ldr	r3, [r4, #0]
 800109e:	079b      	lsls	r3, r3, #30
 80010a0:	d413      	bmi.n	80010ca <_printf_i+0x23a>
 80010a2:	68e0      	ldr	r0, [r4, #12]
 80010a4:	9b03      	ldr	r3, [sp, #12]
 80010a6:	4298      	cmp	r0, r3
 80010a8:	bfb8      	it	lt
 80010aa:	4618      	movlt	r0, r3
 80010ac:	e7a4      	b.n	8000ff8 <_printf_i+0x168>
 80010ae:	2301      	movs	r3, #1
 80010b0:	4632      	mov	r2, r6
 80010b2:	4649      	mov	r1, r9
 80010b4:	4640      	mov	r0, r8
 80010b6:	47d0      	blx	sl
 80010b8:	3001      	adds	r0, #1
 80010ba:	d09b      	beq.n	8000ff4 <_printf_i+0x164>
 80010bc:	3501      	adds	r5, #1
 80010be:	68e3      	ldr	r3, [r4, #12]
 80010c0:	9903      	ldr	r1, [sp, #12]
 80010c2:	1a5b      	subs	r3, r3, r1
 80010c4:	42ab      	cmp	r3, r5
 80010c6:	dcf2      	bgt.n	80010ae <_printf_i+0x21e>
 80010c8:	e7eb      	b.n	80010a2 <_printf_i+0x212>
 80010ca:	2500      	movs	r5, #0
 80010cc:	f104 0619 	add.w	r6, r4, #25
 80010d0:	e7f5      	b.n	80010be <_printf_i+0x22e>
 80010d2:	bf00      	nop
 80010d4:	08001781 	.word	0x08001781
 80010d8:	08001792 	.word	0x08001792

080010dc <_sbrk_r>:
 80010dc:	b538      	push	{r3, r4, r5, lr}
 80010de:	4d06      	ldr	r5, [pc, #24]	; (80010f8 <_sbrk_r+0x1c>)
 80010e0:	2300      	movs	r3, #0
 80010e2:	4604      	mov	r4, r0
 80010e4:	4608      	mov	r0, r1
 80010e6:	602b      	str	r3, [r5, #0]
 80010e8:	f7ff f9c0 	bl	800046c <_sbrk>
 80010ec:	1c43      	adds	r3, r0, #1
 80010ee:	d102      	bne.n	80010f6 <_sbrk_r+0x1a>
 80010f0:	682b      	ldr	r3, [r5, #0]
 80010f2:	b103      	cbz	r3, 80010f6 <_sbrk_r+0x1a>
 80010f4:	6023      	str	r3, [r4, #0]
 80010f6:	bd38      	pop	{r3, r4, r5, pc}
 80010f8:	20000090 	.word	0x20000090

080010fc <__sread>:
 80010fc:	b510      	push	{r4, lr}
 80010fe:	460c      	mov	r4, r1
 8001100:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001104:	f000 fab2 	bl	800166c <_read_r>
 8001108:	2800      	cmp	r0, #0
 800110a:	bfab      	itete	ge
 800110c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800110e:	89a3      	ldrhlt	r3, [r4, #12]
 8001110:	181b      	addge	r3, r3, r0
 8001112:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001116:	bfac      	ite	ge
 8001118:	6563      	strge	r3, [r4, #84]	; 0x54
 800111a:	81a3      	strhlt	r3, [r4, #12]
 800111c:	bd10      	pop	{r4, pc}

0800111e <__swrite>:
 800111e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001122:	461f      	mov	r7, r3
 8001124:	898b      	ldrh	r3, [r1, #12]
 8001126:	05db      	lsls	r3, r3, #23
 8001128:	4605      	mov	r5, r0
 800112a:	460c      	mov	r4, r1
 800112c:	4616      	mov	r6, r2
 800112e:	d505      	bpl.n	800113c <__swrite+0x1e>
 8001130:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001134:	2302      	movs	r3, #2
 8001136:	2200      	movs	r2, #0
 8001138:	f000 f9c8 	bl	80014cc <_lseek_r>
 800113c:	89a3      	ldrh	r3, [r4, #12]
 800113e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001142:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8001146:	81a3      	strh	r3, [r4, #12]
 8001148:	4632      	mov	r2, r6
 800114a:	463b      	mov	r3, r7
 800114c:	4628      	mov	r0, r5
 800114e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8001152:	f000 b869 	b.w	8001228 <_write_r>

08001156 <__sseek>:
 8001156:	b510      	push	{r4, lr}
 8001158:	460c      	mov	r4, r1
 800115a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800115e:	f000 f9b5 	bl	80014cc <_lseek_r>
 8001162:	1c43      	adds	r3, r0, #1
 8001164:	89a3      	ldrh	r3, [r4, #12]
 8001166:	bf15      	itete	ne
 8001168:	6560      	strne	r0, [r4, #84]	; 0x54
 800116a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800116e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8001172:	81a3      	strheq	r3, [r4, #12]
 8001174:	bf18      	it	ne
 8001176:	81a3      	strhne	r3, [r4, #12]
 8001178:	bd10      	pop	{r4, pc}

0800117a <__sclose>:
 800117a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800117e:	f000 b8d3 	b.w	8001328 <_close_r>
	...

08001184 <__swbuf_r>:
 8001184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001186:	460e      	mov	r6, r1
 8001188:	4614      	mov	r4, r2
 800118a:	4605      	mov	r5, r0
 800118c:	b118      	cbz	r0, 8001196 <__swbuf_r+0x12>
 800118e:	6983      	ldr	r3, [r0, #24]
 8001190:	b90b      	cbnz	r3, 8001196 <__swbuf_r+0x12>
 8001192:	f7ff fb81 	bl	8000898 <__sinit>
 8001196:	4b21      	ldr	r3, [pc, #132]	; (800121c <__swbuf_r+0x98>)
 8001198:	429c      	cmp	r4, r3
 800119a:	d12b      	bne.n	80011f4 <__swbuf_r+0x70>
 800119c:	686c      	ldr	r4, [r5, #4]
 800119e:	69a3      	ldr	r3, [r4, #24]
 80011a0:	60a3      	str	r3, [r4, #8]
 80011a2:	89a3      	ldrh	r3, [r4, #12]
 80011a4:	071a      	lsls	r2, r3, #28
 80011a6:	d52f      	bpl.n	8001208 <__swbuf_r+0x84>
 80011a8:	6923      	ldr	r3, [r4, #16]
 80011aa:	b36b      	cbz	r3, 8001208 <__swbuf_r+0x84>
 80011ac:	6923      	ldr	r3, [r4, #16]
 80011ae:	6820      	ldr	r0, [r4, #0]
 80011b0:	1ac0      	subs	r0, r0, r3
 80011b2:	6963      	ldr	r3, [r4, #20]
 80011b4:	b2f6      	uxtb	r6, r6
 80011b6:	4283      	cmp	r3, r0
 80011b8:	4637      	mov	r7, r6
 80011ba:	dc04      	bgt.n	80011c6 <__swbuf_r+0x42>
 80011bc:	4621      	mov	r1, r4
 80011be:	4628      	mov	r0, r5
 80011c0:	f000 f948 	bl	8001454 <_fflush_r>
 80011c4:	bb30      	cbnz	r0, 8001214 <__swbuf_r+0x90>
 80011c6:	68a3      	ldr	r3, [r4, #8]
 80011c8:	3b01      	subs	r3, #1
 80011ca:	60a3      	str	r3, [r4, #8]
 80011cc:	6823      	ldr	r3, [r4, #0]
 80011ce:	1c5a      	adds	r2, r3, #1
 80011d0:	6022      	str	r2, [r4, #0]
 80011d2:	701e      	strb	r6, [r3, #0]
 80011d4:	6963      	ldr	r3, [r4, #20]
 80011d6:	3001      	adds	r0, #1
 80011d8:	4283      	cmp	r3, r0
 80011da:	d004      	beq.n	80011e6 <__swbuf_r+0x62>
 80011dc:	89a3      	ldrh	r3, [r4, #12]
 80011de:	07db      	lsls	r3, r3, #31
 80011e0:	d506      	bpl.n	80011f0 <__swbuf_r+0x6c>
 80011e2:	2e0a      	cmp	r6, #10
 80011e4:	d104      	bne.n	80011f0 <__swbuf_r+0x6c>
 80011e6:	4621      	mov	r1, r4
 80011e8:	4628      	mov	r0, r5
 80011ea:	f000 f933 	bl	8001454 <_fflush_r>
 80011ee:	b988      	cbnz	r0, 8001214 <__swbuf_r+0x90>
 80011f0:	4638      	mov	r0, r7
 80011f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80011f4:	4b0a      	ldr	r3, [pc, #40]	; (8001220 <__swbuf_r+0x9c>)
 80011f6:	429c      	cmp	r4, r3
 80011f8:	d101      	bne.n	80011fe <__swbuf_r+0x7a>
 80011fa:	68ac      	ldr	r4, [r5, #8]
 80011fc:	e7cf      	b.n	800119e <__swbuf_r+0x1a>
 80011fe:	4b09      	ldr	r3, [pc, #36]	; (8001224 <__swbuf_r+0xa0>)
 8001200:	429c      	cmp	r4, r3
 8001202:	bf08      	it	eq
 8001204:	68ec      	ldreq	r4, [r5, #12]
 8001206:	e7ca      	b.n	800119e <__swbuf_r+0x1a>
 8001208:	4621      	mov	r1, r4
 800120a:	4628      	mov	r0, r5
 800120c:	f000 f81e 	bl	800124c <__swsetup_r>
 8001210:	2800      	cmp	r0, #0
 8001212:	d0cb      	beq.n	80011ac <__swbuf_r+0x28>
 8001214:	f04f 37ff 	mov.w	r7, #4294967295
 8001218:	e7ea      	b.n	80011f0 <__swbuf_r+0x6c>
 800121a:	bf00      	nop
 800121c:	08001730 	.word	0x08001730
 8001220:	08001750 	.word	0x08001750
 8001224:	08001710 	.word	0x08001710

08001228 <_write_r>:
 8001228:	b538      	push	{r3, r4, r5, lr}
 800122a:	4d07      	ldr	r5, [pc, #28]	; (8001248 <_write_r+0x20>)
 800122c:	4604      	mov	r4, r0
 800122e:	4608      	mov	r0, r1
 8001230:	4611      	mov	r1, r2
 8001232:	2200      	movs	r2, #0
 8001234:	602a      	str	r2, [r5, #0]
 8001236:	461a      	mov	r2, r3
 8001238:	f7ff f8c7 	bl	80003ca <_write>
 800123c:	1c43      	adds	r3, r0, #1
 800123e:	d102      	bne.n	8001246 <_write_r+0x1e>
 8001240:	682b      	ldr	r3, [r5, #0]
 8001242:	b103      	cbz	r3, 8001246 <_write_r+0x1e>
 8001244:	6023      	str	r3, [r4, #0]
 8001246:	bd38      	pop	{r3, r4, r5, pc}
 8001248:	20000090 	.word	0x20000090

0800124c <__swsetup_r>:
 800124c:	4b32      	ldr	r3, [pc, #200]	; (8001318 <__swsetup_r+0xcc>)
 800124e:	b570      	push	{r4, r5, r6, lr}
 8001250:	681d      	ldr	r5, [r3, #0]
 8001252:	4606      	mov	r6, r0
 8001254:	460c      	mov	r4, r1
 8001256:	b125      	cbz	r5, 8001262 <__swsetup_r+0x16>
 8001258:	69ab      	ldr	r3, [r5, #24]
 800125a:	b913      	cbnz	r3, 8001262 <__swsetup_r+0x16>
 800125c:	4628      	mov	r0, r5
 800125e:	f7ff fb1b 	bl	8000898 <__sinit>
 8001262:	4b2e      	ldr	r3, [pc, #184]	; (800131c <__swsetup_r+0xd0>)
 8001264:	429c      	cmp	r4, r3
 8001266:	d10f      	bne.n	8001288 <__swsetup_r+0x3c>
 8001268:	686c      	ldr	r4, [r5, #4]
 800126a:	89a3      	ldrh	r3, [r4, #12]
 800126c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001270:	0719      	lsls	r1, r3, #28
 8001272:	d42c      	bmi.n	80012ce <__swsetup_r+0x82>
 8001274:	06dd      	lsls	r5, r3, #27
 8001276:	d411      	bmi.n	800129c <__swsetup_r+0x50>
 8001278:	2309      	movs	r3, #9
 800127a:	6033      	str	r3, [r6, #0]
 800127c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8001280:	81a3      	strh	r3, [r4, #12]
 8001282:	f04f 30ff 	mov.w	r0, #4294967295
 8001286:	e03e      	b.n	8001306 <__swsetup_r+0xba>
 8001288:	4b25      	ldr	r3, [pc, #148]	; (8001320 <__swsetup_r+0xd4>)
 800128a:	429c      	cmp	r4, r3
 800128c:	d101      	bne.n	8001292 <__swsetup_r+0x46>
 800128e:	68ac      	ldr	r4, [r5, #8]
 8001290:	e7eb      	b.n	800126a <__swsetup_r+0x1e>
 8001292:	4b24      	ldr	r3, [pc, #144]	; (8001324 <__swsetup_r+0xd8>)
 8001294:	429c      	cmp	r4, r3
 8001296:	bf08      	it	eq
 8001298:	68ec      	ldreq	r4, [r5, #12]
 800129a:	e7e6      	b.n	800126a <__swsetup_r+0x1e>
 800129c:	0758      	lsls	r0, r3, #29
 800129e:	d512      	bpl.n	80012c6 <__swsetup_r+0x7a>
 80012a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80012a2:	b141      	cbz	r1, 80012b6 <__swsetup_r+0x6a>
 80012a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80012a8:	4299      	cmp	r1, r3
 80012aa:	d002      	beq.n	80012b2 <__swsetup_r+0x66>
 80012ac:	4630      	mov	r0, r6
 80012ae:	f000 f991 	bl	80015d4 <_free_r>
 80012b2:	2300      	movs	r3, #0
 80012b4:	6363      	str	r3, [r4, #52]	; 0x34
 80012b6:	89a3      	ldrh	r3, [r4, #12]
 80012b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80012bc:	81a3      	strh	r3, [r4, #12]
 80012be:	2300      	movs	r3, #0
 80012c0:	6063      	str	r3, [r4, #4]
 80012c2:	6923      	ldr	r3, [r4, #16]
 80012c4:	6023      	str	r3, [r4, #0]
 80012c6:	89a3      	ldrh	r3, [r4, #12]
 80012c8:	f043 0308 	orr.w	r3, r3, #8
 80012cc:	81a3      	strh	r3, [r4, #12]
 80012ce:	6923      	ldr	r3, [r4, #16]
 80012d0:	b94b      	cbnz	r3, 80012e6 <__swsetup_r+0x9a>
 80012d2:	89a3      	ldrh	r3, [r4, #12]
 80012d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80012d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012dc:	d003      	beq.n	80012e6 <__swsetup_r+0x9a>
 80012de:	4621      	mov	r1, r4
 80012e0:	4630      	mov	r0, r6
 80012e2:	f000 f92b 	bl	800153c <__smakebuf_r>
 80012e6:	89a0      	ldrh	r0, [r4, #12]
 80012e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80012ec:	f010 0301 	ands.w	r3, r0, #1
 80012f0:	d00a      	beq.n	8001308 <__swsetup_r+0xbc>
 80012f2:	2300      	movs	r3, #0
 80012f4:	60a3      	str	r3, [r4, #8]
 80012f6:	6963      	ldr	r3, [r4, #20]
 80012f8:	425b      	negs	r3, r3
 80012fa:	61a3      	str	r3, [r4, #24]
 80012fc:	6923      	ldr	r3, [r4, #16]
 80012fe:	b943      	cbnz	r3, 8001312 <__swsetup_r+0xc6>
 8001300:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8001304:	d1ba      	bne.n	800127c <__swsetup_r+0x30>
 8001306:	bd70      	pop	{r4, r5, r6, pc}
 8001308:	0781      	lsls	r1, r0, #30
 800130a:	bf58      	it	pl
 800130c:	6963      	ldrpl	r3, [r4, #20]
 800130e:	60a3      	str	r3, [r4, #8]
 8001310:	e7f4      	b.n	80012fc <__swsetup_r+0xb0>
 8001312:	2000      	movs	r0, #0
 8001314:	e7f7      	b.n	8001306 <__swsetup_r+0xba>
 8001316:	bf00      	nop
 8001318:	20000000 	.word	0x20000000
 800131c:	08001730 	.word	0x08001730
 8001320:	08001750 	.word	0x08001750
 8001324:	08001710 	.word	0x08001710

08001328 <_close_r>:
 8001328:	b538      	push	{r3, r4, r5, lr}
 800132a:	4d06      	ldr	r5, [pc, #24]	; (8001344 <_close_r+0x1c>)
 800132c:	2300      	movs	r3, #0
 800132e:	4604      	mov	r4, r0
 8001330:	4608      	mov	r0, r1
 8001332:	602b      	str	r3, [r5, #0]
 8001334:	f7ff f865 	bl	8000402 <_close>
 8001338:	1c43      	adds	r3, r0, #1
 800133a:	d102      	bne.n	8001342 <_close_r+0x1a>
 800133c:	682b      	ldr	r3, [r5, #0]
 800133e:	b103      	cbz	r3, 8001342 <_close_r+0x1a>
 8001340:	6023      	str	r3, [r4, #0]
 8001342:	bd38      	pop	{r3, r4, r5, pc}
 8001344:	20000090 	.word	0x20000090

08001348 <__sflush_r>:
 8001348:	898a      	ldrh	r2, [r1, #12]
 800134a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800134e:	4605      	mov	r5, r0
 8001350:	0710      	lsls	r0, r2, #28
 8001352:	460c      	mov	r4, r1
 8001354:	d458      	bmi.n	8001408 <__sflush_r+0xc0>
 8001356:	684b      	ldr	r3, [r1, #4]
 8001358:	2b00      	cmp	r3, #0
 800135a:	dc05      	bgt.n	8001368 <__sflush_r+0x20>
 800135c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800135e:	2b00      	cmp	r3, #0
 8001360:	dc02      	bgt.n	8001368 <__sflush_r+0x20>
 8001362:	2000      	movs	r0, #0
 8001364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001368:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800136a:	2e00      	cmp	r6, #0
 800136c:	d0f9      	beq.n	8001362 <__sflush_r+0x1a>
 800136e:	2300      	movs	r3, #0
 8001370:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8001374:	682f      	ldr	r7, [r5, #0]
 8001376:	602b      	str	r3, [r5, #0]
 8001378:	d032      	beq.n	80013e0 <__sflush_r+0x98>
 800137a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800137c:	89a3      	ldrh	r3, [r4, #12]
 800137e:	075a      	lsls	r2, r3, #29
 8001380:	d505      	bpl.n	800138e <__sflush_r+0x46>
 8001382:	6863      	ldr	r3, [r4, #4]
 8001384:	1ac0      	subs	r0, r0, r3
 8001386:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8001388:	b10b      	cbz	r3, 800138e <__sflush_r+0x46>
 800138a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800138c:	1ac0      	subs	r0, r0, r3
 800138e:	2300      	movs	r3, #0
 8001390:	4602      	mov	r2, r0
 8001392:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8001394:	6a21      	ldr	r1, [r4, #32]
 8001396:	4628      	mov	r0, r5
 8001398:	47b0      	blx	r6
 800139a:	1c43      	adds	r3, r0, #1
 800139c:	89a3      	ldrh	r3, [r4, #12]
 800139e:	d106      	bne.n	80013ae <__sflush_r+0x66>
 80013a0:	6829      	ldr	r1, [r5, #0]
 80013a2:	291d      	cmp	r1, #29
 80013a4:	d82c      	bhi.n	8001400 <__sflush_r+0xb8>
 80013a6:	4a2a      	ldr	r2, [pc, #168]	; (8001450 <__sflush_r+0x108>)
 80013a8:	40ca      	lsrs	r2, r1
 80013aa:	07d6      	lsls	r6, r2, #31
 80013ac:	d528      	bpl.n	8001400 <__sflush_r+0xb8>
 80013ae:	2200      	movs	r2, #0
 80013b0:	6062      	str	r2, [r4, #4]
 80013b2:	04d9      	lsls	r1, r3, #19
 80013b4:	6922      	ldr	r2, [r4, #16]
 80013b6:	6022      	str	r2, [r4, #0]
 80013b8:	d504      	bpl.n	80013c4 <__sflush_r+0x7c>
 80013ba:	1c42      	adds	r2, r0, #1
 80013bc:	d101      	bne.n	80013c2 <__sflush_r+0x7a>
 80013be:	682b      	ldr	r3, [r5, #0]
 80013c0:	b903      	cbnz	r3, 80013c4 <__sflush_r+0x7c>
 80013c2:	6560      	str	r0, [r4, #84]	; 0x54
 80013c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80013c6:	602f      	str	r7, [r5, #0]
 80013c8:	2900      	cmp	r1, #0
 80013ca:	d0ca      	beq.n	8001362 <__sflush_r+0x1a>
 80013cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80013d0:	4299      	cmp	r1, r3
 80013d2:	d002      	beq.n	80013da <__sflush_r+0x92>
 80013d4:	4628      	mov	r0, r5
 80013d6:	f000 f8fd 	bl	80015d4 <_free_r>
 80013da:	2000      	movs	r0, #0
 80013dc:	6360      	str	r0, [r4, #52]	; 0x34
 80013de:	e7c1      	b.n	8001364 <__sflush_r+0x1c>
 80013e0:	6a21      	ldr	r1, [r4, #32]
 80013e2:	2301      	movs	r3, #1
 80013e4:	4628      	mov	r0, r5
 80013e6:	47b0      	blx	r6
 80013e8:	1c41      	adds	r1, r0, #1
 80013ea:	d1c7      	bne.n	800137c <__sflush_r+0x34>
 80013ec:	682b      	ldr	r3, [r5, #0]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d0c4      	beq.n	800137c <__sflush_r+0x34>
 80013f2:	2b1d      	cmp	r3, #29
 80013f4:	d001      	beq.n	80013fa <__sflush_r+0xb2>
 80013f6:	2b16      	cmp	r3, #22
 80013f8:	d101      	bne.n	80013fe <__sflush_r+0xb6>
 80013fa:	602f      	str	r7, [r5, #0]
 80013fc:	e7b1      	b.n	8001362 <__sflush_r+0x1a>
 80013fe:	89a3      	ldrh	r3, [r4, #12]
 8001400:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001404:	81a3      	strh	r3, [r4, #12]
 8001406:	e7ad      	b.n	8001364 <__sflush_r+0x1c>
 8001408:	690f      	ldr	r7, [r1, #16]
 800140a:	2f00      	cmp	r7, #0
 800140c:	d0a9      	beq.n	8001362 <__sflush_r+0x1a>
 800140e:	0793      	lsls	r3, r2, #30
 8001410:	680e      	ldr	r6, [r1, #0]
 8001412:	bf08      	it	eq
 8001414:	694b      	ldreq	r3, [r1, #20]
 8001416:	600f      	str	r7, [r1, #0]
 8001418:	bf18      	it	ne
 800141a:	2300      	movne	r3, #0
 800141c:	eba6 0807 	sub.w	r8, r6, r7
 8001420:	608b      	str	r3, [r1, #8]
 8001422:	f1b8 0f00 	cmp.w	r8, #0
 8001426:	dd9c      	ble.n	8001362 <__sflush_r+0x1a>
 8001428:	6a21      	ldr	r1, [r4, #32]
 800142a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800142c:	4643      	mov	r3, r8
 800142e:	463a      	mov	r2, r7
 8001430:	4628      	mov	r0, r5
 8001432:	47b0      	blx	r6
 8001434:	2800      	cmp	r0, #0
 8001436:	dc06      	bgt.n	8001446 <__sflush_r+0xfe>
 8001438:	89a3      	ldrh	r3, [r4, #12]
 800143a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800143e:	81a3      	strh	r3, [r4, #12]
 8001440:	f04f 30ff 	mov.w	r0, #4294967295
 8001444:	e78e      	b.n	8001364 <__sflush_r+0x1c>
 8001446:	4407      	add	r7, r0
 8001448:	eba8 0800 	sub.w	r8, r8, r0
 800144c:	e7e9      	b.n	8001422 <__sflush_r+0xda>
 800144e:	bf00      	nop
 8001450:	20400001 	.word	0x20400001

08001454 <_fflush_r>:
 8001454:	b538      	push	{r3, r4, r5, lr}
 8001456:	690b      	ldr	r3, [r1, #16]
 8001458:	4605      	mov	r5, r0
 800145a:	460c      	mov	r4, r1
 800145c:	b913      	cbnz	r3, 8001464 <_fflush_r+0x10>
 800145e:	2500      	movs	r5, #0
 8001460:	4628      	mov	r0, r5
 8001462:	bd38      	pop	{r3, r4, r5, pc}
 8001464:	b118      	cbz	r0, 800146e <_fflush_r+0x1a>
 8001466:	6983      	ldr	r3, [r0, #24]
 8001468:	b90b      	cbnz	r3, 800146e <_fflush_r+0x1a>
 800146a:	f7ff fa15 	bl	8000898 <__sinit>
 800146e:	4b14      	ldr	r3, [pc, #80]	; (80014c0 <_fflush_r+0x6c>)
 8001470:	429c      	cmp	r4, r3
 8001472:	d11b      	bne.n	80014ac <_fflush_r+0x58>
 8001474:	686c      	ldr	r4, [r5, #4]
 8001476:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d0ef      	beq.n	800145e <_fflush_r+0xa>
 800147e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8001480:	07d0      	lsls	r0, r2, #31
 8001482:	d404      	bmi.n	800148e <_fflush_r+0x3a>
 8001484:	0599      	lsls	r1, r3, #22
 8001486:	d402      	bmi.n	800148e <_fflush_r+0x3a>
 8001488:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800148a:	f7ff faa3 	bl	80009d4 <__retarget_lock_acquire_recursive>
 800148e:	4628      	mov	r0, r5
 8001490:	4621      	mov	r1, r4
 8001492:	f7ff ff59 	bl	8001348 <__sflush_r>
 8001496:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8001498:	07da      	lsls	r2, r3, #31
 800149a:	4605      	mov	r5, r0
 800149c:	d4e0      	bmi.n	8001460 <_fflush_r+0xc>
 800149e:	89a3      	ldrh	r3, [r4, #12]
 80014a0:	059b      	lsls	r3, r3, #22
 80014a2:	d4dd      	bmi.n	8001460 <_fflush_r+0xc>
 80014a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80014a6:	f7ff fa96 	bl	80009d6 <__retarget_lock_release_recursive>
 80014aa:	e7d9      	b.n	8001460 <_fflush_r+0xc>
 80014ac:	4b05      	ldr	r3, [pc, #20]	; (80014c4 <_fflush_r+0x70>)
 80014ae:	429c      	cmp	r4, r3
 80014b0:	d101      	bne.n	80014b6 <_fflush_r+0x62>
 80014b2:	68ac      	ldr	r4, [r5, #8]
 80014b4:	e7df      	b.n	8001476 <_fflush_r+0x22>
 80014b6:	4b04      	ldr	r3, [pc, #16]	; (80014c8 <_fflush_r+0x74>)
 80014b8:	429c      	cmp	r4, r3
 80014ba:	bf08      	it	eq
 80014bc:	68ec      	ldreq	r4, [r5, #12]
 80014be:	e7da      	b.n	8001476 <_fflush_r+0x22>
 80014c0:	08001730 	.word	0x08001730
 80014c4:	08001750 	.word	0x08001750
 80014c8:	08001710 	.word	0x08001710

080014cc <_lseek_r>:
 80014cc:	b538      	push	{r3, r4, r5, lr}
 80014ce:	4d07      	ldr	r5, [pc, #28]	; (80014ec <_lseek_r+0x20>)
 80014d0:	4604      	mov	r4, r0
 80014d2:	4608      	mov	r0, r1
 80014d4:	4611      	mov	r1, r2
 80014d6:	2200      	movs	r2, #0
 80014d8:	602a      	str	r2, [r5, #0]
 80014da:	461a      	mov	r2, r3
 80014dc:	f7fe ffb8 	bl	8000450 <_lseek>
 80014e0:	1c43      	adds	r3, r0, #1
 80014e2:	d102      	bne.n	80014ea <_lseek_r+0x1e>
 80014e4:	682b      	ldr	r3, [r5, #0]
 80014e6:	b103      	cbz	r3, 80014ea <_lseek_r+0x1e>
 80014e8:	6023      	str	r3, [r4, #0]
 80014ea:	bd38      	pop	{r3, r4, r5, pc}
 80014ec:	20000090 	.word	0x20000090

080014f0 <__swhatbuf_r>:
 80014f0:	b570      	push	{r4, r5, r6, lr}
 80014f2:	460e      	mov	r6, r1
 80014f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80014f8:	2900      	cmp	r1, #0
 80014fa:	b096      	sub	sp, #88	; 0x58
 80014fc:	4614      	mov	r4, r2
 80014fe:	461d      	mov	r5, r3
 8001500:	da08      	bge.n	8001514 <__swhatbuf_r+0x24>
 8001502:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8001506:	2200      	movs	r2, #0
 8001508:	602a      	str	r2, [r5, #0]
 800150a:	061a      	lsls	r2, r3, #24
 800150c:	d410      	bmi.n	8001530 <__swhatbuf_r+0x40>
 800150e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001512:	e00e      	b.n	8001532 <__swhatbuf_r+0x42>
 8001514:	466a      	mov	r2, sp
 8001516:	f000 f8bb 	bl	8001690 <_fstat_r>
 800151a:	2800      	cmp	r0, #0
 800151c:	dbf1      	blt.n	8001502 <__swhatbuf_r+0x12>
 800151e:	9a01      	ldr	r2, [sp, #4]
 8001520:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8001524:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001528:	425a      	negs	r2, r3
 800152a:	415a      	adcs	r2, r3
 800152c:	602a      	str	r2, [r5, #0]
 800152e:	e7ee      	b.n	800150e <__swhatbuf_r+0x1e>
 8001530:	2340      	movs	r3, #64	; 0x40
 8001532:	2000      	movs	r0, #0
 8001534:	6023      	str	r3, [r4, #0]
 8001536:	b016      	add	sp, #88	; 0x58
 8001538:	bd70      	pop	{r4, r5, r6, pc}
	...

0800153c <__smakebuf_r>:
 800153c:	898b      	ldrh	r3, [r1, #12]
 800153e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001540:	079d      	lsls	r5, r3, #30
 8001542:	4606      	mov	r6, r0
 8001544:	460c      	mov	r4, r1
 8001546:	d507      	bpl.n	8001558 <__smakebuf_r+0x1c>
 8001548:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800154c:	6023      	str	r3, [r4, #0]
 800154e:	6123      	str	r3, [r4, #16]
 8001550:	2301      	movs	r3, #1
 8001552:	6163      	str	r3, [r4, #20]
 8001554:	b002      	add	sp, #8
 8001556:	bd70      	pop	{r4, r5, r6, pc}
 8001558:	ab01      	add	r3, sp, #4
 800155a:	466a      	mov	r2, sp
 800155c:	f7ff ffc8 	bl	80014f0 <__swhatbuf_r>
 8001560:	9900      	ldr	r1, [sp, #0]
 8001562:	4605      	mov	r5, r0
 8001564:	4630      	mov	r0, r6
 8001566:	f7ff fa57 	bl	8000a18 <_malloc_r>
 800156a:	b948      	cbnz	r0, 8001580 <__smakebuf_r+0x44>
 800156c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8001570:	059a      	lsls	r2, r3, #22
 8001572:	d4ef      	bmi.n	8001554 <__smakebuf_r+0x18>
 8001574:	f023 0303 	bic.w	r3, r3, #3
 8001578:	f043 0302 	orr.w	r3, r3, #2
 800157c:	81a3      	strh	r3, [r4, #12]
 800157e:	e7e3      	b.n	8001548 <__smakebuf_r+0xc>
 8001580:	4b0d      	ldr	r3, [pc, #52]	; (80015b8 <__smakebuf_r+0x7c>)
 8001582:	62b3      	str	r3, [r6, #40]	; 0x28
 8001584:	89a3      	ldrh	r3, [r4, #12]
 8001586:	6020      	str	r0, [r4, #0]
 8001588:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800158c:	81a3      	strh	r3, [r4, #12]
 800158e:	9b00      	ldr	r3, [sp, #0]
 8001590:	6163      	str	r3, [r4, #20]
 8001592:	9b01      	ldr	r3, [sp, #4]
 8001594:	6120      	str	r0, [r4, #16]
 8001596:	b15b      	cbz	r3, 80015b0 <__smakebuf_r+0x74>
 8001598:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800159c:	4630      	mov	r0, r6
 800159e:	f000 f889 	bl	80016b4 <_isatty_r>
 80015a2:	b128      	cbz	r0, 80015b0 <__smakebuf_r+0x74>
 80015a4:	89a3      	ldrh	r3, [r4, #12]
 80015a6:	f023 0303 	bic.w	r3, r3, #3
 80015aa:	f043 0301 	orr.w	r3, r3, #1
 80015ae:	81a3      	strh	r3, [r4, #12]
 80015b0:	89a0      	ldrh	r0, [r4, #12]
 80015b2:	4305      	orrs	r5, r0
 80015b4:	81a5      	strh	r5, [r4, #12]
 80015b6:	e7cd      	b.n	8001554 <__smakebuf_r+0x18>
 80015b8:	08000831 	.word	0x08000831

080015bc <__malloc_lock>:
 80015bc:	4801      	ldr	r0, [pc, #4]	; (80015c4 <__malloc_lock+0x8>)
 80015be:	f7ff ba09 	b.w	80009d4 <__retarget_lock_acquire_recursive>
 80015c2:	bf00      	nop
 80015c4:	20000084 	.word	0x20000084

080015c8 <__malloc_unlock>:
 80015c8:	4801      	ldr	r0, [pc, #4]	; (80015d0 <__malloc_unlock+0x8>)
 80015ca:	f7ff ba04 	b.w	80009d6 <__retarget_lock_release_recursive>
 80015ce:	bf00      	nop
 80015d0:	20000084 	.word	0x20000084

080015d4 <_free_r>:
 80015d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80015d6:	2900      	cmp	r1, #0
 80015d8:	d044      	beq.n	8001664 <_free_r+0x90>
 80015da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80015de:	9001      	str	r0, [sp, #4]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	f1a1 0404 	sub.w	r4, r1, #4
 80015e6:	bfb8      	it	lt
 80015e8:	18e4      	addlt	r4, r4, r3
 80015ea:	f7ff ffe7 	bl	80015bc <__malloc_lock>
 80015ee:	4a1e      	ldr	r2, [pc, #120]	; (8001668 <_free_r+0x94>)
 80015f0:	9801      	ldr	r0, [sp, #4]
 80015f2:	6813      	ldr	r3, [r2, #0]
 80015f4:	b933      	cbnz	r3, 8001604 <_free_r+0x30>
 80015f6:	6063      	str	r3, [r4, #4]
 80015f8:	6014      	str	r4, [r2, #0]
 80015fa:	b003      	add	sp, #12
 80015fc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001600:	f7ff bfe2 	b.w	80015c8 <__malloc_unlock>
 8001604:	42a3      	cmp	r3, r4
 8001606:	d908      	bls.n	800161a <_free_r+0x46>
 8001608:	6825      	ldr	r5, [r4, #0]
 800160a:	1961      	adds	r1, r4, r5
 800160c:	428b      	cmp	r3, r1
 800160e:	bf01      	itttt	eq
 8001610:	6819      	ldreq	r1, [r3, #0]
 8001612:	685b      	ldreq	r3, [r3, #4]
 8001614:	1949      	addeq	r1, r1, r5
 8001616:	6021      	streq	r1, [r4, #0]
 8001618:	e7ed      	b.n	80015f6 <_free_r+0x22>
 800161a:	461a      	mov	r2, r3
 800161c:	685b      	ldr	r3, [r3, #4]
 800161e:	b10b      	cbz	r3, 8001624 <_free_r+0x50>
 8001620:	42a3      	cmp	r3, r4
 8001622:	d9fa      	bls.n	800161a <_free_r+0x46>
 8001624:	6811      	ldr	r1, [r2, #0]
 8001626:	1855      	adds	r5, r2, r1
 8001628:	42a5      	cmp	r5, r4
 800162a:	d10b      	bne.n	8001644 <_free_r+0x70>
 800162c:	6824      	ldr	r4, [r4, #0]
 800162e:	4421      	add	r1, r4
 8001630:	1854      	adds	r4, r2, r1
 8001632:	42a3      	cmp	r3, r4
 8001634:	6011      	str	r1, [r2, #0]
 8001636:	d1e0      	bne.n	80015fa <_free_r+0x26>
 8001638:	681c      	ldr	r4, [r3, #0]
 800163a:	685b      	ldr	r3, [r3, #4]
 800163c:	6053      	str	r3, [r2, #4]
 800163e:	4421      	add	r1, r4
 8001640:	6011      	str	r1, [r2, #0]
 8001642:	e7da      	b.n	80015fa <_free_r+0x26>
 8001644:	d902      	bls.n	800164c <_free_r+0x78>
 8001646:	230c      	movs	r3, #12
 8001648:	6003      	str	r3, [r0, #0]
 800164a:	e7d6      	b.n	80015fa <_free_r+0x26>
 800164c:	6825      	ldr	r5, [r4, #0]
 800164e:	1961      	adds	r1, r4, r5
 8001650:	428b      	cmp	r3, r1
 8001652:	bf04      	itt	eq
 8001654:	6819      	ldreq	r1, [r3, #0]
 8001656:	685b      	ldreq	r3, [r3, #4]
 8001658:	6063      	str	r3, [r4, #4]
 800165a:	bf04      	itt	eq
 800165c:	1949      	addeq	r1, r1, r5
 800165e:	6021      	streq	r1, [r4, #0]
 8001660:	6054      	str	r4, [r2, #4]
 8001662:	e7ca      	b.n	80015fa <_free_r+0x26>
 8001664:	b003      	add	sp, #12
 8001666:	bd30      	pop	{r4, r5, pc}
 8001668:	20000088 	.word	0x20000088

0800166c <_read_r>:
 800166c:	b538      	push	{r3, r4, r5, lr}
 800166e:	4d07      	ldr	r5, [pc, #28]	; (800168c <_read_r+0x20>)
 8001670:	4604      	mov	r4, r0
 8001672:	4608      	mov	r0, r1
 8001674:	4611      	mov	r1, r2
 8001676:	2200      	movs	r2, #0
 8001678:	602a      	str	r2, [r5, #0]
 800167a:	461a      	mov	r2, r3
 800167c:	f7fe fe88 	bl	8000390 <_read>
 8001680:	1c43      	adds	r3, r0, #1
 8001682:	d102      	bne.n	800168a <_read_r+0x1e>
 8001684:	682b      	ldr	r3, [r5, #0]
 8001686:	b103      	cbz	r3, 800168a <_read_r+0x1e>
 8001688:	6023      	str	r3, [r4, #0]
 800168a:	bd38      	pop	{r3, r4, r5, pc}
 800168c:	20000090 	.word	0x20000090

08001690 <_fstat_r>:
 8001690:	b538      	push	{r3, r4, r5, lr}
 8001692:	4d07      	ldr	r5, [pc, #28]	; (80016b0 <_fstat_r+0x20>)
 8001694:	2300      	movs	r3, #0
 8001696:	4604      	mov	r4, r0
 8001698:	4608      	mov	r0, r1
 800169a:	4611      	mov	r1, r2
 800169c:	602b      	str	r3, [r5, #0]
 800169e:	f7fe febc 	bl	800041a <_fstat>
 80016a2:	1c43      	adds	r3, r0, #1
 80016a4:	d102      	bne.n	80016ac <_fstat_r+0x1c>
 80016a6:	682b      	ldr	r3, [r5, #0]
 80016a8:	b103      	cbz	r3, 80016ac <_fstat_r+0x1c>
 80016aa:	6023      	str	r3, [r4, #0]
 80016ac:	bd38      	pop	{r3, r4, r5, pc}
 80016ae:	bf00      	nop
 80016b0:	20000090 	.word	0x20000090

080016b4 <_isatty_r>:
 80016b4:	b538      	push	{r3, r4, r5, lr}
 80016b6:	4d06      	ldr	r5, [pc, #24]	; (80016d0 <_isatty_r+0x1c>)
 80016b8:	2300      	movs	r3, #0
 80016ba:	4604      	mov	r4, r0
 80016bc:	4608      	mov	r0, r1
 80016be:	602b      	str	r3, [r5, #0]
 80016c0:	f7fe febb 	bl	800043a <_isatty>
 80016c4:	1c43      	adds	r3, r0, #1
 80016c6:	d102      	bne.n	80016ce <_isatty_r+0x1a>
 80016c8:	682b      	ldr	r3, [r5, #0]
 80016ca:	b103      	cbz	r3, 80016ce <_isatty_r+0x1a>
 80016cc:	6023      	str	r3, [r4, #0]
 80016ce:	bd38      	pop	{r3, r4, r5, pc}
 80016d0:	20000090 	.word	0x20000090

080016d4 <_init>:
 80016d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016d6:	bf00      	nop
 80016d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016da:	bc08      	pop	{r3}
 80016dc:	469e      	mov	lr, r3
 80016de:	4770      	bx	lr

080016e0 <_fini>:
 80016e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80016e2:	bf00      	nop
 80016e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80016e6:	bc08      	pop	{r3}
 80016e8:	469e      	mov	lr, r3
 80016ea:	4770      	bx	lr
