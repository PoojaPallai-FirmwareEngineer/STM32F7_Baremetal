
6_uart_tx.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000001a8  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000370  08000378  00010378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000370  08000370  00010378  2**0
                  CONTENTS
  4 .ARM          00000000  08000370  08000370  00010378  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000370  08000378  00010378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000370  08000370  00010370  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000374  08000374  00010374  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010378  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000378  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000378  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010378  2**0
                  CONTENTS, READONLY
 12 .debug_info   000003aa  00000000  00000000  000103a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00000113  00000000  00000000  00010752  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000058  00000000  00000000  00010868  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000040  00000000  00000000  000108c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bcbc  00000000  00000000  00010900  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000056f  00000000  00000000  0002c5bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009c45e  00000000  00000000  0002cb2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000c8f89  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000000a0  00000000  00000000  000c8fdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000000 	.word	0x20000000
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08000358 	.word	0x08000358

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000004 	.word	0x20000004
 8000204:	08000358 	.word	0x08000358

08000208 <main>:

void enable_HSI_clock(void);
void delay(void);

int main(void)
{
 8000208:	b580      	push	{r7, lr}
 800020a:	af00      	add	r7, sp, #0
    enable_HSI_clock();                    // Step 1: Enable internal clock
 800020c:	f000 f820 	bl	8000250 <enable_HSI_clock>

    RCC->AHB1ENR |= GPIODEN;              // Step 2: Enable GPIOD clock
 8000210:	4b0d      	ldr	r3, [pc, #52]	; (8000248 <main+0x40>)
 8000212:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000214:	4a0c      	ldr	r2, [pc, #48]	; (8000248 <main+0x40>)
 8000216:	f043 0308 	orr.w	r3, r3, #8
 800021a:	6313      	str	r3, [r2, #48]	; 0x30

    GPIOD->MODER &= ~(0x3 << (12 * 2));   // Step 3: Clear MODER bits for PD12
 800021c:	4b0b      	ldr	r3, [pc, #44]	; (800024c <main+0x44>)
 800021e:	681b      	ldr	r3, [r3, #0]
 8000220:	4a0a      	ldr	r2, [pc, #40]	; (800024c <main+0x44>)
 8000222:	f023 7340 	bic.w	r3, r3, #50331648	; 0x3000000
 8000226:	6013      	str	r3, [r2, #0]
    GPIOD->MODER |=  (0x1 << (12 * 2));   // Step 4: Set PD12 as General Purpose Output
 8000228:	4b08      	ldr	r3, [pc, #32]	; (800024c <main+0x44>)
 800022a:	681b      	ldr	r3, [r3, #0]
 800022c:	4a07      	ldr	r2, [pc, #28]	; (800024c <main+0x44>)
 800022e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000232:	6013      	str	r3, [r2, #0]

    while (1)
    {
        GPIOD->ODR ^= LED_PIN;            // Step 5: Toggle LED
 8000234:	4b05      	ldr	r3, [pc, #20]	; (800024c <main+0x44>)
 8000236:	695b      	ldr	r3, [r3, #20]
 8000238:	4a04      	ldr	r2, [pc, #16]	; (800024c <main+0x44>)
 800023a:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 800023e:	6153      	str	r3, [r2, #20]
        delay();
 8000240:	f000 f826 	bl	8000290 <delay>
        GPIOD->ODR ^= LED_PIN;            // Step 5: Toggle LED
 8000244:	e7f6      	b.n	8000234 <main+0x2c>
 8000246:	bf00      	nop
 8000248:	40023800 	.word	0x40023800
 800024c:	40020c00 	.word	0x40020c00

08000250 <enable_HSI_clock>:
    }
}

void enable_HSI_clock(void)
{
 8000250:	b480      	push	{r7}
 8000252:	af00      	add	r7, sp, #0
    RCC->CR |= RCC_CR_HSION;              // Enable HSI
 8000254:	4b0d      	ldr	r3, [pc, #52]	; (800028c <enable_HSI_clock+0x3c>)
 8000256:	681b      	ldr	r3, [r3, #0]
 8000258:	4a0c      	ldr	r2, [pc, #48]	; (800028c <enable_HSI_clock+0x3c>)
 800025a:	f043 0301 	orr.w	r3, r3, #1
 800025e:	6013      	str	r3, [r2, #0]
    while (!(RCC->CR & RCC_CR_HSIRDY));   // Wait for HSI to be ready
 8000260:	bf00      	nop
 8000262:	4b0a      	ldr	r3, [pc, #40]	; (800028c <enable_HSI_clock+0x3c>)
 8000264:	681b      	ldr	r3, [r3, #0]
 8000266:	f003 0302 	and.w	r3, r3, #2
 800026a:	2b00      	cmp	r3, #0
 800026c:	d0f9      	beq.n	8000262 <enable_HSI_clock+0x12>

    RCC->CFGR &= ~RCC_CFGR_SW;            // Clear clock switch bits
 800026e:	4b07      	ldr	r3, [pc, #28]	; (800028c <enable_HSI_clock+0x3c>)
 8000270:	689b      	ldr	r3, [r3, #8]
 8000272:	4a06      	ldr	r2, [pc, #24]	; (800028c <enable_HSI_clock+0x3c>)
 8000274:	f023 0303 	bic.w	r3, r3, #3
 8000278:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_HSI;         // Switch to HSI
 800027a:	4b04      	ldr	r3, [pc, #16]	; (800028c <enable_HSI_clock+0x3c>)
 800027c:	4a03      	ldr	r2, [pc, #12]	; (800028c <enable_HSI_clock+0x3c>)
 800027e:	689b      	ldr	r3, [r3, #8]
 8000280:	6093      	str	r3, [r2, #8]
}
 8000282:	bf00      	nop
 8000284:	46bd      	mov	sp, r7
 8000286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800028a:	4770      	bx	lr
 800028c:	40023800 	.word	0x40023800

08000290 <delay>:

void delay(void)
{
 8000290:	b480      	push	{r7}
 8000292:	b083      	sub	sp, #12
 8000294:	af00      	add	r7, sp, #0
    for (volatile int i = 0; i < 1000000; i++);
 8000296:	2300      	movs	r3, #0
 8000298:	607b      	str	r3, [r7, #4]
 800029a:	e002      	b.n	80002a2 <delay+0x12>
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	3301      	adds	r3, #1
 80002a0:	607b      	str	r3, [r7, #4]
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	4a04      	ldr	r2, [pc, #16]	; (80002b8 <delay+0x28>)
 80002a6:	4293      	cmp	r3, r2
 80002a8:	ddf8      	ble.n	800029c <delay+0xc>
}
 80002aa:	bf00      	nop
 80002ac:	bf00      	nop
 80002ae:	370c      	adds	r7, #12
 80002b0:	46bd      	mov	sp, r7
 80002b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002b6:	4770      	bx	lr
 80002b8:	000f423f 	.word	0x000f423f

080002bc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80002bc:	480d      	ldr	r0, [pc, #52]	; (80002f4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80002be:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 80002c0:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80002c4:	480c      	ldr	r0, [pc, #48]	; (80002f8 <LoopForever+0x6>)
  ldr r1, =_edata
 80002c6:	490d      	ldr	r1, [pc, #52]	; (80002fc <LoopForever+0xa>)
  ldr r2, =_sidata
 80002c8:	4a0d      	ldr	r2, [pc, #52]	; (8000300 <LoopForever+0xe>)
  movs r3, #0
 80002ca:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80002cc:	e002      	b.n	80002d4 <LoopCopyDataInit>

080002ce <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80002ce:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80002d0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80002d2:	3304      	adds	r3, #4

080002d4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80002d4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80002d6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80002d8:	d3f9      	bcc.n	80002ce <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80002da:	4a0a      	ldr	r2, [pc, #40]	; (8000304 <LoopForever+0x12>)
  ldr r4, =_ebss
 80002dc:	4c0a      	ldr	r4, [pc, #40]	; (8000308 <LoopForever+0x16>)
  movs r3, #0
 80002de:	2300      	movs	r3, #0
  b LoopFillZerobss
 80002e0:	e001      	b.n	80002e6 <LoopFillZerobss>

080002e2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80002e2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80002e4:	3204      	adds	r2, #4

080002e6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80002e6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80002e8:	d3fb      	bcc.n	80002e2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80002ea:	f000 f811 	bl	8000310 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80002ee:	f7ff ff8b 	bl	8000208 <main>

080002f2 <LoopForever>:

LoopForever:
    b LoopForever
 80002f2:	e7fe      	b.n	80002f2 <LoopForever>
  ldr   r0, =_estack
 80002f4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80002f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80002fc:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000300:	08000378 	.word	0x08000378
  ldr r2, =_sbss
 8000304:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000308:	2000001c 	.word	0x2000001c

0800030c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800030c:	e7fe      	b.n	800030c <ADC_IRQHandler>
	...

08000310 <__libc_init_array>:
 8000310:	b570      	push	{r4, r5, r6, lr}
 8000312:	4d0d      	ldr	r5, [pc, #52]	; (8000348 <__libc_init_array+0x38>)
 8000314:	4c0d      	ldr	r4, [pc, #52]	; (800034c <__libc_init_array+0x3c>)
 8000316:	1b64      	subs	r4, r4, r5
 8000318:	10a4      	asrs	r4, r4, #2
 800031a:	2600      	movs	r6, #0
 800031c:	42a6      	cmp	r6, r4
 800031e:	d109      	bne.n	8000334 <__libc_init_array+0x24>
 8000320:	4d0b      	ldr	r5, [pc, #44]	; (8000350 <__libc_init_array+0x40>)
 8000322:	4c0c      	ldr	r4, [pc, #48]	; (8000354 <__libc_init_array+0x44>)
 8000324:	f000 f818 	bl	8000358 <_init>
 8000328:	1b64      	subs	r4, r4, r5
 800032a:	10a4      	asrs	r4, r4, #2
 800032c:	2600      	movs	r6, #0
 800032e:	42a6      	cmp	r6, r4
 8000330:	d105      	bne.n	800033e <__libc_init_array+0x2e>
 8000332:	bd70      	pop	{r4, r5, r6, pc}
 8000334:	f855 3b04 	ldr.w	r3, [r5], #4
 8000338:	4798      	blx	r3
 800033a:	3601      	adds	r6, #1
 800033c:	e7ee      	b.n	800031c <__libc_init_array+0xc>
 800033e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000342:	4798      	blx	r3
 8000344:	3601      	adds	r6, #1
 8000346:	e7f2      	b.n	800032e <__libc_init_array+0x1e>
 8000348:	08000370 	.word	0x08000370
 800034c:	08000370 	.word	0x08000370
 8000350:	08000370 	.word	0x08000370
 8000354:	08000374 	.word	0x08000374

08000358 <_init>:
 8000358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800035a:	bf00      	nop
 800035c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800035e:	bc08      	pop	{r3}
 8000360:	469e      	mov	lr, r3
 8000362:	4770      	bx	lr

08000364 <_fini>:
 8000364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000366:	bf00      	nop
 8000368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800036a:	bc08      	pop	{r3}
 800036c:	469e      	mov	lr, r3
 800036e:	4770      	bx	lr
