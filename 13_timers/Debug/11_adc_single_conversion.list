
11_adc_single_conversion.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001554  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ac  08001724  08001724  00011724  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080017d0  080017d0  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  080017d0  080017d0  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  080017d0  080017d0  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080017d0  080017d0  000117d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080017d4  080017d4  000117d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  080017d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000034  20000064  0800183c  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  0800183c  00020098  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000174e  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000007e1  00000000  00000000  000217e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000200  00000000  00000000  00021fc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000188  00000000  00000000  000221c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001dda3  00000000  00000000  00022350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000281f  00000000  00000000  000400f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a203d  00000000  00000000  00042912  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e494f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000e0c  00000000  00000000  000e49a0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000064 	.word	0x20000064
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800170c 	.word	0x0800170c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000068 	.word	0x20000068
 800020c:	0800170c 	.word	0x0800170c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <pa4_adc1_init>:
#define     CR2_ADON 					(1U << 0)
#define 	CR2_SWSTART					(1U << 30)
#define 	SR_EOC						(1U << 1)

void pa4_adc1_init(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
	/******Configure the ADC GPIO pin**********/

	// Enable clock access to GPIOA
	RCC->AHB1ENR |= GPIOAEN;
 80002b4:	4b18      	ldr	r3, [pc, #96]	; (8000318 <pa4_adc1_init+0x68>)
 80002b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b8:	4a17      	ldr	r2, [pc, #92]	; (8000318 <pa4_adc1_init+0x68>)
 80002ba:	f043 0301 	orr.w	r3, r3, #1
 80002be:	6313      	str	r3, [r2, #48]	; 0x30

	// Set PA4 mode to analog mode
	GPIOA->MODER|= (1U << 8);
 80002c0:	4b16      	ldr	r3, [pc, #88]	; (800031c <pa4_adc1_init+0x6c>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a15      	ldr	r2, [pc, #84]	; (800031c <pa4_adc1_init+0x6c>)
 80002c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002ca:	6013      	str	r3, [r2, #0]
	GPIOA->MODER|= (1U << 9);
 80002cc:	4b13      	ldr	r3, [pc, #76]	; (800031c <pa4_adc1_init+0x6c>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	4a12      	ldr	r2, [pc, #72]	; (800031c <pa4_adc1_init+0x6c>)
 80002d2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80002d6:	6013      	str	r3, [r2, #0]

	/******Configure the ADC module**********/

	// Enable clock access to ADC module
	RCC->APB2ENR |= ADC1EN;
 80002d8:	4b0f      	ldr	r3, [pc, #60]	; (8000318 <pa4_adc1_init+0x68>)
 80002da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80002dc:	4a0e      	ldr	r2, [pc, #56]	; (8000318 <pa4_adc1_init+0x68>)
 80002de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002e2:	6453      	str	r3, [r2, #68]	; 0x44

	// Set conversion to single
	ADC1->CR2 &= ~CR2_CONT;
 80002e4:	4b0e      	ldr	r3, [pc, #56]	; (8000320 <pa4_adc1_init+0x70>)
 80002e6:	689b      	ldr	r3, [r3, #8]
 80002e8:	4a0d      	ldr	r2, [pc, #52]	; (8000320 <pa4_adc1_init+0x70>)
 80002ea:	f023 0302 	bic.w	r3, r3, #2
 80002ee:	6093      	str	r3, [r2, #8]

	// Set Sequence length
	ADC1->SQR1 = SEQ_LEN_1;
 80002f0:	4b0b      	ldr	r3, [pc, #44]	; (8000320 <pa4_adc1_init+0x70>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	62da      	str	r2, [r3, #44]	; 0x2c

	// Set ADC channel
	ADC1->SQR3 |= CH4_RANK1;
 80002f6:	4b0a      	ldr	r3, [pc, #40]	; (8000320 <pa4_adc1_init+0x70>)
 80002f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80002fa:	4a09      	ldr	r2, [pc, #36]	; (8000320 <pa4_adc1_init+0x70>)
 80002fc:	f043 0304 	orr.w	r3, r3, #4
 8000300:	6353      	str	r3, [r2, #52]	; 0x34

	// Enable ADC module
	ADC1->CR2 |= CR2_ADON;
 8000302:	4b07      	ldr	r3, [pc, #28]	; (8000320 <pa4_adc1_init+0x70>)
 8000304:	689b      	ldr	r3, [r3, #8]
 8000306:	4a06      	ldr	r2, [pc, #24]	; (8000320 <pa4_adc1_init+0x70>)
 8000308:	f043 0301 	orr.w	r3, r3, #1
 800030c:	6093      	str	r3, [r2, #8]

}
 800030e:	bf00      	nop
 8000310:	46bd      	mov	sp, r7
 8000312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000316:	4770      	bx	lr
 8000318:	40023800 	.word	0x40023800
 800031c:	40020000 	.word	0x40020000
 8000320:	40012000 	.word	0x40012000

08000324 <start_conversion>:

void start_conversion(void)
{
 8000324:	b480      	push	{r7}
 8000326:	af00      	add	r7, sp, #0
	// Start conversion
	ADC1->CR2 |= CR2_SWSTART;
 8000328:	4b05      	ldr	r3, [pc, #20]	; (8000340 <start_conversion+0x1c>)
 800032a:	689b      	ldr	r3, [r3, #8]
 800032c:	4a04      	ldr	r2, [pc, #16]	; (8000340 <start_conversion+0x1c>)
 800032e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000332:	6093      	str	r3, [r2, #8]
}
 8000334:	bf00      	nop
 8000336:	46bd      	mov	sp, r7
 8000338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800033c:	4770      	bx	lr
 800033e:	bf00      	nop
 8000340:	40012000 	.word	0x40012000

08000344 <adc_get_data>:

uint32_t adc_get_data(void)
{
 8000344:	b480      	push	{r7}
 8000346:	af00      	add	r7, sp, #0
	// Wait for end of conversion flag
	while(!(ADC1->SR & SR_EOC)){}
 8000348:	bf00      	nop
 800034a:	4b06      	ldr	r3, [pc, #24]	; (8000364 <adc_get_data+0x20>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	f003 0302 	and.w	r3, r3, #2
 8000352:	2b00      	cmp	r3, #0
 8000354:	d0f9      	beq.n	800034a <adc_get_data+0x6>

	// Read results
	return (ADC1->DR);
 8000356:	4b03      	ldr	r3, [pc, #12]	; (8000364 <adc_get_data+0x20>)
 8000358:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800035a:	4618      	mov	r0, r3
 800035c:	46bd      	mov	sp, r7
 800035e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000362:	4770      	bx	lr
 8000364:	40012000 	.word	0x40012000

08000368 <set_pin_mode>:
#include "stm32f7xx.h"

#include "gpio.h"

void set_pin_mode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000368:	b480      	push	{r7}
 800036a:	b089      	sub	sp, #36	; 0x24
 800036c:	af00      	add	r7, sp, #0
 800036e:	60f8      	str	r0, [r7, #12]
 8000370:	60b9      	str	r1, [r7, #8]
 8000372:	607a      	str	r2, [r7, #4]
	 *
	 * Mode = 0b 10 = 0x2
	 * 2 << 16 ==>  bit16 =0, bit 17 =1
	 * */

	MODIFY_REG(GPIOx->MODER, (0x3 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000374:	68fb      	ldr	r3, [r7, #12]
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	68ba      	ldr	r2, [r7, #8]
 800037a:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800037c:	697a      	ldr	r2, [r7, #20]
 800037e:	fa92 f2a2 	rbit	r2, r2
 8000382:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000384:	693a      	ldr	r2, [r7, #16]
 8000386:	fab2 f282 	clz	r2, r2
 800038a:	b2d2      	uxtb	r2, r2
 800038c:	0052      	lsls	r2, r2, #1
 800038e:	2103      	movs	r1, #3
 8000390:	fa01 f202 	lsl.w	r2, r1, r2
 8000394:	43d2      	mvns	r2, r2
 8000396:	401a      	ands	r2, r3
 8000398:	68bb      	ldr	r3, [r7, #8]
 800039a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800039c:	69fb      	ldr	r3, [r7, #28]
 800039e:	fa93 f3a3 	rbit	r3, r3
 80003a2:	61bb      	str	r3, [r7, #24]
  return result;
 80003a4:	69bb      	ldr	r3, [r7, #24]
 80003a6:	fab3 f383 	clz	r3, r3
 80003aa:	b2db      	uxtb	r3, r3
 80003ac:	005b      	lsls	r3, r3, #1
 80003ae:	6879      	ldr	r1, [r7, #4]
 80003b0:	fa01 f303 	lsl.w	r3, r1, r3
 80003b4:	431a      	orrs	r2, r3
 80003b6:	68fb      	ldr	r3, [r7, #12]
 80003b8:	601a      	str	r2, [r3, #0]
}
 80003ba:	bf00      	nop
 80003bc:	3724      	adds	r7, #36	; 0x24
 80003be:	46bd      	mov	sp, r7
 80003c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003c4:	4770      	bx	lr
	...

080003c8 <main>:
#include "adc.h"

int sensor_value;

int main(void)
{
 80003c8:	b580      	push	{r7, lr}
 80003ca:	af00      	add	r7, sp, #0
	uart3_tx_init();
 80003cc:	f000 f8f0 	bl	80005b0 <uart3_tx_init>
	pa4_adc1_init();
 80003d0:	f7ff ff6e 	bl	80002b0 <pa4_adc1_init>

	while(1)
	{
		start_conversion();
 80003d4:	f7ff ffa6 	bl	8000324 <start_conversion>
		sensor_value = adc_get_data();
 80003d8:	f7ff ffb4 	bl	8000344 <adc_get_data>
 80003dc:	4603      	mov	r3, r0
 80003de:	461a      	mov	r2, r3
 80003e0:	4b04      	ldr	r3, [pc, #16]	; (80003f4 <main+0x2c>)
 80003e2:	601a      	str	r2, [r3, #0]
		printf("Sensor value: %d \n\r", sensor_value);
 80003e4:	4b03      	ldr	r3, [pc, #12]	; (80003f4 <main+0x2c>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	4619      	mov	r1, r3
 80003ea:	4803      	ldr	r0, [pc, #12]	; (80003f8 <main+0x30>)
 80003ec:	f000 fa00 	bl	80007f0 <iprintf>
		start_conversion();
 80003f0:	e7f0      	b.n	80003d4 <main+0xc>
 80003f2:	bf00      	nop
 80003f4:	20000080 	.word	0x20000080
 80003f8:	08001724 	.word	0x08001724

080003fc <set_ahb1_periph_clock>:
#include "stm32f7xx.h"
#include "rcc.h"

// Set the AHB1
void set_ahb1_periph_clock(uint32_t perihs)
{
 80003fc:	b480      	push	{r7}
 80003fe:	b083      	sub	sp, #12
 8000400:	af00      	add	r7, sp, #0
 8000402:	6078      	str	r0, [r7, #4]
	SET_BIT(RCC->AHB1ENR,perihs);
 8000404:	4b05      	ldr	r3, [pc, #20]	; (800041c <set_ahb1_periph_clock+0x20>)
 8000406:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000408:	4904      	ldr	r1, [pc, #16]	; (800041c <set_ahb1_periph_clock+0x20>)
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	4313      	orrs	r3, r2
 800040e:	630b      	str	r3, [r1, #48]	; 0x30
}
 8000410:	bf00      	nop
 8000412:	370c      	adds	r7, #12
 8000414:	46bd      	mov	sp, r7
 8000416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800041a:	4770      	bx	lr
 800041c:	40023800 	.word	0x40023800

08000420 <set_apb1_periph_clock>:
	SET_BIT(RCC->AHB2ENR,perihs);
}

// Set the APB1
void set_apb1_periph_clock(uint32_t perihs)
{
 8000420:	b480      	push	{r7}
 8000422:	b083      	sub	sp, #12
 8000424:	af00      	add	r7, sp, #0
 8000426:	6078      	str	r0, [r7, #4]
	SET_BIT(RCC->APB1ENR,perihs);
 8000428:	4b05      	ldr	r3, [pc, #20]	; (8000440 <set_apb1_periph_clock+0x20>)
 800042a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800042c:	4904      	ldr	r1, [pc, #16]	; (8000440 <set_apb1_periph_clock+0x20>)
 800042e:	687b      	ldr	r3, [r7, #4]
 8000430:	4313      	orrs	r3, r2
 8000432:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000434:	bf00      	nop
 8000436:	370c      	adds	r7, #12
 8000438:	46bd      	mov	sp, r7
 800043a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800043e:	4770      	bx	lr
 8000440:	40023800 	.word	0x40023800

08000444 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000444:	b580      	push	{r7, lr}
 8000446:	b086      	sub	sp, #24
 8000448:	af00      	add	r7, sp, #0
 800044a:	60f8      	str	r0, [r7, #12]
 800044c:	60b9      	str	r1, [r7, #8]
 800044e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000450:	2300      	movs	r3, #0
 8000452:	617b      	str	r3, [r7, #20]
 8000454:	e00a      	b.n	800046c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000456:	f3af 8000 	nop.w
 800045a:	4601      	mov	r1, r0
 800045c:	68bb      	ldr	r3, [r7, #8]
 800045e:	1c5a      	adds	r2, r3, #1
 8000460:	60ba      	str	r2, [r7, #8]
 8000462:	b2ca      	uxtb	r2, r1
 8000464:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000466:	697b      	ldr	r3, [r7, #20]
 8000468:	3301      	adds	r3, #1
 800046a:	617b      	str	r3, [r7, #20]
 800046c:	697a      	ldr	r2, [r7, #20]
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	429a      	cmp	r2, r3
 8000472:	dbf0      	blt.n	8000456 <_read+0x12>
	}

return len;
 8000474:	687b      	ldr	r3, [r7, #4]
}
 8000476:	4618      	mov	r0, r3
 8000478:	3718      	adds	r7, #24
 800047a:	46bd      	mov	sp, r7
 800047c:	bd80      	pop	{r7, pc}

0800047e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800047e:	b580      	push	{r7, lr}
 8000480:	b086      	sub	sp, #24
 8000482:	af00      	add	r7, sp, #0
 8000484:	60f8      	str	r0, [r7, #12]
 8000486:	60b9      	str	r1, [r7, #8]
 8000488:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800048a:	2300      	movs	r3, #0
 800048c:	617b      	str	r3, [r7, #20]
 800048e:	e009      	b.n	80004a4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000490:	68bb      	ldr	r3, [r7, #8]
 8000492:	1c5a      	adds	r2, r3, #1
 8000494:	60ba      	str	r2, [r7, #8]
 8000496:	781b      	ldrb	r3, [r3, #0]
 8000498:	4618      	mov	r0, r3
 800049a:	f000 f877 	bl	800058c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800049e:	697b      	ldr	r3, [r7, #20]
 80004a0:	3301      	adds	r3, #1
 80004a2:	617b      	str	r3, [r7, #20]
 80004a4:	697a      	ldr	r2, [r7, #20]
 80004a6:	687b      	ldr	r3, [r7, #4]
 80004a8:	429a      	cmp	r2, r3
 80004aa:	dbf1      	blt.n	8000490 <_write+0x12>
	}
	return len;
 80004ac:	687b      	ldr	r3, [r7, #4]
}
 80004ae:	4618      	mov	r0, r3
 80004b0:	3718      	adds	r7, #24
 80004b2:	46bd      	mov	sp, r7
 80004b4:	bd80      	pop	{r7, pc}

080004b6 <_close>:

int _close(int file)
{
 80004b6:	b480      	push	{r7}
 80004b8:	b083      	sub	sp, #12
 80004ba:	af00      	add	r7, sp, #0
 80004bc:	6078      	str	r0, [r7, #4]
	return -1;
 80004be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80004c2:	4618      	mov	r0, r3
 80004c4:	370c      	adds	r7, #12
 80004c6:	46bd      	mov	sp, r7
 80004c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004cc:	4770      	bx	lr

080004ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80004ce:	b480      	push	{r7}
 80004d0:	b083      	sub	sp, #12
 80004d2:	af00      	add	r7, sp, #0
 80004d4:	6078      	str	r0, [r7, #4]
 80004d6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80004d8:	683b      	ldr	r3, [r7, #0]
 80004da:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80004de:	605a      	str	r2, [r3, #4]
	return 0;
 80004e0:	2300      	movs	r3, #0
}
 80004e2:	4618      	mov	r0, r3
 80004e4:	370c      	adds	r7, #12
 80004e6:	46bd      	mov	sp, r7
 80004e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004ec:	4770      	bx	lr

080004ee <_isatty>:

int _isatty(int file)
{
 80004ee:	b480      	push	{r7}
 80004f0:	b083      	sub	sp, #12
 80004f2:	af00      	add	r7, sp, #0
 80004f4:	6078      	str	r0, [r7, #4]
	return 1;
 80004f6:	2301      	movs	r3, #1
}
 80004f8:	4618      	mov	r0, r3
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr

08000504 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000504:	b480      	push	{r7}
 8000506:	b085      	sub	sp, #20
 8000508:	af00      	add	r7, sp, #0
 800050a:	60f8      	str	r0, [r7, #12]
 800050c:	60b9      	str	r1, [r7, #8]
 800050e:	607a      	str	r2, [r7, #4]
	return 0;
 8000510:	2300      	movs	r3, #0
}
 8000512:	4618      	mov	r0, r3
 8000514:	3714      	adds	r7, #20
 8000516:	46bd      	mov	sp, r7
 8000518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051c:	4770      	bx	lr
	...

08000520 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000520:	b580      	push	{r7, lr}
 8000522:	b086      	sub	sp, #24
 8000524:	af00      	add	r7, sp, #0
 8000526:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000528:	4a14      	ldr	r2, [pc, #80]	; (800057c <_sbrk+0x5c>)
 800052a:	4b15      	ldr	r3, [pc, #84]	; (8000580 <_sbrk+0x60>)
 800052c:	1ad3      	subs	r3, r2, r3
 800052e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000530:	697b      	ldr	r3, [r7, #20]
 8000532:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000534:	4b13      	ldr	r3, [pc, #76]	; (8000584 <_sbrk+0x64>)
 8000536:	681b      	ldr	r3, [r3, #0]
 8000538:	2b00      	cmp	r3, #0
 800053a:	d102      	bne.n	8000542 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800053c:	4b11      	ldr	r3, [pc, #68]	; (8000584 <_sbrk+0x64>)
 800053e:	4a12      	ldr	r2, [pc, #72]	; (8000588 <_sbrk+0x68>)
 8000540:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000542:	4b10      	ldr	r3, [pc, #64]	; (8000584 <_sbrk+0x64>)
 8000544:	681a      	ldr	r2, [r3, #0]
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	4413      	add	r3, r2
 800054a:	693a      	ldr	r2, [r7, #16]
 800054c:	429a      	cmp	r2, r3
 800054e:	d207      	bcs.n	8000560 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000550:	f000 f91c 	bl	800078c <__errno>
 8000554:	4603      	mov	r3, r0
 8000556:	220c      	movs	r2, #12
 8000558:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800055a:	f04f 33ff 	mov.w	r3, #4294967295
 800055e:	e009      	b.n	8000574 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000560:	4b08      	ldr	r3, [pc, #32]	; (8000584 <_sbrk+0x64>)
 8000562:	681b      	ldr	r3, [r3, #0]
 8000564:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000566:	4b07      	ldr	r3, [pc, #28]	; (8000584 <_sbrk+0x64>)
 8000568:	681a      	ldr	r2, [r3, #0]
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4413      	add	r3, r2
 800056e:	4a05      	ldr	r2, [pc, #20]	; (8000584 <_sbrk+0x64>)
 8000570:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000572:	68fb      	ldr	r3, [r7, #12]
}
 8000574:	4618      	mov	r0, r3
 8000576:	3718      	adds	r7, #24
 8000578:	46bd      	mov	sp, r7
 800057a:	bd80      	pop	{r7, pc}
 800057c:	20050000 	.word	0x20050000
 8000580:	00000400 	.word	0x00000400
 8000584:	20000084 	.word	0x20000084
 8000588:	20000098 	.word	0x20000098

0800058c <__io_putchar>:
static void uart_enable(USART_TypeDef *USARTx);
static void uart_write(USART_TypeDef *USARTx , uint8_t value);
static void set_uart_tranfer_direction(USART_TypeDef *USARTx,uint32_t TransferDirection);

int __io_putchar(int ch)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
	uart_write(USART3, ch);
 8000594:	687b      	ldr	r3, [r7, #4]
 8000596:	b2db      	uxtb	r3, r3
 8000598:	4619      	mov	r1, r3
 800059a:	4804      	ldr	r0, [pc, #16]	; (80005ac <__io_putchar+0x20>)
 800059c:	f000 f84a 	bl	8000634 <uart_write>
	return ch;
 80005a0:	687b      	ldr	r3, [r7, #4]
}
 80005a2:	4618      	mov	r0, r3
 80005a4:	3708      	adds	r7, #8
 80005a6:	46bd      	mov	sp, r7
 80005a8:	bd80      	pop	{r7, pc}
 80005aa:	bf00      	nop
 80005ac:	40004800 	.word	0x40004800

080005b0 <uart3_tx_init>:

void uart3_tx_init(void)
{
 80005b0:	b580      	push	{r7, lr}
 80005b2:	af00      	add	r7, sp, #0
	/*1. Enable clock access to GPIOD*/
	 set_ahb1_periph_clock(GPIODEN);
 80005b4:	2008      	movs	r0, #8
 80005b6:	f7ff ff21 	bl	80003fc <set_ahb1_periph_clock>

	/*2. Set PD8 to mode to alternate function*/
	 set_pin_mode(GPIOD,  UART3_TX,  GPIO_ALTERNATE_MODE);
 80005ba:	2202      	movs	r2, #2
 80005bc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005c0:	4819      	ldr	r0, [pc, #100]	; (8000628 <uart3_tx_init+0x78>)
 80005c2:	f7ff fed1 	bl	8000368 <set_pin_mode>

	/*3. Set alternate function to USART i.e. AF7 - 0111*/
	 GPIOD->AFR[1] |= (1U<<0);
 80005c6:	4b18      	ldr	r3, [pc, #96]	; (8000628 <uart3_tx_init+0x78>)
 80005c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005ca:	4a17      	ldr	r2, [pc, #92]	; (8000628 <uart3_tx_init+0x78>)
 80005cc:	f043 0301 	orr.w	r3, r3, #1
 80005d0:	6253      	str	r3, [r2, #36]	; 0x24
	 GPIOD->AFR[1] |= (1U<<1);
 80005d2:	4b15      	ldr	r3, [pc, #84]	; (8000628 <uart3_tx_init+0x78>)
 80005d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005d6:	4a14      	ldr	r2, [pc, #80]	; (8000628 <uart3_tx_init+0x78>)
 80005d8:	f043 0302 	orr.w	r3, r3, #2
 80005dc:	6253      	str	r3, [r2, #36]	; 0x24
	 GPIOD->AFR[1] |= (1U<<2);
 80005de:	4b12      	ldr	r3, [pc, #72]	; (8000628 <uart3_tx_init+0x78>)
 80005e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005e2:	4a11      	ldr	r2, [pc, #68]	; (8000628 <uart3_tx_init+0x78>)
 80005e4:	f043 0304 	orr.w	r3, r3, #4
 80005e8:	6253      	str	r3, [r2, #36]	; 0x24
	 GPIOD->AFR[1] &= ~(1U<<3);
 80005ea:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <uart3_tx_init+0x78>)
 80005ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80005ee:	4a0e      	ldr	r2, [pc, #56]	; (8000628 <uart3_tx_init+0x78>)
 80005f0:	f023 0308 	bic.w	r3, r3, #8
 80005f4:	6253      	str	r3, [r2, #36]	; 0x24

	/*Enable clock to the USART3 module*/
	 set_apb1_periph_clock(USART3EN);
 80005f6:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80005fa:	f7ff ff11 	bl	8000420 <set_apb1_periph_clock>

	/*Confiugure USART parameters*/
	 config_uart_parameters(USART3,  UART_DATAWIDTH_8B, UART_PARITY_NONE,  UART_STOPBITS_1);
 80005fe:	2300      	movs	r3, #0
 8000600:	2200      	movs	r2, #0
 8000602:	2100      	movs	r1, #0
 8000604:	4809      	ldr	r0, [pc, #36]	; (800062c <uart3_tx_init+0x7c>)
 8000606:	f000 f861 	bl	80006cc <config_uart_parameters>
	 set_uart_tranfer_direction(USART3 ,USART_CR1_TE);
 800060a:	2108      	movs	r1, #8
 800060c:	4807      	ldr	r0, [pc, #28]	; (800062c <uart3_tx_init+0x7c>)
 800060e:	f000 f837 	bl	8000680 <set_uart_tranfer_direction>

	/*Set baudrate*/
	 uart_set_baudrate(USART3, 16000000, 115200);
 8000612:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000616:	4906      	ldr	r1, [pc, #24]	; (8000630 <uart3_tx_init+0x80>)
 8000618:	4804      	ldr	r0, [pc, #16]	; (800062c <uart3_tx_init+0x7c>)
 800061a:	f000 f844 	bl	80006a6 <uart_set_baudrate>

	/*Enable USART*/
	uart_enable(USART3);
 800061e:	4803      	ldr	r0, [pc, #12]	; (800062c <uart3_tx_init+0x7c>)
 8000620:	f000 f81e 	bl	8000660 <uart_enable>
}
 8000624:	bf00      	nop
 8000626:	bd80      	pop	{r7, pc}
 8000628:	40020c00 	.word	0x40020c00
 800062c:	40004800 	.word	0x40004800
 8000630:	00f42400 	.word	0x00f42400

08000634 <uart_write>:
	while(!(USARTx->ISR & USART_ISR_RXNE)){}
	return READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU;
}

void uart_write(USART_TypeDef *USARTx , uint8_t value)
{
 8000634:	b480      	push	{r7}
 8000636:	b083      	sub	sp, #12
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
 800063c:	460b      	mov	r3, r1
 800063e:	70fb      	strb	r3, [r7, #3]
	/*Make sure transmit data register is empty*/
//	while(!((USARTx->ISR & USART_ISR_TXE)== USART_ISR_TXE)){}
	while(!(USARTx->ISR & USART_ISR_TXE)){}
 8000640:	bf00      	nop
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	69db      	ldr	r3, [r3, #28]
 8000646:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800064a:	2b00      	cmp	r3, #0
 800064c:	d0f9      	beq.n	8000642 <uart_write+0xe>

	/*Write value into transmit data register*/
	USARTx->TDR = value;
 800064e:	78fa      	ldrb	r2, [r7, #3]
 8000650:	687b      	ldr	r3, [r7, #4]
 8000652:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000654:	bf00      	nop
 8000656:	370c      	adds	r7, #12
 8000658:	46bd      	mov	sp, r7
 800065a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065e:	4770      	bx	lr

08000660 <uart_enable>:

// Enable the usart
static void uart_enable(USART_TypeDef *USARTx)
{
 8000660:	b480      	push	{r7}
 8000662:	b083      	sub	sp, #12
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	SET_BIT(USARTx->CR1,USART_CR1_UE);
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	f043 0201 	orr.w	r2, r3, #1
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	601a      	str	r2, [r3, #0]
}
 8000674:	bf00      	nop
 8000676:	370c      	adds	r7, #12
 8000678:	46bd      	mov	sp, r7
 800067a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067e:	4770      	bx	lr

08000680 <set_uart_tranfer_direction>:

static void set_uart_tranfer_direction(USART_TypeDef *USARTx,uint32_t TransferDirection)
{
 8000680:	b480      	push	{r7}
 8000682:	b083      	sub	sp, #12
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]
 8000688:	6039      	str	r1, [r7, #0]
	MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	f023 020c 	bic.w	r2, r3, #12
 8000692:	683b      	ldr	r3, [r7, #0]
 8000694:	431a      	orrs	r2, r3
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	601a      	str	r2, [r3, #0]
}
 800069a:	bf00      	nop
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr

080006a6 <uart_set_baudrate>:

// set the baudrate
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 80006a6:	b580      	push	{r7, lr}
 80006a8:	b084      	sub	sp, #16
 80006aa:	af00      	add	r7, sp, #0
 80006ac:	60f8      	str	r0, [r7, #12]
 80006ae:	60b9      	str	r1, [r7, #8]
 80006b0:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_div( PeriphClk,  BaudRate);
 80006b2:	6879      	ldr	r1, [r7, #4]
 80006b4:	68b8      	ldr	r0, [r7, #8]
 80006b6:	f000 f82b 	bl	8000710 <compute_uart_div>
 80006ba:	4603      	mov	r3, r0
 80006bc:	461a      	mov	r2, r3
 80006be:	68fb      	ldr	r3, [r7, #12]
 80006c0:	60da      	str	r2, [r3, #12]
}
 80006c2:	bf00      	nop
 80006c4:	3710      	adds	r7, #16
 80006c6:	46bd      	mov	sp, r7
 80006c8:	bd80      	pop	{r7, pc}
	...

080006cc <config_uart_parameters>:

static void config_uart_parameters(USART_TypeDef *USARTx, uint32_t DataWidth, uint32_t Parity, uint32_t StopBits)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b085      	sub	sp, #20
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	60f8      	str	r0, [r7, #12]
 80006d4:	60b9      	str	r1, [r7, #8]
 80006d6:	607a      	str	r2, [r7, #4]
 80006d8:	603b      	str	r3, [r7, #0]
	MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 80006da:	68fb      	ldr	r3, [r7, #12]
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	4b0b      	ldr	r3, [pc, #44]	; (800070c <config_uart_parameters+0x40>)
 80006e0:	4013      	ands	r3, r2
 80006e2:	6879      	ldr	r1, [r7, #4]
 80006e4:	68ba      	ldr	r2, [r7, #8]
 80006e6:	430a      	orrs	r2, r1
 80006e8:	431a      	orrs	r2, r3
 80006ea:	68fb      	ldr	r3, [r7, #12]
 80006ec:	601a      	str	r2, [r3, #0]

	MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80006ee:	68fb      	ldr	r3, [r7, #12]
 80006f0:	685b      	ldr	r3, [r3, #4]
 80006f2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80006f6:	683b      	ldr	r3, [r7, #0]
 80006f8:	431a      	orrs	r2, r3
 80006fa:	68fb      	ldr	r3, [r7, #12]
 80006fc:	605a      	str	r2, [r3, #4]
}
 80006fe:	bf00      	nop
 8000700:	3714      	adds	r7, #20
 8000702:	46bd      	mov	sp, r7
 8000704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000708:	4770      	bx	lr
 800070a:	bf00      	nop
 800070c:	efffe9ff 	.word	0xefffe9ff

08000710 <compute_uart_div>:

// configure the baud rate with peripheral clock
static uint16_t compute_uart_div(uint32_t PeriphClk, uint32_t BaudRate)
{
 8000710:	b480      	push	{r7}
 8000712:	b083      	sub	sp, #12
 8000714:	af00      	add	r7, sp, #0
 8000716:	6078      	str	r0, [r7, #4]
 8000718:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 800071a:	683b      	ldr	r3, [r7, #0]
 800071c:	085a      	lsrs	r2, r3, #1
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	441a      	add	r2, r3
 8000722:	683b      	ldr	r3, [r7, #0]
 8000724:	fbb2 f3f3 	udiv	r3, r2, r3
 8000728:	b29b      	uxth	r3, r3
}
 800072a:	4618      	mov	r0, r3
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
	...

08000738 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000738:	480d      	ldr	r0, [pc, #52]	; (8000770 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800073a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800073c:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000740:	480c      	ldr	r0, [pc, #48]	; (8000774 <LoopForever+0x6>)
  ldr r1, =_edata
 8000742:	490d      	ldr	r1, [pc, #52]	; (8000778 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000744:	4a0d      	ldr	r2, [pc, #52]	; (800077c <LoopForever+0xe>)
  movs r3, #0
 8000746:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000748:	e002      	b.n	8000750 <LoopCopyDataInit>

0800074a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800074a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800074c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800074e:	3304      	adds	r3, #4

08000750 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000750:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000752:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000754:	d3f9      	bcc.n	800074a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000756:	4a0a      	ldr	r2, [pc, #40]	; (8000780 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000758:	4c0a      	ldr	r4, [pc, #40]	; (8000784 <LoopForever+0x16>)
  movs r3, #0
 800075a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800075c:	e001      	b.n	8000762 <LoopFillZerobss>

0800075e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800075e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000760:	3204      	adds	r2, #4

08000762 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000762:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000764:	d3fb      	bcc.n	800075e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000766:	f000 f817 	bl	8000798 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800076a:	f7ff fe2d 	bl	80003c8 <main>

0800076e <LoopForever>:

LoopForever:
    b LoopForever
 800076e:	e7fe      	b.n	800076e <LoopForever>
  ldr   r0, =_estack
 8000770:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000774:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000778:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 800077c:	080017d8 	.word	0x080017d8
  ldr r2, =_sbss
 8000780:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8000784:	20000098 	.word	0x20000098

08000788 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000788:	e7fe      	b.n	8000788 <ADC_IRQHandler>
	...

0800078c <__errno>:
 800078c:	4b01      	ldr	r3, [pc, #4]	; (8000794 <__errno+0x8>)
 800078e:	6818      	ldr	r0, [r3, #0]
 8000790:	4770      	bx	lr
 8000792:	bf00      	nop
 8000794:	20000000 	.word	0x20000000

08000798 <__libc_init_array>:
 8000798:	b570      	push	{r4, r5, r6, lr}
 800079a:	4d0d      	ldr	r5, [pc, #52]	; (80007d0 <__libc_init_array+0x38>)
 800079c:	4c0d      	ldr	r4, [pc, #52]	; (80007d4 <__libc_init_array+0x3c>)
 800079e:	1b64      	subs	r4, r4, r5
 80007a0:	10a4      	asrs	r4, r4, #2
 80007a2:	2600      	movs	r6, #0
 80007a4:	42a6      	cmp	r6, r4
 80007a6:	d109      	bne.n	80007bc <__libc_init_array+0x24>
 80007a8:	4d0b      	ldr	r5, [pc, #44]	; (80007d8 <__libc_init_array+0x40>)
 80007aa:	4c0c      	ldr	r4, [pc, #48]	; (80007dc <__libc_init_array+0x44>)
 80007ac:	f000 ffae 	bl	800170c <_init>
 80007b0:	1b64      	subs	r4, r4, r5
 80007b2:	10a4      	asrs	r4, r4, #2
 80007b4:	2600      	movs	r6, #0
 80007b6:	42a6      	cmp	r6, r4
 80007b8:	d105      	bne.n	80007c6 <__libc_init_array+0x2e>
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80007c0:	4798      	blx	r3
 80007c2:	3601      	adds	r6, #1
 80007c4:	e7ee      	b.n	80007a4 <__libc_init_array+0xc>
 80007c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80007ca:	4798      	blx	r3
 80007cc:	3601      	adds	r6, #1
 80007ce:	e7f2      	b.n	80007b6 <__libc_init_array+0x1e>
 80007d0:	080017d0 	.word	0x080017d0
 80007d4:	080017d0 	.word	0x080017d0
 80007d8:	080017d0 	.word	0x080017d0
 80007dc:	080017d4 	.word	0x080017d4

080007e0 <memset>:
 80007e0:	4402      	add	r2, r0
 80007e2:	4603      	mov	r3, r0
 80007e4:	4293      	cmp	r3, r2
 80007e6:	d100      	bne.n	80007ea <memset+0xa>
 80007e8:	4770      	bx	lr
 80007ea:	f803 1b01 	strb.w	r1, [r3], #1
 80007ee:	e7f9      	b.n	80007e4 <memset+0x4>

080007f0 <iprintf>:
 80007f0:	b40f      	push	{r0, r1, r2, r3}
 80007f2:	4b0a      	ldr	r3, [pc, #40]	; (800081c <iprintf+0x2c>)
 80007f4:	b513      	push	{r0, r1, r4, lr}
 80007f6:	681c      	ldr	r4, [r3, #0]
 80007f8:	b124      	cbz	r4, 8000804 <iprintf+0x14>
 80007fa:	69a3      	ldr	r3, [r4, #24]
 80007fc:	b913      	cbnz	r3, 8000804 <iprintf+0x14>
 80007fe:	4620      	mov	r0, r4
 8000800:	f000 f866 	bl	80008d0 <__sinit>
 8000804:	ab05      	add	r3, sp, #20
 8000806:	9a04      	ldr	r2, [sp, #16]
 8000808:	68a1      	ldr	r1, [r4, #8]
 800080a:	9301      	str	r3, [sp, #4]
 800080c:	4620      	mov	r0, r4
 800080e:	f000 f9bd 	bl	8000b8c <_vfiprintf_r>
 8000812:	b002      	add	sp, #8
 8000814:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000818:	b004      	add	sp, #16
 800081a:	4770      	bx	lr
 800081c:	20000000 	.word	0x20000000

08000820 <std>:
 8000820:	2300      	movs	r3, #0
 8000822:	b510      	push	{r4, lr}
 8000824:	4604      	mov	r4, r0
 8000826:	e9c0 3300 	strd	r3, r3, [r0]
 800082a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800082e:	6083      	str	r3, [r0, #8]
 8000830:	8181      	strh	r1, [r0, #12]
 8000832:	6643      	str	r3, [r0, #100]	; 0x64
 8000834:	81c2      	strh	r2, [r0, #14]
 8000836:	6183      	str	r3, [r0, #24]
 8000838:	4619      	mov	r1, r3
 800083a:	2208      	movs	r2, #8
 800083c:	305c      	adds	r0, #92	; 0x5c
 800083e:	f7ff ffcf 	bl	80007e0 <memset>
 8000842:	4b05      	ldr	r3, [pc, #20]	; (8000858 <std+0x38>)
 8000844:	6263      	str	r3, [r4, #36]	; 0x24
 8000846:	4b05      	ldr	r3, [pc, #20]	; (800085c <std+0x3c>)
 8000848:	62a3      	str	r3, [r4, #40]	; 0x28
 800084a:	4b05      	ldr	r3, [pc, #20]	; (8000860 <std+0x40>)
 800084c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800084e:	4b05      	ldr	r3, [pc, #20]	; (8000864 <std+0x44>)
 8000850:	6224      	str	r4, [r4, #32]
 8000852:	6323      	str	r3, [r4, #48]	; 0x30
 8000854:	bd10      	pop	{r4, pc}
 8000856:	bf00      	nop
 8000858:	08001135 	.word	0x08001135
 800085c:	08001157 	.word	0x08001157
 8000860:	0800118f 	.word	0x0800118f
 8000864:	080011b3 	.word	0x080011b3

08000868 <_cleanup_r>:
 8000868:	4901      	ldr	r1, [pc, #4]	; (8000870 <_cleanup_r+0x8>)
 800086a:	f000 b8af 	b.w	80009cc <_fwalk_reent>
 800086e:	bf00      	nop
 8000870:	0800148d 	.word	0x0800148d

08000874 <__sfmoreglue>:
 8000874:	b570      	push	{r4, r5, r6, lr}
 8000876:	2268      	movs	r2, #104	; 0x68
 8000878:	1e4d      	subs	r5, r1, #1
 800087a:	4355      	muls	r5, r2
 800087c:	460e      	mov	r6, r1
 800087e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000882:	f000 f8e5 	bl	8000a50 <_malloc_r>
 8000886:	4604      	mov	r4, r0
 8000888:	b140      	cbz	r0, 800089c <__sfmoreglue+0x28>
 800088a:	2100      	movs	r1, #0
 800088c:	e9c0 1600 	strd	r1, r6, [r0]
 8000890:	300c      	adds	r0, #12
 8000892:	60a0      	str	r0, [r4, #8]
 8000894:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000898:	f7ff ffa2 	bl	80007e0 <memset>
 800089c:	4620      	mov	r0, r4
 800089e:	bd70      	pop	{r4, r5, r6, pc}

080008a0 <__sfp_lock_acquire>:
 80008a0:	4801      	ldr	r0, [pc, #4]	; (80008a8 <__sfp_lock_acquire+0x8>)
 80008a2:	f000 b8b3 	b.w	8000a0c <__retarget_lock_acquire_recursive>
 80008a6:	bf00      	nop
 80008a8:	20000089 	.word	0x20000089

080008ac <__sfp_lock_release>:
 80008ac:	4801      	ldr	r0, [pc, #4]	; (80008b4 <__sfp_lock_release+0x8>)
 80008ae:	f000 b8ae 	b.w	8000a0e <__retarget_lock_release_recursive>
 80008b2:	bf00      	nop
 80008b4:	20000089 	.word	0x20000089

080008b8 <__sinit_lock_acquire>:
 80008b8:	4801      	ldr	r0, [pc, #4]	; (80008c0 <__sinit_lock_acquire+0x8>)
 80008ba:	f000 b8a7 	b.w	8000a0c <__retarget_lock_acquire_recursive>
 80008be:	bf00      	nop
 80008c0:	2000008a 	.word	0x2000008a

080008c4 <__sinit_lock_release>:
 80008c4:	4801      	ldr	r0, [pc, #4]	; (80008cc <__sinit_lock_release+0x8>)
 80008c6:	f000 b8a2 	b.w	8000a0e <__retarget_lock_release_recursive>
 80008ca:	bf00      	nop
 80008cc:	2000008a 	.word	0x2000008a

080008d0 <__sinit>:
 80008d0:	b510      	push	{r4, lr}
 80008d2:	4604      	mov	r4, r0
 80008d4:	f7ff fff0 	bl	80008b8 <__sinit_lock_acquire>
 80008d8:	69a3      	ldr	r3, [r4, #24]
 80008da:	b11b      	cbz	r3, 80008e4 <__sinit+0x14>
 80008dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008e0:	f7ff bff0 	b.w	80008c4 <__sinit_lock_release>
 80008e4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80008e8:	6523      	str	r3, [r4, #80]	; 0x50
 80008ea:	4b13      	ldr	r3, [pc, #76]	; (8000938 <__sinit+0x68>)
 80008ec:	4a13      	ldr	r2, [pc, #76]	; (800093c <__sinit+0x6c>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	62a2      	str	r2, [r4, #40]	; 0x28
 80008f2:	42a3      	cmp	r3, r4
 80008f4:	bf04      	itt	eq
 80008f6:	2301      	moveq	r3, #1
 80008f8:	61a3      	streq	r3, [r4, #24]
 80008fa:	4620      	mov	r0, r4
 80008fc:	f000 f820 	bl	8000940 <__sfp>
 8000900:	6060      	str	r0, [r4, #4]
 8000902:	4620      	mov	r0, r4
 8000904:	f000 f81c 	bl	8000940 <__sfp>
 8000908:	60a0      	str	r0, [r4, #8]
 800090a:	4620      	mov	r0, r4
 800090c:	f000 f818 	bl	8000940 <__sfp>
 8000910:	2200      	movs	r2, #0
 8000912:	60e0      	str	r0, [r4, #12]
 8000914:	2104      	movs	r1, #4
 8000916:	6860      	ldr	r0, [r4, #4]
 8000918:	f7ff ff82 	bl	8000820 <std>
 800091c:	68a0      	ldr	r0, [r4, #8]
 800091e:	2201      	movs	r2, #1
 8000920:	2109      	movs	r1, #9
 8000922:	f7ff ff7d 	bl	8000820 <std>
 8000926:	68e0      	ldr	r0, [r4, #12]
 8000928:	2202      	movs	r2, #2
 800092a:	2112      	movs	r1, #18
 800092c:	f7ff ff78 	bl	8000820 <std>
 8000930:	2301      	movs	r3, #1
 8000932:	61a3      	str	r3, [r4, #24]
 8000934:	e7d2      	b.n	80008dc <__sinit+0xc>
 8000936:	bf00      	nop
 8000938:	08001738 	.word	0x08001738
 800093c:	08000869 	.word	0x08000869

08000940 <__sfp>:
 8000940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000942:	4607      	mov	r7, r0
 8000944:	f7ff ffac 	bl	80008a0 <__sfp_lock_acquire>
 8000948:	4b1e      	ldr	r3, [pc, #120]	; (80009c4 <__sfp+0x84>)
 800094a:	681e      	ldr	r6, [r3, #0]
 800094c:	69b3      	ldr	r3, [r6, #24]
 800094e:	b913      	cbnz	r3, 8000956 <__sfp+0x16>
 8000950:	4630      	mov	r0, r6
 8000952:	f7ff ffbd 	bl	80008d0 <__sinit>
 8000956:	3648      	adds	r6, #72	; 0x48
 8000958:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800095c:	3b01      	subs	r3, #1
 800095e:	d503      	bpl.n	8000968 <__sfp+0x28>
 8000960:	6833      	ldr	r3, [r6, #0]
 8000962:	b30b      	cbz	r3, 80009a8 <__sfp+0x68>
 8000964:	6836      	ldr	r6, [r6, #0]
 8000966:	e7f7      	b.n	8000958 <__sfp+0x18>
 8000968:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800096c:	b9d5      	cbnz	r5, 80009a4 <__sfp+0x64>
 800096e:	4b16      	ldr	r3, [pc, #88]	; (80009c8 <__sfp+0x88>)
 8000970:	60e3      	str	r3, [r4, #12]
 8000972:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000976:	6665      	str	r5, [r4, #100]	; 0x64
 8000978:	f000 f847 	bl	8000a0a <__retarget_lock_init_recursive>
 800097c:	f7ff ff96 	bl	80008ac <__sfp_lock_release>
 8000980:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8000984:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8000988:	6025      	str	r5, [r4, #0]
 800098a:	61a5      	str	r5, [r4, #24]
 800098c:	2208      	movs	r2, #8
 800098e:	4629      	mov	r1, r5
 8000990:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8000994:	f7ff ff24 	bl	80007e0 <memset>
 8000998:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800099c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80009a0:	4620      	mov	r0, r4
 80009a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009a4:	3468      	adds	r4, #104	; 0x68
 80009a6:	e7d9      	b.n	800095c <__sfp+0x1c>
 80009a8:	2104      	movs	r1, #4
 80009aa:	4638      	mov	r0, r7
 80009ac:	f7ff ff62 	bl	8000874 <__sfmoreglue>
 80009b0:	4604      	mov	r4, r0
 80009b2:	6030      	str	r0, [r6, #0]
 80009b4:	2800      	cmp	r0, #0
 80009b6:	d1d5      	bne.n	8000964 <__sfp+0x24>
 80009b8:	f7ff ff78 	bl	80008ac <__sfp_lock_release>
 80009bc:	230c      	movs	r3, #12
 80009be:	603b      	str	r3, [r7, #0]
 80009c0:	e7ee      	b.n	80009a0 <__sfp+0x60>
 80009c2:	bf00      	nop
 80009c4:	08001738 	.word	0x08001738
 80009c8:	ffff0001 	.word	0xffff0001

080009cc <_fwalk_reent>:
 80009cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80009d0:	4606      	mov	r6, r0
 80009d2:	4688      	mov	r8, r1
 80009d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80009d8:	2700      	movs	r7, #0
 80009da:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80009de:	f1b9 0901 	subs.w	r9, r9, #1
 80009e2:	d505      	bpl.n	80009f0 <_fwalk_reent+0x24>
 80009e4:	6824      	ldr	r4, [r4, #0]
 80009e6:	2c00      	cmp	r4, #0
 80009e8:	d1f7      	bne.n	80009da <_fwalk_reent+0xe>
 80009ea:	4638      	mov	r0, r7
 80009ec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80009f0:	89ab      	ldrh	r3, [r5, #12]
 80009f2:	2b01      	cmp	r3, #1
 80009f4:	d907      	bls.n	8000a06 <_fwalk_reent+0x3a>
 80009f6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80009fa:	3301      	adds	r3, #1
 80009fc:	d003      	beq.n	8000a06 <_fwalk_reent+0x3a>
 80009fe:	4629      	mov	r1, r5
 8000a00:	4630      	mov	r0, r6
 8000a02:	47c0      	blx	r8
 8000a04:	4307      	orrs	r7, r0
 8000a06:	3568      	adds	r5, #104	; 0x68
 8000a08:	e7e9      	b.n	80009de <_fwalk_reent+0x12>

08000a0a <__retarget_lock_init_recursive>:
 8000a0a:	4770      	bx	lr

08000a0c <__retarget_lock_acquire_recursive>:
 8000a0c:	4770      	bx	lr

08000a0e <__retarget_lock_release_recursive>:
 8000a0e:	4770      	bx	lr

08000a10 <sbrk_aligned>:
 8000a10:	b570      	push	{r4, r5, r6, lr}
 8000a12:	4e0e      	ldr	r6, [pc, #56]	; (8000a4c <sbrk_aligned+0x3c>)
 8000a14:	460c      	mov	r4, r1
 8000a16:	6831      	ldr	r1, [r6, #0]
 8000a18:	4605      	mov	r5, r0
 8000a1a:	b911      	cbnz	r1, 8000a22 <sbrk_aligned+0x12>
 8000a1c:	f000 fb7a 	bl	8001114 <_sbrk_r>
 8000a20:	6030      	str	r0, [r6, #0]
 8000a22:	4621      	mov	r1, r4
 8000a24:	4628      	mov	r0, r5
 8000a26:	f000 fb75 	bl	8001114 <_sbrk_r>
 8000a2a:	1c43      	adds	r3, r0, #1
 8000a2c:	d00a      	beq.n	8000a44 <sbrk_aligned+0x34>
 8000a2e:	1cc4      	adds	r4, r0, #3
 8000a30:	f024 0403 	bic.w	r4, r4, #3
 8000a34:	42a0      	cmp	r0, r4
 8000a36:	d007      	beq.n	8000a48 <sbrk_aligned+0x38>
 8000a38:	1a21      	subs	r1, r4, r0
 8000a3a:	4628      	mov	r0, r5
 8000a3c:	f000 fb6a 	bl	8001114 <_sbrk_r>
 8000a40:	3001      	adds	r0, #1
 8000a42:	d101      	bne.n	8000a48 <sbrk_aligned+0x38>
 8000a44:	f04f 34ff 	mov.w	r4, #4294967295
 8000a48:	4620      	mov	r0, r4
 8000a4a:	bd70      	pop	{r4, r5, r6, pc}
 8000a4c:	20000090 	.word	0x20000090

08000a50 <_malloc_r>:
 8000a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a54:	1ccd      	adds	r5, r1, #3
 8000a56:	f025 0503 	bic.w	r5, r5, #3
 8000a5a:	3508      	adds	r5, #8
 8000a5c:	2d0c      	cmp	r5, #12
 8000a5e:	bf38      	it	cc
 8000a60:	250c      	movcc	r5, #12
 8000a62:	2d00      	cmp	r5, #0
 8000a64:	4607      	mov	r7, r0
 8000a66:	db01      	blt.n	8000a6c <_malloc_r+0x1c>
 8000a68:	42a9      	cmp	r1, r5
 8000a6a:	d905      	bls.n	8000a78 <_malloc_r+0x28>
 8000a6c:	230c      	movs	r3, #12
 8000a6e:	603b      	str	r3, [r7, #0]
 8000a70:	2600      	movs	r6, #0
 8000a72:	4630      	mov	r0, r6
 8000a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000a78:	4e2e      	ldr	r6, [pc, #184]	; (8000b34 <_malloc_r+0xe4>)
 8000a7a:	f000 fdbb 	bl	80015f4 <__malloc_lock>
 8000a7e:	6833      	ldr	r3, [r6, #0]
 8000a80:	461c      	mov	r4, r3
 8000a82:	bb34      	cbnz	r4, 8000ad2 <_malloc_r+0x82>
 8000a84:	4629      	mov	r1, r5
 8000a86:	4638      	mov	r0, r7
 8000a88:	f7ff ffc2 	bl	8000a10 <sbrk_aligned>
 8000a8c:	1c43      	adds	r3, r0, #1
 8000a8e:	4604      	mov	r4, r0
 8000a90:	d14d      	bne.n	8000b2e <_malloc_r+0xde>
 8000a92:	6834      	ldr	r4, [r6, #0]
 8000a94:	4626      	mov	r6, r4
 8000a96:	2e00      	cmp	r6, #0
 8000a98:	d140      	bne.n	8000b1c <_malloc_r+0xcc>
 8000a9a:	6823      	ldr	r3, [r4, #0]
 8000a9c:	4631      	mov	r1, r6
 8000a9e:	4638      	mov	r0, r7
 8000aa0:	eb04 0803 	add.w	r8, r4, r3
 8000aa4:	f000 fb36 	bl	8001114 <_sbrk_r>
 8000aa8:	4580      	cmp	r8, r0
 8000aaa:	d13a      	bne.n	8000b22 <_malloc_r+0xd2>
 8000aac:	6821      	ldr	r1, [r4, #0]
 8000aae:	3503      	adds	r5, #3
 8000ab0:	1a6d      	subs	r5, r5, r1
 8000ab2:	f025 0503 	bic.w	r5, r5, #3
 8000ab6:	3508      	adds	r5, #8
 8000ab8:	2d0c      	cmp	r5, #12
 8000aba:	bf38      	it	cc
 8000abc:	250c      	movcc	r5, #12
 8000abe:	4629      	mov	r1, r5
 8000ac0:	4638      	mov	r0, r7
 8000ac2:	f7ff ffa5 	bl	8000a10 <sbrk_aligned>
 8000ac6:	3001      	adds	r0, #1
 8000ac8:	d02b      	beq.n	8000b22 <_malloc_r+0xd2>
 8000aca:	6823      	ldr	r3, [r4, #0]
 8000acc:	442b      	add	r3, r5
 8000ace:	6023      	str	r3, [r4, #0]
 8000ad0:	e00e      	b.n	8000af0 <_malloc_r+0xa0>
 8000ad2:	6822      	ldr	r2, [r4, #0]
 8000ad4:	1b52      	subs	r2, r2, r5
 8000ad6:	d41e      	bmi.n	8000b16 <_malloc_r+0xc6>
 8000ad8:	2a0b      	cmp	r2, #11
 8000ada:	d916      	bls.n	8000b0a <_malloc_r+0xba>
 8000adc:	1961      	adds	r1, r4, r5
 8000ade:	42a3      	cmp	r3, r4
 8000ae0:	6025      	str	r5, [r4, #0]
 8000ae2:	bf18      	it	ne
 8000ae4:	6059      	strne	r1, [r3, #4]
 8000ae6:	6863      	ldr	r3, [r4, #4]
 8000ae8:	bf08      	it	eq
 8000aea:	6031      	streq	r1, [r6, #0]
 8000aec:	5162      	str	r2, [r4, r5]
 8000aee:	604b      	str	r3, [r1, #4]
 8000af0:	4638      	mov	r0, r7
 8000af2:	f104 060b 	add.w	r6, r4, #11
 8000af6:	f000 fd83 	bl	8001600 <__malloc_unlock>
 8000afa:	f026 0607 	bic.w	r6, r6, #7
 8000afe:	1d23      	adds	r3, r4, #4
 8000b00:	1af2      	subs	r2, r6, r3
 8000b02:	d0b6      	beq.n	8000a72 <_malloc_r+0x22>
 8000b04:	1b9b      	subs	r3, r3, r6
 8000b06:	50a3      	str	r3, [r4, r2]
 8000b08:	e7b3      	b.n	8000a72 <_malloc_r+0x22>
 8000b0a:	6862      	ldr	r2, [r4, #4]
 8000b0c:	42a3      	cmp	r3, r4
 8000b0e:	bf0c      	ite	eq
 8000b10:	6032      	streq	r2, [r6, #0]
 8000b12:	605a      	strne	r2, [r3, #4]
 8000b14:	e7ec      	b.n	8000af0 <_malloc_r+0xa0>
 8000b16:	4623      	mov	r3, r4
 8000b18:	6864      	ldr	r4, [r4, #4]
 8000b1a:	e7b2      	b.n	8000a82 <_malloc_r+0x32>
 8000b1c:	4634      	mov	r4, r6
 8000b1e:	6876      	ldr	r6, [r6, #4]
 8000b20:	e7b9      	b.n	8000a96 <_malloc_r+0x46>
 8000b22:	230c      	movs	r3, #12
 8000b24:	603b      	str	r3, [r7, #0]
 8000b26:	4638      	mov	r0, r7
 8000b28:	f000 fd6a 	bl	8001600 <__malloc_unlock>
 8000b2c:	e7a1      	b.n	8000a72 <_malloc_r+0x22>
 8000b2e:	6025      	str	r5, [r4, #0]
 8000b30:	e7de      	b.n	8000af0 <_malloc_r+0xa0>
 8000b32:	bf00      	nop
 8000b34:	2000008c 	.word	0x2000008c

08000b38 <__sfputc_r>:
 8000b38:	6893      	ldr	r3, [r2, #8]
 8000b3a:	3b01      	subs	r3, #1
 8000b3c:	2b00      	cmp	r3, #0
 8000b3e:	b410      	push	{r4}
 8000b40:	6093      	str	r3, [r2, #8]
 8000b42:	da08      	bge.n	8000b56 <__sfputc_r+0x1e>
 8000b44:	6994      	ldr	r4, [r2, #24]
 8000b46:	42a3      	cmp	r3, r4
 8000b48:	db01      	blt.n	8000b4e <__sfputc_r+0x16>
 8000b4a:	290a      	cmp	r1, #10
 8000b4c:	d103      	bne.n	8000b56 <__sfputc_r+0x1e>
 8000b4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b52:	f000 bb33 	b.w	80011bc <__swbuf_r>
 8000b56:	6813      	ldr	r3, [r2, #0]
 8000b58:	1c58      	adds	r0, r3, #1
 8000b5a:	6010      	str	r0, [r2, #0]
 8000b5c:	7019      	strb	r1, [r3, #0]
 8000b5e:	4608      	mov	r0, r1
 8000b60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000b64:	4770      	bx	lr

08000b66 <__sfputs_r>:
 8000b66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000b68:	4606      	mov	r6, r0
 8000b6a:	460f      	mov	r7, r1
 8000b6c:	4614      	mov	r4, r2
 8000b6e:	18d5      	adds	r5, r2, r3
 8000b70:	42ac      	cmp	r4, r5
 8000b72:	d101      	bne.n	8000b78 <__sfputs_r+0x12>
 8000b74:	2000      	movs	r0, #0
 8000b76:	e007      	b.n	8000b88 <__sfputs_r+0x22>
 8000b78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000b7c:	463a      	mov	r2, r7
 8000b7e:	4630      	mov	r0, r6
 8000b80:	f7ff ffda 	bl	8000b38 <__sfputc_r>
 8000b84:	1c43      	adds	r3, r0, #1
 8000b86:	d1f3      	bne.n	8000b70 <__sfputs_r+0xa>
 8000b88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000b8c <_vfiprintf_r>:
 8000b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b90:	460d      	mov	r5, r1
 8000b92:	b09d      	sub	sp, #116	; 0x74
 8000b94:	4614      	mov	r4, r2
 8000b96:	4698      	mov	r8, r3
 8000b98:	4606      	mov	r6, r0
 8000b9a:	b118      	cbz	r0, 8000ba4 <_vfiprintf_r+0x18>
 8000b9c:	6983      	ldr	r3, [r0, #24]
 8000b9e:	b90b      	cbnz	r3, 8000ba4 <_vfiprintf_r+0x18>
 8000ba0:	f7ff fe96 	bl	80008d0 <__sinit>
 8000ba4:	4b89      	ldr	r3, [pc, #548]	; (8000dcc <_vfiprintf_r+0x240>)
 8000ba6:	429d      	cmp	r5, r3
 8000ba8:	d11b      	bne.n	8000be2 <_vfiprintf_r+0x56>
 8000baa:	6875      	ldr	r5, [r6, #4]
 8000bac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000bae:	07d9      	lsls	r1, r3, #31
 8000bb0:	d405      	bmi.n	8000bbe <_vfiprintf_r+0x32>
 8000bb2:	89ab      	ldrh	r3, [r5, #12]
 8000bb4:	059a      	lsls	r2, r3, #22
 8000bb6:	d402      	bmi.n	8000bbe <_vfiprintf_r+0x32>
 8000bb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000bba:	f7ff ff27 	bl	8000a0c <__retarget_lock_acquire_recursive>
 8000bbe:	89ab      	ldrh	r3, [r5, #12]
 8000bc0:	071b      	lsls	r3, r3, #28
 8000bc2:	d501      	bpl.n	8000bc8 <_vfiprintf_r+0x3c>
 8000bc4:	692b      	ldr	r3, [r5, #16]
 8000bc6:	b9eb      	cbnz	r3, 8000c04 <_vfiprintf_r+0x78>
 8000bc8:	4629      	mov	r1, r5
 8000bca:	4630      	mov	r0, r6
 8000bcc:	f000 fb5a 	bl	8001284 <__swsetup_r>
 8000bd0:	b1c0      	cbz	r0, 8000c04 <_vfiprintf_r+0x78>
 8000bd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000bd4:	07dc      	lsls	r4, r3, #31
 8000bd6:	d50e      	bpl.n	8000bf6 <_vfiprintf_r+0x6a>
 8000bd8:	f04f 30ff 	mov.w	r0, #4294967295
 8000bdc:	b01d      	add	sp, #116	; 0x74
 8000bde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000be2:	4b7b      	ldr	r3, [pc, #492]	; (8000dd0 <_vfiprintf_r+0x244>)
 8000be4:	429d      	cmp	r5, r3
 8000be6:	d101      	bne.n	8000bec <_vfiprintf_r+0x60>
 8000be8:	68b5      	ldr	r5, [r6, #8]
 8000bea:	e7df      	b.n	8000bac <_vfiprintf_r+0x20>
 8000bec:	4b79      	ldr	r3, [pc, #484]	; (8000dd4 <_vfiprintf_r+0x248>)
 8000bee:	429d      	cmp	r5, r3
 8000bf0:	bf08      	it	eq
 8000bf2:	68f5      	ldreq	r5, [r6, #12]
 8000bf4:	e7da      	b.n	8000bac <_vfiprintf_r+0x20>
 8000bf6:	89ab      	ldrh	r3, [r5, #12]
 8000bf8:	0598      	lsls	r0, r3, #22
 8000bfa:	d4ed      	bmi.n	8000bd8 <_vfiprintf_r+0x4c>
 8000bfc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000bfe:	f7ff ff06 	bl	8000a0e <__retarget_lock_release_recursive>
 8000c02:	e7e9      	b.n	8000bd8 <_vfiprintf_r+0x4c>
 8000c04:	2300      	movs	r3, #0
 8000c06:	9309      	str	r3, [sp, #36]	; 0x24
 8000c08:	2320      	movs	r3, #32
 8000c0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000c0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8000c12:	2330      	movs	r3, #48	; 0x30
 8000c14:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8000dd8 <_vfiprintf_r+0x24c>
 8000c18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000c1c:	f04f 0901 	mov.w	r9, #1
 8000c20:	4623      	mov	r3, r4
 8000c22:	469a      	mov	sl, r3
 8000c24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000c28:	b10a      	cbz	r2, 8000c2e <_vfiprintf_r+0xa2>
 8000c2a:	2a25      	cmp	r2, #37	; 0x25
 8000c2c:	d1f9      	bne.n	8000c22 <_vfiprintf_r+0x96>
 8000c2e:	ebba 0b04 	subs.w	fp, sl, r4
 8000c32:	d00b      	beq.n	8000c4c <_vfiprintf_r+0xc0>
 8000c34:	465b      	mov	r3, fp
 8000c36:	4622      	mov	r2, r4
 8000c38:	4629      	mov	r1, r5
 8000c3a:	4630      	mov	r0, r6
 8000c3c:	f7ff ff93 	bl	8000b66 <__sfputs_r>
 8000c40:	3001      	adds	r0, #1
 8000c42:	f000 80aa 	beq.w	8000d9a <_vfiprintf_r+0x20e>
 8000c46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000c48:	445a      	add	r2, fp
 8000c4a:	9209      	str	r2, [sp, #36]	; 0x24
 8000c4c:	f89a 3000 	ldrb.w	r3, [sl]
 8000c50:	2b00      	cmp	r3, #0
 8000c52:	f000 80a2 	beq.w	8000d9a <_vfiprintf_r+0x20e>
 8000c56:	2300      	movs	r3, #0
 8000c58:	f04f 32ff 	mov.w	r2, #4294967295
 8000c5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000c60:	f10a 0a01 	add.w	sl, sl, #1
 8000c64:	9304      	str	r3, [sp, #16]
 8000c66:	9307      	str	r3, [sp, #28]
 8000c68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000c6c:	931a      	str	r3, [sp, #104]	; 0x68
 8000c6e:	4654      	mov	r4, sl
 8000c70:	2205      	movs	r2, #5
 8000c72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000c76:	4858      	ldr	r0, [pc, #352]	; (8000dd8 <_vfiprintf_r+0x24c>)
 8000c78:	f7ff faca 	bl	8000210 <memchr>
 8000c7c:	9a04      	ldr	r2, [sp, #16]
 8000c7e:	b9d8      	cbnz	r0, 8000cb8 <_vfiprintf_r+0x12c>
 8000c80:	06d1      	lsls	r1, r2, #27
 8000c82:	bf44      	itt	mi
 8000c84:	2320      	movmi	r3, #32
 8000c86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000c8a:	0713      	lsls	r3, r2, #28
 8000c8c:	bf44      	itt	mi
 8000c8e:	232b      	movmi	r3, #43	; 0x2b
 8000c90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000c94:	f89a 3000 	ldrb.w	r3, [sl]
 8000c98:	2b2a      	cmp	r3, #42	; 0x2a
 8000c9a:	d015      	beq.n	8000cc8 <_vfiprintf_r+0x13c>
 8000c9c:	9a07      	ldr	r2, [sp, #28]
 8000c9e:	4654      	mov	r4, sl
 8000ca0:	2000      	movs	r0, #0
 8000ca2:	f04f 0c0a 	mov.w	ip, #10
 8000ca6:	4621      	mov	r1, r4
 8000ca8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000cac:	3b30      	subs	r3, #48	; 0x30
 8000cae:	2b09      	cmp	r3, #9
 8000cb0:	d94e      	bls.n	8000d50 <_vfiprintf_r+0x1c4>
 8000cb2:	b1b0      	cbz	r0, 8000ce2 <_vfiprintf_r+0x156>
 8000cb4:	9207      	str	r2, [sp, #28]
 8000cb6:	e014      	b.n	8000ce2 <_vfiprintf_r+0x156>
 8000cb8:	eba0 0308 	sub.w	r3, r0, r8
 8000cbc:	fa09 f303 	lsl.w	r3, r9, r3
 8000cc0:	4313      	orrs	r3, r2
 8000cc2:	9304      	str	r3, [sp, #16]
 8000cc4:	46a2      	mov	sl, r4
 8000cc6:	e7d2      	b.n	8000c6e <_vfiprintf_r+0xe2>
 8000cc8:	9b03      	ldr	r3, [sp, #12]
 8000cca:	1d19      	adds	r1, r3, #4
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	9103      	str	r1, [sp, #12]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	bfbb      	ittet	lt
 8000cd4:	425b      	neglt	r3, r3
 8000cd6:	f042 0202 	orrlt.w	r2, r2, #2
 8000cda:	9307      	strge	r3, [sp, #28]
 8000cdc:	9307      	strlt	r3, [sp, #28]
 8000cde:	bfb8      	it	lt
 8000ce0:	9204      	strlt	r2, [sp, #16]
 8000ce2:	7823      	ldrb	r3, [r4, #0]
 8000ce4:	2b2e      	cmp	r3, #46	; 0x2e
 8000ce6:	d10c      	bne.n	8000d02 <_vfiprintf_r+0x176>
 8000ce8:	7863      	ldrb	r3, [r4, #1]
 8000cea:	2b2a      	cmp	r3, #42	; 0x2a
 8000cec:	d135      	bne.n	8000d5a <_vfiprintf_r+0x1ce>
 8000cee:	9b03      	ldr	r3, [sp, #12]
 8000cf0:	1d1a      	adds	r2, r3, #4
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	9203      	str	r2, [sp, #12]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	bfb8      	it	lt
 8000cfa:	f04f 33ff 	movlt.w	r3, #4294967295
 8000cfe:	3402      	adds	r4, #2
 8000d00:	9305      	str	r3, [sp, #20]
 8000d02:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8000de8 <_vfiprintf_r+0x25c>
 8000d06:	7821      	ldrb	r1, [r4, #0]
 8000d08:	2203      	movs	r2, #3
 8000d0a:	4650      	mov	r0, sl
 8000d0c:	f7ff fa80 	bl	8000210 <memchr>
 8000d10:	b140      	cbz	r0, 8000d24 <_vfiprintf_r+0x198>
 8000d12:	2340      	movs	r3, #64	; 0x40
 8000d14:	eba0 000a 	sub.w	r0, r0, sl
 8000d18:	fa03 f000 	lsl.w	r0, r3, r0
 8000d1c:	9b04      	ldr	r3, [sp, #16]
 8000d1e:	4303      	orrs	r3, r0
 8000d20:	3401      	adds	r4, #1
 8000d22:	9304      	str	r3, [sp, #16]
 8000d24:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000d28:	482c      	ldr	r0, [pc, #176]	; (8000ddc <_vfiprintf_r+0x250>)
 8000d2a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000d2e:	2206      	movs	r2, #6
 8000d30:	f7ff fa6e 	bl	8000210 <memchr>
 8000d34:	2800      	cmp	r0, #0
 8000d36:	d03f      	beq.n	8000db8 <_vfiprintf_r+0x22c>
 8000d38:	4b29      	ldr	r3, [pc, #164]	; (8000de0 <_vfiprintf_r+0x254>)
 8000d3a:	bb1b      	cbnz	r3, 8000d84 <_vfiprintf_r+0x1f8>
 8000d3c:	9b03      	ldr	r3, [sp, #12]
 8000d3e:	3307      	adds	r3, #7
 8000d40:	f023 0307 	bic.w	r3, r3, #7
 8000d44:	3308      	adds	r3, #8
 8000d46:	9303      	str	r3, [sp, #12]
 8000d48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000d4a:	443b      	add	r3, r7
 8000d4c:	9309      	str	r3, [sp, #36]	; 0x24
 8000d4e:	e767      	b.n	8000c20 <_vfiprintf_r+0x94>
 8000d50:	fb0c 3202 	mla	r2, ip, r2, r3
 8000d54:	460c      	mov	r4, r1
 8000d56:	2001      	movs	r0, #1
 8000d58:	e7a5      	b.n	8000ca6 <_vfiprintf_r+0x11a>
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	3401      	adds	r4, #1
 8000d5e:	9305      	str	r3, [sp, #20]
 8000d60:	4619      	mov	r1, r3
 8000d62:	f04f 0c0a 	mov.w	ip, #10
 8000d66:	4620      	mov	r0, r4
 8000d68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000d6c:	3a30      	subs	r2, #48	; 0x30
 8000d6e:	2a09      	cmp	r2, #9
 8000d70:	d903      	bls.n	8000d7a <_vfiprintf_r+0x1ee>
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d0c5      	beq.n	8000d02 <_vfiprintf_r+0x176>
 8000d76:	9105      	str	r1, [sp, #20]
 8000d78:	e7c3      	b.n	8000d02 <_vfiprintf_r+0x176>
 8000d7a:	fb0c 2101 	mla	r1, ip, r1, r2
 8000d7e:	4604      	mov	r4, r0
 8000d80:	2301      	movs	r3, #1
 8000d82:	e7f0      	b.n	8000d66 <_vfiprintf_r+0x1da>
 8000d84:	ab03      	add	r3, sp, #12
 8000d86:	9300      	str	r3, [sp, #0]
 8000d88:	462a      	mov	r2, r5
 8000d8a:	4b16      	ldr	r3, [pc, #88]	; (8000de4 <_vfiprintf_r+0x258>)
 8000d8c:	a904      	add	r1, sp, #16
 8000d8e:	4630      	mov	r0, r6
 8000d90:	f3af 8000 	nop.w
 8000d94:	4607      	mov	r7, r0
 8000d96:	1c78      	adds	r0, r7, #1
 8000d98:	d1d6      	bne.n	8000d48 <_vfiprintf_r+0x1bc>
 8000d9a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000d9c:	07d9      	lsls	r1, r3, #31
 8000d9e:	d405      	bmi.n	8000dac <_vfiprintf_r+0x220>
 8000da0:	89ab      	ldrh	r3, [r5, #12]
 8000da2:	059a      	lsls	r2, r3, #22
 8000da4:	d402      	bmi.n	8000dac <_vfiprintf_r+0x220>
 8000da6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000da8:	f7ff fe31 	bl	8000a0e <__retarget_lock_release_recursive>
 8000dac:	89ab      	ldrh	r3, [r5, #12]
 8000dae:	065b      	lsls	r3, r3, #25
 8000db0:	f53f af12 	bmi.w	8000bd8 <_vfiprintf_r+0x4c>
 8000db4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8000db6:	e711      	b.n	8000bdc <_vfiprintf_r+0x50>
 8000db8:	ab03      	add	r3, sp, #12
 8000dba:	9300      	str	r3, [sp, #0]
 8000dbc:	462a      	mov	r2, r5
 8000dbe:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <_vfiprintf_r+0x258>)
 8000dc0:	a904      	add	r1, sp, #16
 8000dc2:	4630      	mov	r0, r6
 8000dc4:	f000 f880 	bl	8000ec8 <_printf_i>
 8000dc8:	e7e4      	b.n	8000d94 <_vfiprintf_r+0x208>
 8000dca:	bf00      	nop
 8000dcc:	0800175c 	.word	0x0800175c
 8000dd0:	0800177c 	.word	0x0800177c
 8000dd4:	0800173c 	.word	0x0800173c
 8000dd8:	0800179c 	.word	0x0800179c
 8000ddc:	080017a6 	.word	0x080017a6
 8000de0:	00000000 	.word	0x00000000
 8000de4:	08000b67 	.word	0x08000b67
 8000de8:	080017a2 	.word	0x080017a2

08000dec <_printf_common>:
 8000dec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000df0:	4616      	mov	r6, r2
 8000df2:	4699      	mov	r9, r3
 8000df4:	688a      	ldr	r2, [r1, #8]
 8000df6:	690b      	ldr	r3, [r1, #16]
 8000df8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8000dfc:	4293      	cmp	r3, r2
 8000dfe:	bfb8      	it	lt
 8000e00:	4613      	movlt	r3, r2
 8000e02:	6033      	str	r3, [r6, #0]
 8000e04:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8000e08:	4607      	mov	r7, r0
 8000e0a:	460c      	mov	r4, r1
 8000e0c:	b10a      	cbz	r2, 8000e12 <_printf_common+0x26>
 8000e0e:	3301      	adds	r3, #1
 8000e10:	6033      	str	r3, [r6, #0]
 8000e12:	6823      	ldr	r3, [r4, #0]
 8000e14:	0699      	lsls	r1, r3, #26
 8000e16:	bf42      	ittt	mi
 8000e18:	6833      	ldrmi	r3, [r6, #0]
 8000e1a:	3302      	addmi	r3, #2
 8000e1c:	6033      	strmi	r3, [r6, #0]
 8000e1e:	6825      	ldr	r5, [r4, #0]
 8000e20:	f015 0506 	ands.w	r5, r5, #6
 8000e24:	d106      	bne.n	8000e34 <_printf_common+0x48>
 8000e26:	f104 0a19 	add.w	sl, r4, #25
 8000e2a:	68e3      	ldr	r3, [r4, #12]
 8000e2c:	6832      	ldr	r2, [r6, #0]
 8000e2e:	1a9b      	subs	r3, r3, r2
 8000e30:	42ab      	cmp	r3, r5
 8000e32:	dc26      	bgt.n	8000e82 <_printf_common+0x96>
 8000e34:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8000e38:	1e13      	subs	r3, r2, #0
 8000e3a:	6822      	ldr	r2, [r4, #0]
 8000e3c:	bf18      	it	ne
 8000e3e:	2301      	movne	r3, #1
 8000e40:	0692      	lsls	r2, r2, #26
 8000e42:	d42b      	bmi.n	8000e9c <_printf_common+0xb0>
 8000e44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8000e48:	4649      	mov	r1, r9
 8000e4a:	4638      	mov	r0, r7
 8000e4c:	47c0      	blx	r8
 8000e4e:	3001      	adds	r0, #1
 8000e50:	d01e      	beq.n	8000e90 <_printf_common+0xa4>
 8000e52:	6823      	ldr	r3, [r4, #0]
 8000e54:	68e5      	ldr	r5, [r4, #12]
 8000e56:	6832      	ldr	r2, [r6, #0]
 8000e58:	f003 0306 	and.w	r3, r3, #6
 8000e5c:	2b04      	cmp	r3, #4
 8000e5e:	bf08      	it	eq
 8000e60:	1aad      	subeq	r5, r5, r2
 8000e62:	68a3      	ldr	r3, [r4, #8]
 8000e64:	6922      	ldr	r2, [r4, #16]
 8000e66:	bf0c      	ite	eq
 8000e68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8000e6c:	2500      	movne	r5, #0
 8000e6e:	4293      	cmp	r3, r2
 8000e70:	bfc4      	itt	gt
 8000e72:	1a9b      	subgt	r3, r3, r2
 8000e74:	18ed      	addgt	r5, r5, r3
 8000e76:	2600      	movs	r6, #0
 8000e78:	341a      	adds	r4, #26
 8000e7a:	42b5      	cmp	r5, r6
 8000e7c:	d11a      	bne.n	8000eb4 <_printf_common+0xc8>
 8000e7e:	2000      	movs	r0, #0
 8000e80:	e008      	b.n	8000e94 <_printf_common+0xa8>
 8000e82:	2301      	movs	r3, #1
 8000e84:	4652      	mov	r2, sl
 8000e86:	4649      	mov	r1, r9
 8000e88:	4638      	mov	r0, r7
 8000e8a:	47c0      	blx	r8
 8000e8c:	3001      	adds	r0, #1
 8000e8e:	d103      	bne.n	8000e98 <_printf_common+0xac>
 8000e90:	f04f 30ff 	mov.w	r0, #4294967295
 8000e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e98:	3501      	adds	r5, #1
 8000e9a:	e7c6      	b.n	8000e2a <_printf_common+0x3e>
 8000e9c:	18e1      	adds	r1, r4, r3
 8000e9e:	1c5a      	adds	r2, r3, #1
 8000ea0:	2030      	movs	r0, #48	; 0x30
 8000ea2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8000ea6:	4422      	add	r2, r4
 8000ea8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8000eac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8000eb0:	3302      	adds	r3, #2
 8000eb2:	e7c7      	b.n	8000e44 <_printf_common+0x58>
 8000eb4:	2301      	movs	r3, #1
 8000eb6:	4622      	mov	r2, r4
 8000eb8:	4649      	mov	r1, r9
 8000eba:	4638      	mov	r0, r7
 8000ebc:	47c0      	blx	r8
 8000ebe:	3001      	adds	r0, #1
 8000ec0:	d0e6      	beq.n	8000e90 <_printf_common+0xa4>
 8000ec2:	3601      	adds	r6, #1
 8000ec4:	e7d9      	b.n	8000e7a <_printf_common+0x8e>
	...

08000ec8 <_printf_i>:
 8000ec8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8000ecc:	7e0f      	ldrb	r7, [r1, #24]
 8000ece:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000ed0:	2f78      	cmp	r7, #120	; 0x78
 8000ed2:	4691      	mov	r9, r2
 8000ed4:	4680      	mov	r8, r0
 8000ed6:	460c      	mov	r4, r1
 8000ed8:	469a      	mov	sl, r3
 8000eda:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8000ede:	d807      	bhi.n	8000ef0 <_printf_i+0x28>
 8000ee0:	2f62      	cmp	r7, #98	; 0x62
 8000ee2:	d80a      	bhi.n	8000efa <_printf_i+0x32>
 8000ee4:	2f00      	cmp	r7, #0
 8000ee6:	f000 80d8 	beq.w	800109a <_printf_i+0x1d2>
 8000eea:	2f58      	cmp	r7, #88	; 0x58
 8000eec:	f000 80a3 	beq.w	8001036 <_printf_i+0x16e>
 8000ef0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000ef4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8000ef8:	e03a      	b.n	8000f70 <_printf_i+0xa8>
 8000efa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8000efe:	2b15      	cmp	r3, #21
 8000f00:	d8f6      	bhi.n	8000ef0 <_printf_i+0x28>
 8000f02:	a101      	add	r1, pc, #4	; (adr r1, 8000f08 <_printf_i+0x40>)
 8000f04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8000f08:	08000f61 	.word	0x08000f61
 8000f0c:	08000f75 	.word	0x08000f75
 8000f10:	08000ef1 	.word	0x08000ef1
 8000f14:	08000ef1 	.word	0x08000ef1
 8000f18:	08000ef1 	.word	0x08000ef1
 8000f1c:	08000ef1 	.word	0x08000ef1
 8000f20:	08000f75 	.word	0x08000f75
 8000f24:	08000ef1 	.word	0x08000ef1
 8000f28:	08000ef1 	.word	0x08000ef1
 8000f2c:	08000ef1 	.word	0x08000ef1
 8000f30:	08000ef1 	.word	0x08000ef1
 8000f34:	08001081 	.word	0x08001081
 8000f38:	08000fa5 	.word	0x08000fa5
 8000f3c:	08001063 	.word	0x08001063
 8000f40:	08000ef1 	.word	0x08000ef1
 8000f44:	08000ef1 	.word	0x08000ef1
 8000f48:	080010a3 	.word	0x080010a3
 8000f4c:	08000ef1 	.word	0x08000ef1
 8000f50:	08000fa5 	.word	0x08000fa5
 8000f54:	08000ef1 	.word	0x08000ef1
 8000f58:	08000ef1 	.word	0x08000ef1
 8000f5c:	0800106b 	.word	0x0800106b
 8000f60:	682b      	ldr	r3, [r5, #0]
 8000f62:	1d1a      	adds	r2, r3, #4
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	602a      	str	r2, [r5, #0]
 8000f68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8000f6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8000f70:	2301      	movs	r3, #1
 8000f72:	e0a3      	b.n	80010bc <_printf_i+0x1f4>
 8000f74:	6820      	ldr	r0, [r4, #0]
 8000f76:	6829      	ldr	r1, [r5, #0]
 8000f78:	0606      	lsls	r6, r0, #24
 8000f7a:	f101 0304 	add.w	r3, r1, #4
 8000f7e:	d50a      	bpl.n	8000f96 <_printf_i+0xce>
 8000f80:	680e      	ldr	r6, [r1, #0]
 8000f82:	602b      	str	r3, [r5, #0]
 8000f84:	2e00      	cmp	r6, #0
 8000f86:	da03      	bge.n	8000f90 <_printf_i+0xc8>
 8000f88:	232d      	movs	r3, #45	; 0x2d
 8000f8a:	4276      	negs	r6, r6
 8000f8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8000f90:	485e      	ldr	r0, [pc, #376]	; (800110c <_printf_i+0x244>)
 8000f92:	230a      	movs	r3, #10
 8000f94:	e019      	b.n	8000fca <_printf_i+0x102>
 8000f96:	680e      	ldr	r6, [r1, #0]
 8000f98:	602b      	str	r3, [r5, #0]
 8000f9a:	f010 0f40 	tst.w	r0, #64	; 0x40
 8000f9e:	bf18      	it	ne
 8000fa0:	b236      	sxthne	r6, r6
 8000fa2:	e7ef      	b.n	8000f84 <_printf_i+0xbc>
 8000fa4:	682b      	ldr	r3, [r5, #0]
 8000fa6:	6820      	ldr	r0, [r4, #0]
 8000fa8:	1d19      	adds	r1, r3, #4
 8000faa:	6029      	str	r1, [r5, #0]
 8000fac:	0601      	lsls	r1, r0, #24
 8000fae:	d501      	bpl.n	8000fb4 <_printf_i+0xec>
 8000fb0:	681e      	ldr	r6, [r3, #0]
 8000fb2:	e002      	b.n	8000fba <_printf_i+0xf2>
 8000fb4:	0646      	lsls	r6, r0, #25
 8000fb6:	d5fb      	bpl.n	8000fb0 <_printf_i+0xe8>
 8000fb8:	881e      	ldrh	r6, [r3, #0]
 8000fba:	4854      	ldr	r0, [pc, #336]	; (800110c <_printf_i+0x244>)
 8000fbc:	2f6f      	cmp	r7, #111	; 0x6f
 8000fbe:	bf0c      	ite	eq
 8000fc0:	2308      	moveq	r3, #8
 8000fc2:	230a      	movne	r3, #10
 8000fc4:	2100      	movs	r1, #0
 8000fc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8000fca:	6865      	ldr	r5, [r4, #4]
 8000fcc:	60a5      	str	r5, [r4, #8]
 8000fce:	2d00      	cmp	r5, #0
 8000fd0:	bfa2      	ittt	ge
 8000fd2:	6821      	ldrge	r1, [r4, #0]
 8000fd4:	f021 0104 	bicge.w	r1, r1, #4
 8000fd8:	6021      	strge	r1, [r4, #0]
 8000fda:	b90e      	cbnz	r6, 8000fe0 <_printf_i+0x118>
 8000fdc:	2d00      	cmp	r5, #0
 8000fde:	d04d      	beq.n	800107c <_printf_i+0x1b4>
 8000fe0:	4615      	mov	r5, r2
 8000fe2:	fbb6 f1f3 	udiv	r1, r6, r3
 8000fe6:	fb03 6711 	mls	r7, r3, r1, r6
 8000fea:	5dc7      	ldrb	r7, [r0, r7]
 8000fec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8000ff0:	4637      	mov	r7, r6
 8000ff2:	42bb      	cmp	r3, r7
 8000ff4:	460e      	mov	r6, r1
 8000ff6:	d9f4      	bls.n	8000fe2 <_printf_i+0x11a>
 8000ff8:	2b08      	cmp	r3, #8
 8000ffa:	d10b      	bne.n	8001014 <_printf_i+0x14c>
 8000ffc:	6823      	ldr	r3, [r4, #0]
 8000ffe:	07de      	lsls	r6, r3, #31
 8001000:	d508      	bpl.n	8001014 <_printf_i+0x14c>
 8001002:	6923      	ldr	r3, [r4, #16]
 8001004:	6861      	ldr	r1, [r4, #4]
 8001006:	4299      	cmp	r1, r3
 8001008:	bfde      	ittt	le
 800100a:	2330      	movle	r3, #48	; 0x30
 800100c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001010:	f105 35ff 	addle.w	r5, r5, #4294967295
 8001014:	1b52      	subs	r2, r2, r5
 8001016:	6122      	str	r2, [r4, #16]
 8001018:	f8cd a000 	str.w	sl, [sp]
 800101c:	464b      	mov	r3, r9
 800101e:	aa03      	add	r2, sp, #12
 8001020:	4621      	mov	r1, r4
 8001022:	4640      	mov	r0, r8
 8001024:	f7ff fee2 	bl	8000dec <_printf_common>
 8001028:	3001      	adds	r0, #1
 800102a:	d14c      	bne.n	80010c6 <_printf_i+0x1fe>
 800102c:	f04f 30ff 	mov.w	r0, #4294967295
 8001030:	b004      	add	sp, #16
 8001032:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001036:	4835      	ldr	r0, [pc, #212]	; (800110c <_printf_i+0x244>)
 8001038:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800103c:	6829      	ldr	r1, [r5, #0]
 800103e:	6823      	ldr	r3, [r4, #0]
 8001040:	f851 6b04 	ldr.w	r6, [r1], #4
 8001044:	6029      	str	r1, [r5, #0]
 8001046:	061d      	lsls	r5, r3, #24
 8001048:	d514      	bpl.n	8001074 <_printf_i+0x1ac>
 800104a:	07df      	lsls	r7, r3, #31
 800104c:	bf44      	itt	mi
 800104e:	f043 0320 	orrmi.w	r3, r3, #32
 8001052:	6023      	strmi	r3, [r4, #0]
 8001054:	b91e      	cbnz	r6, 800105e <_printf_i+0x196>
 8001056:	6823      	ldr	r3, [r4, #0]
 8001058:	f023 0320 	bic.w	r3, r3, #32
 800105c:	6023      	str	r3, [r4, #0]
 800105e:	2310      	movs	r3, #16
 8001060:	e7b0      	b.n	8000fc4 <_printf_i+0xfc>
 8001062:	6823      	ldr	r3, [r4, #0]
 8001064:	f043 0320 	orr.w	r3, r3, #32
 8001068:	6023      	str	r3, [r4, #0]
 800106a:	2378      	movs	r3, #120	; 0x78
 800106c:	4828      	ldr	r0, [pc, #160]	; (8001110 <_printf_i+0x248>)
 800106e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8001072:	e7e3      	b.n	800103c <_printf_i+0x174>
 8001074:	0659      	lsls	r1, r3, #25
 8001076:	bf48      	it	mi
 8001078:	b2b6      	uxthmi	r6, r6
 800107a:	e7e6      	b.n	800104a <_printf_i+0x182>
 800107c:	4615      	mov	r5, r2
 800107e:	e7bb      	b.n	8000ff8 <_printf_i+0x130>
 8001080:	682b      	ldr	r3, [r5, #0]
 8001082:	6826      	ldr	r6, [r4, #0]
 8001084:	6961      	ldr	r1, [r4, #20]
 8001086:	1d18      	adds	r0, r3, #4
 8001088:	6028      	str	r0, [r5, #0]
 800108a:	0635      	lsls	r5, r6, #24
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	d501      	bpl.n	8001094 <_printf_i+0x1cc>
 8001090:	6019      	str	r1, [r3, #0]
 8001092:	e002      	b.n	800109a <_printf_i+0x1d2>
 8001094:	0670      	lsls	r0, r6, #25
 8001096:	d5fb      	bpl.n	8001090 <_printf_i+0x1c8>
 8001098:	8019      	strh	r1, [r3, #0]
 800109a:	2300      	movs	r3, #0
 800109c:	6123      	str	r3, [r4, #16]
 800109e:	4615      	mov	r5, r2
 80010a0:	e7ba      	b.n	8001018 <_printf_i+0x150>
 80010a2:	682b      	ldr	r3, [r5, #0]
 80010a4:	1d1a      	adds	r2, r3, #4
 80010a6:	602a      	str	r2, [r5, #0]
 80010a8:	681d      	ldr	r5, [r3, #0]
 80010aa:	6862      	ldr	r2, [r4, #4]
 80010ac:	2100      	movs	r1, #0
 80010ae:	4628      	mov	r0, r5
 80010b0:	f7ff f8ae 	bl	8000210 <memchr>
 80010b4:	b108      	cbz	r0, 80010ba <_printf_i+0x1f2>
 80010b6:	1b40      	subs	r0, r0, r5
 80010b8:	6060      	str	r0, [r4, #4]
 80010ba:	6863      	ldr	r3, [r4, #4]
 80010bc:	6123      	str	r3, [r4, #16]
 80010be:	2300      	movs	r3, #0
 80010c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80010c4:	e7a8      	b.n	8001018 <_printf_i+0x150>
 80010c6:	6923      	ldr	r3, [r4, #16]
 80010c8:	462a      	mov	r2, r5
 80010ca:	4649      	mov	r1, r9
 80010cc:	4640      	mov	r0, r8
 80010ce:	47d0      	blx	sl
 80010d0:	3001      	adds	r0, #1
 80010d2:	d0ab      	beq.n	800102c <_printf_i+0x164>
 80010d4:	6823      	ldr	r3, [r4, #0]
 80010d6:	079b      	lsls	r3, r3, #30
 80010d8:	d413      	bmi.n	8001102 <_printf_i+0x23a>
 80010da:	68e0      	ldr	r0, [r4, #12]
 80010dc:	9b03      	ldr	r3, [sp, #12]
 80010de:	4298      	cmp	r0, r3
 80010e0:	bfb8      	it	lt
 80010e2:	4618      	movlt	r0, r3
 80010e4:	e7a4      	b.n	8001030 <_printf_i+0x168>
 80010e6:	2301      	movs	r3, #1
 80010e8:	4632      	mov	r2, r6
 80010ea:	4649      	mov	r1, r9
 80010ec:	4640      	mov	r0, r8
 80010ee:	47d0      	blx	sl
 80010f0:	3001      	adds	r0, #1
 80010f2:	d09b      	beq.n	800102c <_printf_i+0x164>
 80010f4:	3501      	adds	r5, #1
 80010f6:	68e3      	ldr	r3, [r4, #12]
 80010f8:	9903      	ldr	r1, [sp, #12]
 80010fa:	1a5b      	subs	r3, r3, r1
 80010fc:	42ab      	cmp	r3, r5
 80010fe:	dcf2      	bgt.n	80010e6 <_printf_i+0x21e>
 8001100:	e7eb      	b.n	80010da <_printf_i+0x212>
 8001102:	2500      	movs	r5, #0
 8001104:	f104 0619 	add.w	r6, r4, #25
 8001108:	e7f5      	b.n	80010f6 <_printf_i+0x22e>
 800110a:	bf00      	nop
 800110c:	080017ad 	.word	0x080017ad
 8001110:	080017be 	.word	0x080017be

08001114 <_sbrk_r>:
 8001114:	b538      	push	{r3, r4, r5, lr}
 8001116:	4d06      	ldr	r5, [pc, #24]	; (8001130 <_sbrk_r+0x1c>)
 8001118:	2300      	movs	r3, #0
 800111a:	4604      	mov	r4, r0
 800111c:	4608      	mov	r0, r1
 800111e:	602b      	str	r3, [r5, #0]
 8001120:	f7ff f9fe 	bl	8000520 <_sbrk>
 8001124:	1c43      	adds	r3, r0, #1
 8001126:	d102      	bne.n	800112e <_sbrk_r+0x1a>
 8001128:	682b      	ldr	r3, [r5, #0]
 800112a:	b103      	cbz	r3, 800112e <_sbrk_r+0x1a>
 800112c:	6023      	str	r3, [r4, #0]
 800112e:	bd38      	pop	{r3, r4, r5, pc}
 8001130:	20000094 	.word	0x20000094

08001134 <__sread>:
 8001134:	b510      	push	{r4, lr}
 8001136:	460c      	mov	r4, r1
 8001138:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800113c:	f000 fab2 	bl	80016a4 <_read_r>
 8001140:	2800      	cmp	r0, #0
 8001142:	bfab      	itete	ge
 8001144:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8001146:	89a3      	ldrhlt	r3, [r4, #12]
 8001148:	181b      	addge	r3, r3, r0
 800114a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800114e:	bfac      	ite	ge
 8001150:	6563      	strge	r3, [r4, #84]	; 0x54
 8001152:	81a3      	strhlt	r3, [r4, #12]
 8001154:	bd10      	pop	{r4, pc}

08001156 <__swrite>:
 8001156:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800115a:	461f      	mov	r7, r3
 800115c:	898b      	ldrh	r3, [r1, #12]
 800115e:	05db      	lsls	r3, r3, #23
 8001160:	4605      	mov	r5, r0
 8001162:	460c      	mov	r4, r1
 8001164:	4616      	mov	r6, r2
 8001166:	d505      	bpl.n	8001174 <__swrite+0x1e>
 8001168:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800116c:	2302      	movs	r3, #2
 800116e:	2200      	movs	r2, #0
 8001170:	f000 f9c8 	bl	8001504 <_lseek_r>
 8001174:	89a3      	ldrh	r3, [r4, #12]
 8001176:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800117a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800117e:	81a3      	strh	r3, [r4, #12]
 8001180:	4632      	mov	r2, r6
 8001182:	463b      	mov	r3, r7
 8001184:	4628      	mov	r0, r5
 8001186:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800118a:	f000 b869 	b.w	8001260 <_write_r>

0800118e <__sseek>:
 800118e:	b510      	push	{r4, lr}
 8001190:	460c      	mov	r4, r1
 8001192:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001196:	f000 f9b5 	bl	8001504 <_lseek_r>
 800119a:	1c43      	adds	r3, r0, #1
 800119c:	89a3      	ldrh	r3, [r4, #12]
 800119e:	bf15      	itete	ne
 80011a0:	6560      	strne	r0, [r4, #84]	; 0x54
 80011a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80011a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80011aa:	81a3      	strheq	r3, [r4, #12]
 80011ac:	bf18      	it	ne
 80011ae:	81a3      	strhne	r3, [r4, #12]
 80011b0:	bd10      	pop	{r4, pc}

080011b2 <__sclose>:
 80011b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80011b6:	f000 b8d3 	b.w	8001360 <_close_r>
	...

080011bc <__swbuf_r>:
 80011bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80011be:	460e      	mov	r6, r1
 80011c0:	4614      	mov	r4, r2
 80011c2:	4605      	mov	r5, r0
 80011c4:	b118      	cbz	r0, 80011ce <__swbuf_r+0x12>
 80011c6:	6983      	ldr	r3, [r0, #24]
 80011c8:	b90b      	cbnz	r3, 80011ce <__swbuf_r+0x12>
 80011ca:	f7ff fb81 	bl	80008d0 <__sinit>
 80011ce:	4b21      	ldr	r3, [pc, #132]	; (8001254 <__swbuf_r+0x98>)
 80011d0:	429c      	cmp	r4, r3
 80011d2:	d12b      	bne.n	800122c <__swbuf_r+0x70>
 80011d4:	686c      	ldr	r4, [r5, #4]
 80011d6:	69a3      	ldr	r3, [r4, #24]
 80011d8:	60a3      	str	r3, [r4, #8]
 80011da:	89a3      	ldrh	r3, [r4, #12]
 80011dc:	071a      	lsls	r2, r3, #28
 80011de:	d52f      	bpl.n	8001240 <__swbuf_r+0x84>
 80011e0:	6923      	ldr	r3, [r4, #16]
 80011e2:	b36b      	cbz	r3, 8001240 <__swbuf_r+0x84>
 80011e4:	6923      	ldr	r3, [r4, #16]
 80011e6:	6820      	ldr	r0, [r4, #0]
 80011e8:	1ac0      	subs	r0, r0, r3
 80011ea:	6963      	ldr	r3, [r4, #20]
 80011ec:	b2f6      	uxtb	r6, r6
 80011ee:	4283      	cmp	r3, r0
 80011f0:	4637      	mov	r7, r6
 80011f2:	dc04      	bgt.n	80011fe <__swbuf_r+0x42>
 80011f4:	4621      	mov	r1, r4
 80011f6:	4628      	mov	r0, r5
 80011f8:	f000 f948 	bl	800148c <_fflush_r>
 80011fc:	bb30      	cbnz	r0, 800124c <__swbuf_r+0x90>
 80011fe:	68a3      	ldr	r3, [r4, #8]
 8001200:	3b01      	subs	r3, #1
 8001202:	60a3      	str	r3, [r4, #8]
 8001204:	6823      	ldr	r3, [r4, #0]
 8001206:	1c5a      	adds	r2, r3, #1
 8001208:	6022      	str	r2, [r4, #0]
 800120a:	701e      	strb	r6, [r3, #0]
 800120c:	6963      	ldr	r3, [r4, #20]
 800120e:	3001      	adds	r0, #1
 8001210:	4283      	cmp	r3, r0
 8001212:	d004      	beq.n	800121e <__swbuf_r+0x62>
 8001214:	89a3      	ldrh	r3, [r4, #12]
 8001216:	07db      	lsls	r3, r3, #31
 8001218:	d506      	bpl.n	8001228 <__swbuf_r+0x6c>
 800121a:	2e0a      	cmp	r6, #10
 800121c:	d104      	bne.n	8001228 <__swbuf_r+0x6c>
 800121e:	4621      	mov	r1, r4
 8001220:	4628      	mov	r0, r5
 8001222:	f000 f933 	bl	800148c <_fflush_r>
 8001226:	b988      	cbnz	r0, 800124c <__swbuf_r+0x90>
 8001228:	4638      	mov	r0, r7
 800122a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800122c:	4b0a      	ldr	r3, [pc, #40]	; (8001258 <__swbuf_r+0x9c>)
 800122e:	429c      	cmp	r4, r3
 8001230:	d101      	bne.n	8001236 <__swbuf_r+0x7a>
 8001232:	68ac      	ldr	r4, [r5, #8]
 8001234:	e7cf      	b.n	80011d6 <__swbuf_r+0x1a>
 8001236:	4b09      	ldr	r3, [pc, #36]	; (800125c <__swbuf_r+0xa0>)
 8001238:	429c      	cmp	r4, r3
 800123a:	bf08      	it	eq
 800123c:	68ec      	ldreq	r4, [r5, #12]
 800123e:	e7ca      	b.n	80011d6 <__swbuf_r+0x1a>
 8001240:	4621      	mov	r1, r4
 8001242:	4628      	mov	r0, r5
 8001244:	f000 f81e 	bl	8001284 <__swsetup_r>
 8001248:	2800      	cmp	r0, #0
 800124a:	d0cb      	beq.n	80011e4 <__swbuf_r+0x28>
 800124c:	f04f 37ff 	mov.w	r7, #4294967295
 8001250:	e7ea      	b.n	8001228 <__swbuf_r+0x6c>
 8001252:	bf00      	nop
 8001254:	0800175c 	.word	0x0800175c
 8001258:	0800177c 	.word	0x0800177c
 800125c:	0800173c 	.word	0x0800173c

08001260 <_write_r>:
 8001260:	b538      	push	{r3, r4, r5, lr}
 8001262:	4d07      	ldr	r5, [pc, #28]	; (8001280 <_write_r+0x20>)
 8001264:	4604      	mov	r4, r0
 8001266:	4608      	mov	r0, r1
 8001268:	4611      	mov	r1, r2
 800126a:	2200      	movs	r2, #0
 800126c:	602a      	str	r2, [r5, #0]
 800126e:	461a      	mov	r2, r3
 8001270:	f7ff f905 	bl	800047e <_write>
 8001274:	1c43      	adds	r3, r0, #1
 8001276:	d102      	bne.n	800127e <_write_r+0x1e>
 8001278:	682b      	ldr	r3, [r5, #0]
 800127a:	b103      	cbz	r3, 800127e <_write_r+0x1e>
 800127c:	6023      	str	r3, [r4, #0]
 800127e:	bd38      	pop	{r3, r4, r5, pc}
 8001280:	20000094 	.word	0x20000094

08001284 <__swsetup_r>:
 8001284:	4b32      	ldr	r3, [pc, #200]	; (8001350 <__swsetup_r+0xcc>)
 8001286:	b570      	push	{r4, r5, r6, lr}
 8001288:	681d      	ldr	r5, [r3, #0]
 800128a:	4606      	mov	r6, r0
 800128c:	460c      	mov	r4, r1
 800128e:	b125      	cbz	r5, 800129a <__swsetup_r+0x16>
 8001290:	69ab      	ldr	r3, [r5, #24]
 8001292:	b913      	cbnz	r3, 800129a <__swsetup_r+0x16>
 8001294:	4628      	mov	r0, r5
 8001296:	f7ff fb1b 	bl	80008d0 <__sinit>
 800129a:	4b2e      	ldr	r3, [pc, #184]	; (8001354 <__swsetup_r+0xd0>)
 800129c:	429c      	cmp	r4, r3
 800129e:	d10f      	bne.n	80012c0 <__swsetup_r+0x3c>
 80012a0:	686c      	ldr	r4, [r5, #4]
 80012a2:	89a3      	ldrh	r3, [r4, #12]
 80012a4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80012a8:	0719      	lsls	r1, r3, #28
 80012aa:	d42c      	bmi.n	8001306 <__swsetup_r+0x82>
 80012ac:	06dd      	lsls	r5, r3, #27
 80012ae:	d411      	bmi.n	80012d4 <__swsetup_r+0x50>
 80012b0:	2309      	movs	r3, #9
 80012b2:	6033      	str	r3, [r6, #0]
 80012b4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80012b8:	81a3      	strh	r3, [r4, #12]
 80012ba:	f04f 30ff 	mov.w	r0, #4294967295
 80012be:	e03e      	b.n	800133e <__swsetup_r+0xba>
 80012c0:	4b25      	ldr	r3, [pc, #148]	; (8001358 <__swsetup_r+0xd4>)
 80012c2:	429c      	cmp	r4, r3
 80012c4:	d101      	bne.n	80012ca <__swsetup_r+0x46>
 80012c6:	68ac      	ldr	r4, [r5, #8]
 80012c8:	e7eb      	b.n	80012a2 <__swsetup_r+0x1e>
 80012ca:	4b24      	ldr	r3, [pc, #144]	; (800135c <__swsetup_r+0xd8>)
 80012cc:	429c      	cmp	r4, r3
 80012ce:	bf08      	it	eq
 80012d0:	68ec      	ldreq	r4, [r5, #12]
 80012d2:	e7e6      	b.n	80012a2 <__swsetup_r+0x1e>
 80012d4:	0758      	lsls	r0, r3, #29
 80012d6:	d512      	bpl.n	80012fe <__swsetup_r+0x7a>
 80012d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80012da:	b141      	cbz	r1, 80012ee <__swsetup_r+0x6a>
 80012dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80012e0:	4299      	cmp	r1, r3
 80012e2:	d002      	beq.n	80012ea <__swsetup_r+0x66>
 80012e4:	4630      	mov	r0, r6
 80012e6:	f000 f991 	bl	800160c <_free_r>
 80012ea:	2300      	movs	r3, #0
 80012ec:	6363      	str	r3, [r4, #52]	; 0x34
 80012ee:	89a3      	ldrh	r3, [r4, #12]
 80012f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80012f4:	81a3      	strh	r3, [r4, #12]
 80012f6:	2300      	movs	r3, #0
 80012f8:	6063      	str	r3, [r4, #4]
 80012fa:	6923      	ldr	r3, [r4, #16]
 80012fc:	6023      	str	r3, [r4, #0]
 80012fe:	89a3      	ldrh	r3, [r4, #12]
 8001300:	f043 0308 	orr.w	r3, r3, #8
 8001304:	81a3      	strh	r3, [r4, #12]
 8001306:	6923      	ldr	r3, [r4, #16]
 8001308:	b94b      	cbnz	r3, 800131e <__swsetup_r+0x9a>
 800130a:	89a3      	ldrh	r3, [r4, #12]
 800130c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8001310:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001314:	d003      	beq.n	800131e <__swsetup_r+0x9a>
 8001316:	4621      	mov	r1, r4
 8001318:	4630      	mov	r0, r6
 800131a:	f000 f92b 	bl	8001574 <__smakebuf_r>
 800131e:	89a0      	ldrh	r0, [r4, #12]
 8001320:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8001324:	f010 0301 	ands.w	r3, r0, #1
 8001328:	d00a      	beq.n	8001340 <__swsetup_r+0xbc>
 800132a:	2300      	movs	r3, #0
 800132c:	60a3      	str	r3, [r4, #8]
 800132e:	6963      	ldr	r3, [r4, #20]
 8001330:	425b      	negs	r3, r3
 8001332:	61a3      	str	r3, [r4, #24]
 8001334:	6923      	ldr	r3, [r4, #16]
 8001336:	b943      	cbnz	r3, 800134a <__swsetup_r+0xc6>
 8001338:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800133c:	d1ba      	bne.n	80012b4 <__swsetup_r+0x30>
 800133e:	bd70      	pop	{r4, r5, r6, pc}
 8001340:	0781      	lsls	r1, r0, #30
 8001342:	bf58      	it	pl
 8001344:	6963      	ldrpl	r3, [r4, #20]
 8001346:	60a3      	str	r3, [r4, #8]
 8001348:	e7f4      	b.n	8001334 <__swsetup_r+0xb0>
 800134a:	2000      	movs	r0, #0
 800134c:	e7f7      	b.n	800133e <__swsetup_r+0xba>
 800134e:	bf00      	nop
 8001350:	20000000 	.word	0x20000000
 8001354:	0800175c 	.word	0x0800175c
 8001358:	0800177c 	.word	0x0800177c
 800135c:	0800173c 	.word	0x0800173c

08001360 <_close_r>:
 8001360:	b538      	push	{r3, r4, r5, lr}
 8001362:	4d06      	ldr	r5, [pc, #24]	; (800137c <_close_r+0x1c>)
 8001364:	2300      	movs	r3, #0
 8001366:	4604      	mov	r4, r0
 8001368:	4608      	mov	r0, r1
 800136a:	602b      	str	r3, [r5, #0]
 800136c:	f7ff f8a3 	bl	80004b6 <_close>
 8001370:	1c43      	adds	r3, r0, #1
 8001372:	d102      	bne.n	800137a <_close_r+0x1a>
 8001374:	682b      	ldr	r3, [r5, #0]
 8001376:	b103      	cbz	r3, 800137a <_close_r+0x1a>
 8001378:	6023      	str	r3, [r4, #0]
 800137a:	bd38      	pop	{r3, r4, r5, pc}
 800137c:	20000094 	.word	0x20000094

08001380 <__sflush_r>:
 8001380:	898a      	ldrh	r2, [r1, #12]
 8001382:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001386:	4605      	mov	r5, r0
 8001388:	0710      	lsls	r0, r2, #28
 800138a:	460c      	mov	r4, r1
 800138c:	d458      	bmi.n	8001440 <__sflush_r+0xc0>
 800138e:	684b      	ldr	r3, [r1, #4]
 8001390:	2b00      	cmp	r3, #0
 8001392:	dc05      	bgt.n	80013a0 <__sflush_r+0x20>
 8001394:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8001396:	2b00      	cmp	r3, #0
 8001398:	dc02      	bgt.n	80013a0 <__sflush_r+0x20>
 800139a:	2000      	movs	r0, #0
 800139c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80013a2:	2e00      	cmp	r6, #0
 80013a4:	d0f9      	beq.n	800139a <__sflush_r+0x1a>
 80013a6:	2300      	movs	r3, #0
 80013a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80013ac:	682f      	ldr	r7, [r5, #0]
 80013ae:	602b      	str	r3, [r5, #0]
 80013b0:	d032      	beq.n	8001418 <__sflush_r+0x98>
 80013b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80013b4:	89a3      	ldrh	r3, [r4, #12]
 80013b6:	075a      	lsls	r2, r3, #29
 80013b8:	d505      	bpl.n	80013c6 <__sflush_r+0x46>
 80013ba:	6863      	ldr	r3, [r4, #4]
 80013bc:	1ac0      	subs	r0, r0, r3
 80013be:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80013c0:	b10b      	cbz	r3, 80013c6 <__sflush_r+0x46>
 80013c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80013c4:	1ac0      	subs	r0, r0, r3
 80013c6:	2300      	movs	r3, #0
 80013c8:	4602      	mov	r2, r0
 80013ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80013cc:	6a21      	ldr	r1, [r4, #32]
 80013ce:	4628      	mov	r0, r5
 80013d0:	47b0      	blx	r6
 80013d2:	1c43      	adds	r3, r0, #1
 80013d4:	89a3      	ldrh	r3, [r4, #12]
 80013d6:	d106      	bne.n	80013e6 <__sflush_r+0x66>
 80013d8:	6829      	ldr	r1, [r5, #0]
 80013da:	291d      	cmp	r1, #29
 80013dc:	d82c      	bhi.n	8001438 <__sflush_r+0xb8>
 80013de:	4a2a      	ldr	r2, [pc, #168]	; (8001488 <__sflush_r+0x108>)
 80013e0:	40ca      	lsrs	r2, r1
 80013e2:	07d6      	lsls	r6, r2, #31
 80013e4:	d528      	bpl.n	8001438 <__sflush_r+0xb8>
 80013e6:	2200      	movs	r2, #0
 80013e8:	6062      	str	r2, [r4, #4]
 80013ea:	04d9      	lsls	r1, r3, #19
 80013ec:	6922      	ldr	r2, [r4, #16]
 80013ee:	6022      	str	r2, [r4, #0]
 80013f0:	d504      	bpl.n	80013fc <__sflush_r+0x7c>
 80013f2:	1c42      	adds	r2, r0, #1
 80013f4:	d101      	bne.n	80013fa <__sflush_r+0x7a>
 80013f6:	682b      	ldr	r3, [r5, #0]
 80013f8:	b903      	cbnz	r3, 80013fc <__sflush_r+0x7c>
 80013fa:	6560      	str	r0, [r4, #84]	; 0x54
 80013fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80013fe:	602f      	str	r7, [r5, #0]
 8001400:	2900      	cmp	r1, #0
 8001402:	d0ca      	beq.n	800139a <__sflush_r+0x1a>
 8001404:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001408:	4299      	cmp	r1, r3
 800140a:	d002      	beq.n	8001412 <__sflush_r+0x92>
 800140c:	4628      	mov	r0, r5
 800140e:	f000 f8fd 	bl	800160c <_free_r>
 8001412:	2000      	movs	r0, #0
 8001414:	6360      	str	r0, [r4, #52]	; 0x34
 8001416:	e7c1      	b.n	800139c <__sflush_r+0x1c>
 8001418:	6a21      	ldr	r1, [r4, #32]
 800141a:	2301      	movs	r3, #1
 800141c:	4628      	mov	r0, r5
 800141e:	47b0      	blx	r6
 8001420:	1c41      	adds	r1, r0, #1
 8001422:	d1c7      	bne.n	80013b4 <__sflush_r+0x34>
 8001424:	682b      	ldr	r3, [r5, #0]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d0c4      	beq.n	80013b4 <__sflush_r+0x34>
 800142a:	2b1d      	cmp	r3, #29
 800142c:	d001      	beq.n	8001432 <__sflush_r+0xb2>
 800142e:	2b16      	cmp	r3, #22
 8001430:	d101      	bne.n	8001436 <__sflush_r+0xb6>
 8001432:	602f      	str	r7, [r5, #0]
 8001434:	e7b1      	b.n	800139a <__sflush_r+0x1a>
 8001436:	89a3      	ldrh	r3, [r4, #12]
 8001438:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800143c:	81a3      	strh	r3, [r4, #12]
 800143e:	e7ad      	b.n	800139c <__sflush_r+0x1c>
 8001440:	690f      	ldr	r7, [r1, #16]
 8001442:	2f00      	cmp	r7, #0
 8001444:	d0a9      	beq.n	800139a <__sflush_r+0x1a>
 8001446:	0793      	lsls	r3, r2, #30
 8001448:	680e      	ldr	r6, [r1, #0]
 800144a:	bf08      	it	eq
 800144c:	694b      	ldreq	r3, [r1, #20]
 800144e:	600f      	str	r7, [r1, #0]
 8001450:	bf18      	it	ne
 8001452:	2300      	movne	r3, #0
 8001454:	eba6 0807 	sub.w	r8, r6, r7
 8001458:	608b      	str	r3, [r1, #8]
 800145a:	f1b8 0f00 	cmp.w	r8, #0
 800145e:	dd9c      	ble.n	800139a <__sflush_r+0x1a>
 8001460:	6a21      	ldr	r1, [r4, #32]
 8001462:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8001464:	4643      	mov	r3, r8
 8001466:	463a      	mov	r2, r7
 8001468:	4628      	mov	r0, r5
 800146a:	47b0      	blx	r6
 800146c:	2800      	cmp	r0, #0
 800146e:	dc06      	bgt.n	800147e <__sflush_r+0xfe>
 8001470:	89a3      	ldrh	r3, [r4, #12]
 8001472:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001476:	81a3      	strh	r3, [r4, #12]
 8001478:	f04f 30ff 	mov.w	r0, #4294967295
 800147c:	e78e      	b.n	800139c <__sflush_r+0x1c>
 800147e:	4407      	add	r7, r0
 8001480:	eba8 0800 	sub.w	r8, r8, r0
 8001484:	e7e9      	b.n	800145a <__sflush_r+0xda>
 8001486:	bf00      	nop
 8001488:	20400001 	.word	0x20400001

0800148c <_fflush_r>:
 800148c:	b538      	push	{r3, r4, r5, lr}
 800148e:	690b      	ldr	r3, [r1, #16]
 8001490:	4605      	mov	r5, r0
 8001492:	460c      	mov	r4, r1
 8001494:	b913      	cbnz	r3, 800149c <_fflush_r+0x10>
 8001496:	2500      	movs	r5, #0
 8001498:	4628      	mov	r0, r5
 800149a:	bd38      	pop	{r3, r4, r5, pc}
 800149c:	b118      	cbz	r0, 80014a6 <_fflush_r+0x1a>
 800149e:	6983      	ldr	r3, [r0, #24]
 80014a0:	b90b      	cbnz	r3, 80014a6 <_fflush_r+0x1a>
 80014a2:	f7ff fa15 	bl	80008d0 <__sinit>
 80014a6:	4b14      	ldr	r3, [pc, #80]	; (80014f8 <_fflush_r+0x6c>)
 80014a8:	429c      	cmp	r4, r3
 80014aa:	d11b      	bne.n	80014e4 <_fflush_r+0x58>
 80014ac:	686c      	ldr	r4, [r5, #4]
 80014ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d0ef      	beq.n	8001496 <_fflush_r+0xa>
 80014b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80014b8:	07d0      	lsls	r0, r2, #31
 80014ba:	d404      	bmi.n	80014c6 <_fflush_r+0x3a>
 80014bc:	0599      	lsls	r1, r3, #22
 80014be:	d402      	bmi.n	80014c6 <_fflush_r+0x3a>
 80014c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80014c2:	f7ff faa3 	bl	8000a0c <__retarget_lock_acquire_recursive>
 80014c6:	4628      	mov	r0, r5
 80014c8:	4621      	mov	r1, r4
 80014ca:	f7ff ff59 	bl	8001380 <__sflush_r>
 80014ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80014d0:	07da      	lsls	r2, r3, #31
 80014d2:	4605      	mov	r5, r0
 80014d4:	d4e0      	bmi.n	8001498 <_fflush_r+0xc>
 80014d6:	89a3      	ldrh	r3, [r4, #12]
 80014d8:	059b      	lsls	r3, r3, #22
 80014da:	d4dd      	bmi.n	8001498 <_fflush_r+0xc>
 80014dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80014de:	f7ff fa96 	bl	8000a0e <__retarget_lock_release_recursive>
 80014e2:	e7d9      	b.n	8001498 <_fflush_r+0xc>
 80014e4:	4b05      	ldr	r3, [pc, #20]	; (80014fc <_fflush_r+0x70>)
 80014e6:	429c      	cmp	r4, r3
 80014e8:	d101      	bne.n	80014ee <_fflush_r+0x62>
 80014ea:	68ac      	ldr	r4, [r5, #8]
 80014ec:	e7df      	b.n	80014ae <_fflush_r+0x22>
 80014ee:	4b04      	ldr	r3, [pc, #16]	; (8001500 <_fflush_r+0x74>)
 80014f0:	429c      	cmp	r4, r3
 80014f2:	bf08      	it	eq
 80014f4:	68ec      	ldreq	r4, [r5, #12]
 80014f6:	e7da      	b.n	80014ae <_fflush_r+0x22>
 80014f8:	0800175c 	.word	0x0800175c
 80014fc:	0800177c 	.word	0x0800177c
 8001500:	0800173c 	.word	0x0800173c

08001504 <_lseek_r>:
 8001504:	b538      	push	{r3, r4, r5, lr}
 8001506:	4d07      	ldr	r5, [pc, #28]	; (8001524 <_lseek_r+0x20>)
 8001508:	4604      	mov	r4, r0
 800150a:	4608      	mov	r0, r1
 800150c:	4611      	mov	r1, r2
 800150e:	2200      	movs	r2, #0
 8001510:	602a      	str	r2, [r5, #0]
 8001512:	461a      	mov	r2, r3
 8001514:	f7fe fff6 	bl	8000504 <_lseek>
 8001518:	1c43      	adds	r3, r0, #1
 800151a:	d102      	bne.n	8001522 <_lseek_r+0x1e>
 800151c:	682b      	ldr	r3, [r5, #0]
 800151e:	b103      	cbz	r3, 8001522 <_lseek_r+0x1e>
 8001520:	6023      	str	r3, [r4, #0]
 8001522:	bd38      	pop	{r3, r4, r5, pc}
 8001524:	20000094 	.word	0x20000094

08001528 <__swhatbuf_r>:
 8001528:	b570      	push	{r4, r5, r6, lr}
 800152a:	460e      	mov	r6, r1
 800152c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001530:	2900      	cmp	r1, #0
 8001532:	b096      	sub	sp, #88	; 0x58
 8001534:	4614      	mov	r4, r2
 8001536:	461d      	mov	r5, r3
 8001538:	da08      	bge.n	800154c <__swhatbuf_r+0x24>
 800153a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800153e:	2200      	movs	r2, #0
 8001540:	602a      	str	r2, [r5, #0]
 8001542:	061a      	lsls	r2, r3, #24
 8001544:	d410      	bmi.n	8001568 <__swhatbuf_r+0x40>
 8001546:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800154a:	e00e      	b.n	800156a <__swhatbuf_r+0x42>
 800154c:	466a      	mov	r2, sp
 800154e:	f000 f8bb 	bl	80016c8 <_fstat_r>
 8001552:	2800      	cmp	r0, #0
 8001554:	dbf1      	blt.n	800153a <__swhatbuf_r+0x12>
 8001556:	9a01      	ldr	r2, [sp, #4]
 8001558:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800155c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8001560:	425a      	negs	r2, r3
 8001562:	415a      	adcs	r2, r3
 8001564:	602a      	str	r2, [r5, #0]
 8001566:	e7ee      	b.n	8001546 <__swhatbuf_r+0x1e>
 8001568:	2340      	movs	r3, #64	; 0x40
 800156a:	2000      	movs	r0, #0
 800156c:	6023      	str	r3, [r4, #0]
 800156e:	b016      	add	sp, #88	; 0x58
 8001570:	bd70      	pop	{r4, r5, r6, pc}
	...

08001574 <__smakebuf_r>:
 8001574:	898b      	ldrh	r3, [r1, #12]
 8001576:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001578:	079d      	lsls	r5, r3, #30
 800157a:	4606      	mov	r6, r0
 800157c:	460c      	mov	r4, r1
 800157e:	d507      	bpl.n	8001590 <__smakebuf_r+0x1c>
 8001580:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001584:	6023      	str	r3, [r4, #0]
 8001586:	6123      	str	r3, [r4, #16]
 8001588:	2301      	movs	r3, #1
 800158a:	6163      	str	r3, [r4, #20]
 800158c:	b002      	add	sp, #8
 800158e:	bd70      	pop	{r4, r5, r6, pc}
 8001590:	ab01      	add	r3, sp, #4
 8001592:	466a      	mov	r2, sp
 8001594:	f7ff ffc8 	bl	8001528 <__swhatbuf_r>
 8001598:	9900      	ldr	r1, [sp, #0]
 800159a:	4605      	mov	r5, r0
 800159c:	4630      	mov	r0, r6
 800159e:	f7ff fa57 	bl	8000a50 <_malloc_r>
 80015a2:	b948      	cbnz	r0, 80015b8 <__smakebuf_r+0x44>
 80015a4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80015a8:	059a      	lsls	r2, r3, #22
 80015aa:	d4ef      	bmi.n	800158c <__smakebuf_r+0x18>
 80015ac:	f023 0303 	bic.w	r3, r3, #3
 80015b0:	f043 0302 	orr.w	r3, r3, #2
 80015b4:	81a3      	strh	r3, [r4, #12]
 80015b6:	e7e3      	b.n	8001580 <__smakebuf_r+0xc>
 80015b8:	4b0d      	ldr	r3, [pc, #52]	; (80015f0 <__smakebuf_r+0x7c>)
 80015ba:	62b3      	str	r3, [r6, #40]	; 0x28
 80015bc:	89a3      	ldrh	r3, [r4, #12]
 80015be:	6020      	str	r0, [r4, #0]
 80015c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015c4:	81a3      	strh	r3, [r4, #12]
 80015c6:	9b00      	ldr	r3, [sp, #0]
 80015c8:	6163      	str	r3, [r4, #20]
 80015ca:	9b01      	ldr	r3, [sp, #4]
 80015cc:	6120      	str	r0, [r4, #16]
 80015ce:	b15b      	cbz	r3, 80015e8 <__smakebuf_r+0x74>
 80015d0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80015d4:	4630      	mov	r0, r6
 80015d6:	f000 f889 	bl	80016ec <_isatty_r>
 80015da:	b128      	cbz	r0, 80015e8 <__smakebuf_r+0x74>
 80015dc:	89a3      	ldrh	r3, [r4, #12]
 80015de:	f023 0303 	bic.w	r3, r3, #3
 80015e2:	f043 0301 	orr.w	r3, r3, #1
 80015e6:	81a3      	strh	r3, [r4, #12]
 80015e8:	89a0      	ldrh	r0, [r4, #12]
 80015ea:	4305      	orrs	r5, r0
 80015ec:	81a5      	strh	r5, [r4, #12]
 80015ee:	e7cd      	b.n	800158c <__smakebuf_r+0x18>
 80015f0:	08000869 	.word	0x08000869

080015f4 <__malloc_lock>:
 80015f4:	4801      	ldr	r0, [pc, #4]	; (80015fc <__malloc_lock+0x8>)
 80015f6:	f7ff ba09 	b.w	8000a0c <__retarget_lock_acquire_recursive>
 80015fa:	bf00      	nop
 80015fc:	20000088 	.word	0x20000088

08001600 <__malloc_unlock>:
 8001600:	4801      	ldr	r0, [pc, #4]	; (8001608 <__malloc_unlock+0x8>)
 8001602:	f7ff ba04 	b.w	8000a0e <__retarget_lock_release_recursive>
 8001606:	bf00      	nop
 8001608:	20000088 	.word	0x20000088

0800160c <_free_r>:
 800160c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800160e:	2900      	cmp	r1, #0
 8001610:	d044      	beq.n	800169c <_free_r+0x90>
 8001612:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001616:	9001      	str	r0, [sp, #4]
 8001618:	2b00      	cmp	r3, #0
 800161a:	f1a1 0404 	sub.w	r4, r1, #4
 800161e:	bfb8      	it	lt
 8001620:	18e4      	addlt	r4, r4, r3
 8001622:	f7ff ffe7 	bl	80015f4 <__malloc_lock>
 8001626:	4a1e      	ldr	r2, [pc, #120]	; (80016a0 <_free_r+0x94>)
 8001628:	9801      	ldr	r0, [sp, #4]
 800162a:	6813      	ldr	r3, [r2, #0]
 800162c:	b933      	cbnz	r3, 800163c <_free_r+0x30>
 800162e:	6063      	str	r3, [r4, #4]
 8001630:	6014      	str	r4, [r2, #0]
 8001632:	b003      	add	sp, #12
 8001634:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8001638:	f7ff bfe2 	b.w	8001600 <__malloc_unlock>
 800163c:	42a3      	cmp	r3, r4
 800163e:	d908      	bls.n	8001652 <_free_r+0x46>
 8001640:	6825      	ldr	r5, [r4, #0]
 8001642:	1961      	adds	r1, r4, r5
 8001644:	428b      	cmp	r3, r1
 8001646:	bf01      	itttt	eq
 8001648:	6819      	ldreq	r1, [r3, #0]
 800164a:	685b      	ldreq	r3, [r3, #4]
 800164c:	1949      	addeq	r1, r1, r5
 800164e:	6021      	streq	r1, [r4, #0]
 8001650:	e7ed      	b.n	800162e <_free_r+0x22>
 8001652:	461a      	mov	r2, r3
 8001654:	685b      	ldr	r3, [r3, #4]
 8001656:	b10b      	cbz	r3, 800165c <_free_r+0x50>
 8001658:	42a3      	cmp	r3, r4
 800165a:	d9fa      	bls.n	8001652 <_free_r+0x46>
 800165c:	6811      	ldr	r1, [r2, #0]
 800165e:	1855      	adds	r5, r2, r1
 8001660:	42a5      	cmp	r5, r4
 8001662:	d10b      	bne.n	800167c <_free_r+0x70>
 8001664:	6824      	ldr	r4, [r4, #0]
 8001666:	4421      	add	r1, r4
 8001668:	1854      	adds	r4, r2, r1
 800166a:	42a3      	cmp	r3, r4
 800166c:	6011      	str	r1, [r2, #0]
 800166e:	d1e0      	bne.n	8001632 <_free_r+0x26>
 8001670:	681c      	ldr	r4, [r3, #0]
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	6053      	str	r3, [r2, #4]
 8001676:	4421      	add	r1, r4
 8001678:	6011      	str	r1, [r2, #0]
 800167a:	e7da      	b.n	8001632 <_free_r+0x26>
 800167c:	d902      	bls.n	8001684 <_free_r+0x78>
 800167e:	230c      	movs	r3, #12
 8001680:	6003      	str	r3, [r0, #0]
 8001682:	e7d6      	b.n	8001632 <_free_r+0x26>
 8001684:	6825      	ldr	r5, [r4, #0]
 8001686:	1961      	adds	r1, r4, r5
 8001688:	428b      	cmp	r3, r1
 800168a:	bf04      	itt	eq
 800168c:	6819      	ldreq	r1, [r3, #0]
 800168e:	685b      	ldreq	r3, [r3, #4]
 8001690:	6063      	str	r3, [r4, #4]
 8001692:	bf04      	itt	eq
 8001694:	1949      	addeq	r1, r1, r5
 8001696:	6021      	streq	r1, [r4, #0]
 8001698:	6054      	str	r4, [r2, #4]
 800169a:	e7ca      	b.n	8001632 <_free_r+0x26>
 800169c:	b003      	add	sp, #12
 800169e:	bd30      	pop	{r4, r5, pc}
 80016a0:	2000008c 	.word	0x2000008c

080016a4 <_read_r>:
 80016a4:	b538      	push	{r3, r4, r5, lr}
 80016a6:	4d07      	ldr	r5, [pc, #28]	; (80016c4 <_read_r+0x20>)
 80016a8:	4604      	mov	r4, r0
 80016aa:	4608      	mov	r0, r1
 80016ac:	4611      	mov	r1, r2
 80016ae:	2200      	movs	r2, #0
 80016b0:	602a      	str	r2, [r5, #0]
 80016b2:	461a      	mov	r2, r3
 80016b4:	f7fe fec6 	bl	8000444 <_read>
 80016b8:	1c43      	adds	r3, r0, #1
 80016ba:	d102      	bne.n	80016c2 <_read_r+0x1e>
 80016bc:	682b      	ldr	r3, [r5, #0]
 80016be:	b103      	cbz	r3, 80016c2 <_read_r+0x1e>
 80016c0:	6023      	str	r3, [r4, #0]
 80016c2:	bd38      	pop	{r3, r4, r5, pc}
 80016c4:	20000094 	.word	0x20000094

080016c8 <_fstat_r>:
 80016c8:	b538      	push	{r3, r4, r5, lr}
 80016ca:	4d07      	ldr	r5, [pc, #28]	; (80016e8 <_fstat_r+0x20>)
 80016cc:	2300      	movs	r3, #0
 80016ce:	4604      	mov	r4, r0
 80016d0:	4608      	mov	r0, r1
 80016d2:	4611      	mov	r1, r2
 80016d4:	602b      	str	r3, [r5, #0]
 80016d6:	f7fe fefa 	bl	80004ce <_fstat>
 80016da:	1c43      	adds	r3, r0, #1
 80016dc:	d102      	bne.n	80016e4 <_fstat_r+0x1c>
 80016de:	682b      	ldr	r3, [r5, #0]
 80016e0:	b103      	cbz	r3, 80016e4 <_fstat_r+0x1c>
 80016e2:	6023      	str	r3, [r4, #0]
 80016e4:	bd38      	pop	{r3, r4, r5, pc}
 80016e6:	bf00      	nop
 80016e8:	20000094 	.word	0x20000094

080016ec <_isatty_r>:
 80016ec:	b538      	push	{r3, r4, r5, lr}
 80016ee:	4d06      	ldr	r5, [pc, #24]	; (8001708 <_isatty_r+0x1c>)
 80016f0:	2300      	movs	r3, #0
 80016f2:	4604      	mov	r4, r0
 80016f4:	4608      	mov	r0, r1
 80016f6:	602b      	str	r3, [r5, #0]
 80016f8:	f7fe fef9 	bl	80004ee <_isatty>
 80016fc:	1c43      	adds	r3, r0, #1
 80016fe:	d102      	bne.n	8001706 <_isatty_r+0x1a>
 8001700:	682b      	ldr	r3, [r5, #0]
 8001702:	b103      	cbz	r3, 8001706 <_isatty_r+0x1a>
 8001704:	6023      	str	r3, [r4, #0]
 8001706:	bd38      	pop	{r3, r4, r5, pc}
 8001708:	20000094 	.word	0x20000094

0800170c <_init>:
 800170c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800170e:	bf00      	nop
 8001710:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8001712:	bc08      	pop	{r3}
 8001714:	469e      	mov	lr, r3
 8001716:	4770      	bx	lr

08001718 <_fini>:
 8001718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800171a:	bf00      	nop
 800171c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800171e:	bc08      	pop	{r3}
 8001720:	469e      	mov	lr, r3
 8001722:	4770      	bx	lr
