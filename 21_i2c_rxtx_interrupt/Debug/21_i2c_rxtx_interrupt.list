
21_i2c_rxtx_interrupt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001328  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a4  080014f0  080014f0  000114f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08001594  08001594  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  08001594  08001594  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08001594  08001594  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08001594  08001594  00011594  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08001598  08001598  00011598  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800159c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000038  2000006c  08001608  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200000a4  08001608  000200a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000020f5  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000099c  00000000  00000000  00022191  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000240  00000000  00000000  00022b30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001c8  00000000  00000000  00022d70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ddb5  00000000  00000000  00022f38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000029dd  00000000  00000000  00040ced  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a26db  00000000  00000000  000436ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e5da5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000dd0  00000000  00000000  000e5df8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000006c 	.word	0x2000006c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	080014d8 	.word	0x080014d8

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000070 	.word	0x20000070
 8000204:	080014d8 	.word	0x080014d8

08000208 <set_pin_mode>:
#include "stm32f7xx.h"

#include "gpio.h"

void set_pin_mode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000208:	b480      	push	{r7}
 800020a:	b089      	sub	sp, #36	; 0x24
 800020c:	af00      	add	r7, sp, #0
 800020e:	60f8      	str	r0, [r7, #12]
 8000210:	60b9      	str	r1, [r7, #8]
 8000212:	607a      	str	r2, [r7, #4]
	 *
	 * Mode = 0b 10 = 0x2
	 * 2 << 16 ==>  bit16 =0, bit 17 =1
	 * */

	MODIFY_REG(GPIOx->MODER, (0x3 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000214:	68fb      	ldr	r3, [r7, #12]
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	68ba      	ldr	r2, [r7, #8]
 800021a:	617a      	str	r2, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800021c:	697a      	ldr	r2, [r7, #20]
 800021e:	fa92 f2a2 	rbit	r2, r2
 8000222:	613a      	str	r2, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000224:	693a      	ldr	r2, [r7, #16]
 8000226:	fab2 f282 	clz	r2, r2
 800022a:	b2d2      	uxtb	r2, r2
 800022c:	0052      	lsls	r2, r2, #1
 800022e:	2103      	movs	r1, #3
 8000230:	fa01 f202 	lsl.w	r2, r1, r2
 8000234:	43d2      	mvns	r2, r2
 8000236:	401a      	ands	r2, r3
 8000238:	68bb      	ldr	r3, [r7, #8]
 800023a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800023c:	69fb      	ldr	r3, [r7, #28]
 800023e:	fa93 f3a3 	rbit	r3, r3
 8000242:	61bb      	str	r3, [r7, #24]
  return result;
 8000244:	69bb      	ldr	r3, [r7, #24]
 8000246:	fab3 f383 	clz	r3, r3
 800024a:	b2db      	uxtb	r3, r3
 800024c:	005b      	lsls	r3, r3, #1
 800024e:	6879      	ldr	r1, [r7, #4]
 8000250:	fa01 f303 	lsl.w	r3, r1, r3
 8000254:	431a      	orrs	r2, r3
 8000256:	68fb      	ldr	r3, [r7, #12]
 8000258:	601a      	str	r2, [r3, #0]
}
 800025a:	bf00      	nop
 800025c:	3724      	adds	r7, #36	; 0x24
 800025e:	46bd      	mov	sp, r7
 8000260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000264:	4770      	bx	lr
	...

08000268 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000268:	b480      	push	{r7}
 800026a:	b083      	sub	sp, #12
 800026c:	af00      	add	r7, sp, #0
 800026e:	4603      	mov	r3, r0
 8000270:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000276:	2b00      	cmp	r3, #0
 8000278:	db0b      	blt.n	8000292 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	f003 021f 	and.w	r2, r3, #31
 8000280:	4907      	ldr	r1, [pc, #28]	; (80002a0 <__NVIC_EnableIRQ+0x38>)
 8000282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000286:	095b      	lsrs	r3, r3, #5
 8000288:	2001      	movs	r0, #1
 800028a:	fa00 f202 	lsl.w	r2, r0, r2
 800028e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000292:	bf00      	nop
 8000294:	370c      	adds	r7, #12
 8000296:	46bd      	mov	sp, r7
 8000298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop
 80002a0:	e000e100 	.word	0xe000e100

080002a4 <i2c2_slave_config>:
#define I2C_TIMING			0x00303D5B

static void i2c2_setOwnAddress1(uint32_t OwnAddress1, uint32_t OwnAddrSize);

void i2c2_slave_config(void)
{
 80002a4:	b580      	push	{r7, lr}
 80002a6:	af00      	add	r7, sp, #0
	/* Enable the peripheral clock of GPIOB */
	RCC->AHB1ENR |= GPIOBEN;
 80002a8:	4b52      	ldr	r3, [pc, #328]	; (80003f4 <i2c2_slave_config+0x150>)
 80002aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ac:	4a51      	ldr	r2, [pc, #324]	; (80003f4 <i2c2_slave_config+0x150>)
 80002ae:	f043 0302 	orr.w	r3, r3, #2
 80002b2:	6313      	str	r3, [r2, #48]	; 0x30

	/*---------------------- I2C Slave - PIN PB10 - SCL --------------------------*/
	/* Configure PB10 mode to alternate function */
	GPIOB->MODER &= ~(1U << 20);
 80002b4:	4b50      	ldr	r3, [pc, #320]	; (80003f8 <i2c2_slave_config+0x154>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	4a4f      	ldr	r2, [pc, #316]	; (80003f8 <i2c2_slave_config+0x154>)
 80002ba:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80002be:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U << 21);
 80002c0:	4b4d      	ldr	r3, [pc, #308]	; (80003f8 <i2c2_slave_config+0x154>)
 80002c2:	681b      	ldr	r3, [r3, #0]
 80002c4:	4a4c      	ldr	r2, [pc, #304]	; (80003f8 <i2c2_slave_config+0x154>)
 80002c6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80002ca:	6013      	str	r3, [r2, #0]

	/* Select alternate function type as AF4 (I2C_SCL)*/
	GPIOB->AFR[1] &= ~(1U << 8);
 80002cc:	4b4a      	ldr	r3, [pc, #296]	; (80003f8 <i2c2_slave_config+0x154>)
 80002ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002d0:	4a49      	ldr	r2, [pc, #292]	; (80003f8 <i2c2_slave_config+0x154>)
 80002d2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80002d6:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] &= ~(1U << 9);
 80002d8:	4b47      	ldr	r3, [pc, #284]	; (80003f8 <i2c2_slave_config+0x154>)
 80002da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002dc:	4a46      	ldr	r2, [pc, #280]	; (80003f8 <i2c2_slave_config+0x154>)
 80002de:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80002e2:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] |= (1U << 10);
 80002e4:	4b44      	ldr	r3, [pc, #272]	; (80003f8 <i2c2_slave_config+0x154>)
 80002e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002e8:	4a43      	ldr	r2, [pc, #268]	; (80003f8 <i2c2_slave_config+0x154>)
 80002ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80002ee:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] &= ~(1U << 11);
 80002f0:	4b41      	ldr	r3, [pc, #260]	; (80003f8 <i2c2_slave_config+0x154>)
 80002f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80002f4:	4a40      	ldr	r2, [pc, #256]	; (80003f8 <i2c2_slave_config+0x154>)
 80002f6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80002fa:	6253      	str	r3, [r2, #36]	; 0x24

	/* Set pin output type to open drain */
	GPIOB->OTYPER |= (1U << 10);
 80002fc:	4b3e      	ldr	r3, [pc, #248]	; (80003f8 <i2c2_slave_config+0x154>)
 80002fe:	685b      	ldr	r3, [r3, #4]
 8000300:	4a3d      	ldr	r2, [pc, #244]	; (80003f8 <i2c2_slave_config+0x154>)
 8000302:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000306:	6053      	str	r3, [r2, #4]

	/* Enable internal pull up resistor */
	GPIOB->PUPDR |= (1U << 20);
 8000308:	4b3b      	ldr	r3, [pc, #236]	; (80003f8 <i2c2_slave_config+0x154>)
 800030a:	68db      	ldr	r3, [r3, #12]
 800030c:	4a3a      	ldr	r2, [pc, #232]	; (80003f8 <i2c2_slave_config+0x154>)
 800030e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000312:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &= ~(1U << 21);
 8000314:	4b38      	ldr	r3, [pc, #224]	; (80003f8 <i2c2_slave_config+0x154>)
 8000316:	68db      	ldr	r3, [r3, #12]
 8000318:	4a37      	ldr	r2, [pc, #220]	; (80003f8 <i2c2_slave_config+0x154>)
 800031a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800031e:	60d3      	str	r3, [r2, #12]

	/*---------------------- I2C Slave - PIN PB11 - SDA --------------------------*/
	/* Configure PB11 mode to alternate function */
	GPIOB->MODER &= ~(1U << 22);
 8000320:	4b35      	ldr	r3, [pc, #212]	; (80003f8 <i2c2_slave_config+0x154>)
 8000322:	681b      	ldr	r3, [r3, #0]
 8000324:	4a34      	ldr	r2, [pc, #208]	; (80003f8 <i2c2_slave_config+0x154>)
 8000326:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 800032a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U << 23);
 800032c:	4b32      	ldr	r3, [pc, #200]	; (80003f8 <i2c2_slave_config+0x154>)
 800032e:	681b      	ldr	r3, [r3, #0]
 8000330:	4a31      	ldr	r2, [pc, #196]	; (80003f8 <i2c2_slave_config+0x154>)
 8000332:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8000336:	6013      	str	r3, [r2, #0]

	/* Select alternate function type as AF4 (I2C_SCL)*/
	GPIOB->AFR[1] &= ~(1U << 12);
 8000338:	4b2f      	ldr	r3, [pc, #188]	; (80003f8 <i2c2_slave_config+0x154>)
 800033a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800033c:	4a2e      	ldr	r2, [pc, #184]	; (80003f8 <i2c2_slave_config+0x154>)
 800033e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000342:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] &= ~(1U << 13);
 8000344:	4b2c      	ldr	r3, [pc, #176]	; (80003f8 <i2c2_slave_config+0x154>)
 8000346:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000348:	4a2b      	ldr	r2, [pc, #172]	; (80003f8 <i2c2_slave_config+0x154>)
 800034a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800034e:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] |= (1U << 14);
 8000350:	4b29      	ldr	r3, [pc, #164]	; (80003f8 <i2c2_slave_config+0x154>)
 8000352:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000354:	4a28      	ldr	r2, [pc, #160]	; (80003f8 <i2c2_slave_config+0x154>)
 8000356:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800035a:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] &= ~(1U << 15);
 800035c:	4b26      	ldr	r3, [pc, #152]	; (80003f8 <i2c2_slave_config+0x154>)
 800035e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000360:	4a25      	ldr	r2, [pc, #148]	; (80003f8 <i2c2_slave_config+0x154>)
 8000362:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000366:	6253      	str	r3, [r2, #36]	; 0x24

	/* Set pin output type to open drain */
	GPIOB->OTYPER |= (1U << 11);
 8000368:	4b23      	ldr	r3, [pc, #140]	; (80003f8 <i2c2_slave_config+0x154>)
 800036a:	685b      	ldr	r3, [r3, #4]
 800036c:	4a22      	ldr	r2, [pc, #136]	; (80003f8 <i2c2_slave_config+0x154>)
 800036e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000372:	6053      	str	r3, [r2, #4]

	/* Enable internal pull up resistor */
	GPIOB->PUPDR |= (1U << 22);
 8000374:	4b20      	ldr	r3, [pc, #128]	; (80003f8 <i2c2_slave_config+0x154>)
 8000376:	68db      	ldr	r3, [r3, #12]
 8000378:	4a1f      	ldr	r2, [pc, #124]	; (80003f8 <i2c2_slave_config+0x154>)
 800037a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800037e:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &= ~(1U << 23);
 8000380:	4b1d      	ldr	r3, [pc, #116]	; (80003f8 <i2c2_slave_config+0x154>)
 8000382:	68db      	ldr	r3, [r3, #12]
 8000384:	4a1c      	ldr	r2, [pc, #112]	; (80003f8 <i2c2_slave_config+0x154>)
 8000386:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800038a:	60d3      	str	r3, [r2, #12]

	/*---------- Configure I2C Parameters -------------------*/
	/* Enable the Clock access to the I2C module */
	RCC->APB1ENR |= I2C2EN;
 800038c:	4b19      	ldr	r3, [pc, #100]	; (80003f4 <i2c2_slave_config+0x150>)
 800038e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000390:	4a18      	ldr	r2, [pc, #96]	; (80003f4 <i2c2_slave_config+0x150>)
 8000392:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000396:	6413      	str	r3, [r2, #64]	; 0x40

	/* Enable I2C interrupt in the NVIC */
    NVIC_EnableIRQ(I2C2_EV_IRQn);
 8000398:	2021      	movs	r0, #33	; 0x21
 800039a:	f7ff ff65 	bl	8000268 <__NVIC_EnableIRQ>

	/* Disable I2C module */
    // I2C_CR1
    I2C2->CR1 &= ~(1U << 0);
 800039e:	4b17      	ldr	r3, [pc, #92]	; (80003fc <i2c2_slave_config+0x158>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	4a16      	ldr	r2, [pc, #88]	; (80003fc <i2c2_slave_config+0x158>)
 80003a4:	f023 0301 	bic.w	r3, r3, #1
 80003a8:	6013      	str	r3, [r2, #0]

	/* Set device address */
    i2c2_setOwnAddress1(SLAVE_OWN_ADDRESS, 0);
 80003aa:	2100      	movs	r1, #0
 80003ac:	205a      	movs	r0, #90	; 0x5a
 80003ae:	f000 f8bd 	bl	800052c <i2c2_setOwnAddress1>

    /* Enable Own address */
    I2C2->OAR1 |= (1U << 15);
 80003b2:	4b12      	ldr	r3, [pc, #72]	; (80003fc <i2c2_slave_config+0x158>)
 80003b4:	689b      	ldr	r3, [r3, #8]
 80003b6:	4a11      	ldr	r2, [pc, #68]	; (80003fc <i2c2_slave_config+0x158>)
 80003b8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80003bc:	6093      	str	r3, [r2, #8]

	/* Enable I2C module */
    I2C2->CR1 |= (1U << 0);
 80003be:	4b0f      	ldr	r3, [pc, #60]	; (80003fc <i2c2_slave_config+0x158>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	4a0e      	ldr	r2, [pc, #56]	; (80003fc <i2c2_slave_config+0x158>)
 80003c4:	f043 0301 	orr.w	r3, r3, #1
 80003c8:	6013      	str	r3, [r2, #0]

	/* Enable ADDR Interrupt */
    I2C2->CR1 |= (1U << 3);
 80003ca:	4b0c      	ldr	r3, [pc, #48]	; (80003fc <i2c2_slave_config+0x158>)
 80003cc:	681b      	ldr	r3, [r3, #0]
 80003ce:	4a0b      	ldr	r2, [pc, #44]	; (80003fc <i2c2_slave_config+0x158>)
 80003d0:	f043 0308 	orr.w	r3, r3, #8
 80003d4:	6013      	str	r3, [r2, #0]

	/* Enable NACK Interrupt */
    I2C2->CR1 |= (1U << 4);
 80003d6:	4b09      	ldr	r3, [pc, #36]	; (80003fc <i2c2_slave_config+0x158>)
 80003d8:	681b      	ldr	r3, [r3, #0]
 80003da:	4a08      	ldr	r2, [pc, #32]	; (80003fc <i2c2_slave_config+0x158>)
 80003dc:	f043 0310 	orr.w	r3, r3, #16
 80003e0:	6013      	str	r3, [r2, #0]

	/* Enable STOP Interrupt */
    I2C2->CR1 |= (1U << 5);
 80003e2:	4b06      	ldr	r3, [pc, #24]	; (80003fc <i2c2_slave_config+0x158>)
 80003e4:	681b      	ldr	r3, [r3, #0]
 80003e6:	4a05      	ldr	r2, [pc, #20]	; (80003fc <i2c2_slave_config+0x158>)
 80003e8:	f043 0320 	orr.w	r3, r3, #32
 80003ec:	6013      	str	r3, [r2, #0]
}
 80003ee:	bf00      	nop
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	40023800 	.word	0x40023800
 80003f8:	40020400 	.word	0x40020400
 80003fc:	40005800 	.word	0x40005800

08000400 <i2c1_master_config>:

// I2C1
// SCL - PB6
// SDA - PB7
void i2c1_master_config(void)
{
 8000400:	b480      	push	{r7}
 8000402:	af00      	add	r7, sp, #0
	/* Enable the peripheral clock of GPIOB */
	RCC->AHB1ENR |= GPIOBEN;
 8000404:	4b45      	ldr	r3, [pc, #276]	; (800051c <i2c1_master_config+0x11c>)
 8000406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000408:	4a44      	ldr	r2, [pc, #272]	; (800051c <i2c1_master_config+0x11c>)
 800040a:	f043 0302 	orr.w	r3, r3, #2
 800040e:	6313      	str	r3, [r2, #48]	; 0x30

	/* I2C1 SCL Pin PB6 as : Alternate function, open drain, pull up*/
	GPIOB->MODER &= ~(1U << 12);
 8000410:	4b43      	ldr	r3, [pc, #268]	; (8000520 <i2c1_master_config+0x120>)
 8000412:	681b      	ldr	r3, [r3, #0]
 8000414:	4a42      	ldr	r2, [pc, #264]	; (8000520 <i2c1_master_config+0x120>)
 8000416:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800041a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U << 13);
 800041c:	4b40      	ldr	r3, [pc, #256]	; (8000520 <i2c1_master_config+0x120>)
 800041e:	681b      	ldr	r3, [r3, #0]
 8000420:	4a3f      	ldr	r2, [pc, #252]	; (8000520 <i2c1_master_config+0x120>)
 8000422:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000426:	6013      	str	r3, [r2, #0]

	GPIOB->AFR[0] &= ~(1U << 24);
 8000428:	4b3d      	ldr	r3, [pc, #244]	; (8000520 <i2c1_master_config+0x120>)
 800042a:	6a1b      	ldr	r3, [r3, #32]
 800042c:	4a3c      	ldr	r2, [pc, #240]	; (8000520 <i2c1_master_config+0x120>)
 800042e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8000432:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] &= ~(1U << 25);
 8000434:	4b3a      	ldr	r3, [pc, #232]	; (8000520 <i2c1_master_config+0x120>)
 8000436:	6a1b      	ldr	r3, [r3, #32]
 8000438:	4a39      	ldr	r2, [pc, #228]	; (8000520 <i2c1_master_config+0x120>)
 800043a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800043e:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] |= (1U << 26);
 8000440:	4b37      	ldr	r3, [pc, #220]	; (8000520 <i2c1_master_config+0x120>)
 8000442:	6a1b      	ldr	r3, [r3, #32]
 8000444:	4a36      	ldr	r2, [pc, #216]	; (8000520 <i2c1_master_config+0x120>)
 8000446:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800044a:	6213      	str	r3, [r2, #32]
	GPIOB->AFR[0] &= ~(1U << 27);
 800044c:	4b34      	ldr	r3, [pc, #208]	; (8000520 <i2c1_master_config+0x120>)
 800044e:	6a1b      	ldr	r3, [r3, #32]
 8000450:	4a33      	ldr	r2, [pc, #204]	; (8000520 <i2c1_master_config+0x120>)
 8000452:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
 8000456:	6213      	str	r3, [r2, #32]

	GPIOB->OTYPER |= (1U << 6);
 8000458:	4b31      	ldr	r3, [pc, #196]	; (8000520 <i2c1_master_config+0x120>)
 800045a:	685b      	ldr	r3, [r3, #4]
 800045c:	4a30      	ldr	r2, [pc, #192]	; (8000520 <i2c1_master_config+0x120>)
 800045e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000462:	6053      	str	r3, [r2, #4]

	GPIOB->PUPDR |= (1U << 12);
 8000464:	4b2e      	ldr	r3, [pc, #184]	; (8000520 <i2c1_master_config+0x120>)
 8000466:	68db      	ldr	r3, [r3, #12]
 8000468:	4a2d      	ldr	r2, [pc, #180]	; (8000520 <i2c1_master_config+0x120>)
 800046a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800046e:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &= ~(1U << 13);
 8000470:	4b2b      	ldr	r3, [pc, #172]	; (8000520 <i2c1_master_config+0x120>)
 8000472:	68db      	ldr	r3, [r3, #12]
 8000474:	4a2a      	ldr	r2, [pc, #168]	; (8000520 <i2c1_master_config+0x120>)
 8000476:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800047a:	60d3      	str	r3, [r2, #12]

	/* I2C1 SDA Pin PB7 as : Alternate function, open drain, pull up*/
	GPIOB->MODER &= ~(1U << 18);
 800047c:	4b28      	ldr	r3, [pc, #160]	; (8000520 <i2c1_master_config+0x120>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a27      	ldr	r2, [pc, #156]	; (8000520 <i2c1_master_config+0x120>)
 8000482:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000486:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (1U << 19);
 8000488:	4b25      	ldr	r3, [pc, #148]	; (8000520 <i2c1_master_config+0x120>)
 800048a:	681b      	ldr	r3, [r3, #0]
 800048c:	4a24      	ldr	r2, [pc, #144]	; (8000520 <i2c1_master_config+0x120>)
 800048e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000492:	6013      	str	r3, [r2, #0]

	GPIOB->AFR[1] &= ~(1U << 4);
 8000494:	4b22      	ldr	r3, [pc, #136]	; (8000520 <i2c1_master_config+0x120>)
 8000496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000498:	4a21      	ldr	r2, [pc, #132]	; (8000520 <i2c1_master_config+0x120>)
 800049a:	f023 0310 	bic.w	r3, r3, #16
 800049e:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] &= ~(1U << 5);
 80004a0:	4b1f      	ldr	r3, [pc, #124]	; (8000520 <i2c1_master_config+0x120>)
 80004a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004a4:	4a1e      	ldr	r2, [pc, #120]	; (8000520 <i2c1_master_config+0x120>)
 80004a6:	f023 0320 	bic.w	r3, r3, #32
 80004aa:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] |= (1U << 6);
 80004ac:	4b1c      	ldr	r3, [pc, #112]	; (8000520 <i2c1_master_config+0x120>)
 80004ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004b0:	4a1b      	ldr	r2, [pc, #108]	; (8000520 <i2c1_master_config+0x120>)
 80004b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80004b6:	6253      	str	r3, [r2, #36]	; 0x24
	GPIOB->AFR[1] &= ~(1U << 7);
 80004b8:	4b19      	ldr	r3, [pc, #100]	; (8000520 <i2c1_master_config+0x120>)
 80004ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80004bc:	4a18      	ldr	r2, [pc, #96]	; (8000520 <i2c1_master_config+0x120>)
 80004be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80004c2:	6253      	str	r3, [r2, #36]	; 0x24

	GPIOB->OTYPER |= (1U << 9);
 80004c4:	4b16      	ldr	r3, [pc, #88]	; (8000520 <i2c1_master_config+0x120>)
 80004c6:	685b      	ldr	r3, [r3, #4]
 80004c8:	4a15      	ldr	r2, [pc, #84]	; (8000520 <i2c1_master_config+0x120>)
 80004ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80004ce:	6053      	str	r3, [r2, #4]

	GPIOB->PUPDR |= (1U << 18);
 80004d0:	4b13      	ldr	r3, [pc, #76]	; (8000520 <i2c1_master_config+0x120>)
 80004d2:	68db      	ldr	r3, [r3, #12]
 80004d4:	4a12      	ldr	r2, [pc, #72]	; (8000520 <i2c1_master_config+0x120>)
 80004d6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004da:	60d3      	str	r3, [r2, #12]
	GPIOB->PUPDR &= ~(1U << 19);
 80004dc:	4b10      	ldr	r3, [pc, #64]	; (8000520 <i2c1_master_config+0x120>)
 80004de:	68db      	ldr	r3, [r3, #12]
 80004e0:	4a0f      	ldr	r2, [pc, #60]	; (8000520 <i2c1_master_config+0x120>)
 80004e2:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80004e6:	60d3      	str	r3, [r2, #12]

	/*---------- Configure I2C Parameters -------------------*/
	RCC->APB1ENR |= I2C1EN;
 80004e8:	4b0c      	ldr	r3, [pc, #48]	; (800051c <i2c1_master_config+0x11c>)
 80004ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80004ec:	4a0b      	ldr	r2, [pc, #44]	; (800051c <i2c1_master_config+0x11c>)
 80004ee:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004f2:	6413      	str	r3, [r2, #64]	; 0x40

	I2C1->CR1 &= ~(1U << 0);
 80004f4:	4b0b      	ldr	r3, [pc, #44]	; (8000524 <i2c1_master_config+0x124>)
 80004f6:	681b      	ldr	r3, [r3, #0]
 80004f8:	4a0a      	ldr	r2, [pc, #40]	; (8000524 <i2c1_master_config+0x124>)
 80004fa:	f023 0301 	bic.w	r3, r3, #1
 80004fe:	6013      	str	r3, [r2, #0]

	// Set the timing
	I2C1->TIMINGR = I2C_TIMING;
 8000500:	4b08      	ldr	r3, [pc, #32]	; (8000524 <i2c1_master_config+0x124>)
 8000502:	4a09      	ldr	r2, [pc, #36]	; (8000528 <i2c1_master_config+0x128>)
 8000504:	611a      	str	r2, [r3, #16]

	// Enable I2C1
	I2C1->CR1 |= (1U << 0);
 8000506:	4b07      	ldr	r3, [pc, #28]	; (8000524 <i2c1_master_config+0x124>)
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	4a06      	ldr	r2, [pc, #24]	; (8000524 <i2c1_master_config+0x124>)
 800050c:	f043 0301 	orr.w	r3, r3, #1
 8000510:	6013      	str	r3, [r2, #0]
}
 8000512:	bf00      	nop
 8000514:	46bd      	mov	sp, r7
 8000516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800051a:	4770      	bx	lr
 800051c:	40023800 	.word	0x40023800
 8000520:	40020400 	.word	0x40020400
 8000524:	40005400 	.word	0x40005400
 8000528:	00303d5b 	.word	0x00303d5b

0800052c <i2c2_setOwnAddress1>:

static void i2c2_setOwnAddress1(uint32_t OwnAddress1, uint32_t OwnAddrSize)
{
 800052c:	b480      	push	{r7}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
 8000534:	6039      	str	r1, [r7, #0]
    // I2C_OAR1
	MODIFY_REG(I2C2->OAR1, I2C_OAR1_OA1 | I2C_OAR1_OA1MODE, OwnAddress1 | OwnAddrSize);
 8000536:	4b08      	ldr	r3, [pc, #32]	; (8000558 <i2c2_setOwnAddress1+0x2c>)
 8000538:	689a      	ldr	r2, [r3, #8]
 800053a:	4b08      	ldr	r3, [pc, #32]	; (800055c <i2c2_setOwnAddress1+0x30>)
 800053c:	4013      	ands	r3, r2
 800053e:	6879      	ldr	r1, [r7, #4]
 8000540:	683a      	ldr	r2, [r7, #0]
 8000542:	430a      	orrs	r2, r1
 8000544:	4904      	ldr	r1, [pc, #16]	; (8000558 <i2c2_setOwnAddress1+0x2c>)
 8000546:	4313      	orrs	r3, r2
 8000548:	608b      	str	r3, [r1, #8]
}
 800054a:	bf00      	nop
 800054c:	370c      	adds	r7, #12
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	40005800 	.word	0x40005800
 800055c:	fffff800 	.word	0xfffff800

08000560 <i2c2_get_address_matchcode>:

uint32_t i2c2_get_address_matchcode(void)
{
 8000560:	b480      	push	{r7}
 8000562:	af00      	add	r7, sp, #0
	return (uint32_t)(READ_BIT(I2C2->ISR, I2C_ISR_ADDCODE) >> I2C_ISR_ADDCODE_Pos << 1);
 8000564:	4b05      	ldr	r3, [pc, #20]	; (800057c <i2c2_get_address_matchcode+0x1c>)
 8000566:	699b      	ldr	r3, [r3, #24]
 8000568:	0c5b      	lsrs	r3, r3, #17
 800056a:	005b      	lsls	r3, r3, #1
 800056c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
}
 8000570:	4618      	mov	r0, r3
 8000572:	46bd      	mov	sp, r7
 8000574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop
 800057c:	40005800 	.word	0x40005800

08000580 <main>:
volatile uint8_t rx_idx = 0;

static void handle_i2c_master(void);

int main(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	af00      	add	r7, sp, #0
    uart3_tx_init();
 8000584:	f000 f98a 	bl	800089c <uart3_tx_init>
    printf("Starting I2C Communication\n");
 8000588:	4804      	ldr	r0, [pc, #16]	; (800059c <main+0x1c>)
 800058a:	f000 fb15 	bl	8000bb8 <puts>

    i2c2_slave_config();       // PB10 (SCL), PB11 (SDA)
 800058e:	f7ff fe89 	bl	80002a4 <i2c2_slave_config>
    i2c1_master_config();      // PB6  (SCL), PB9  (SDA)
 8000592:	f7ff ff35 	bl	8000400 <i2c1_master_config>

    // Enable NVIC interrupt for I2C2 (slave)
    // NVIC_EnableIRQ(I2C2_EV_IRQn);

    handle_i2c_master();
 8000596:	f000 f803 	bl	80005a0 <handle_i2c_master>

    while (1)
 800059a:	e7fe      	b.n	800059a <main+0x1a>
 800059c:	080014f0 	.word	0x080014f0

080005a0 <handle_i2c_master>:
        // Waiting for interrupt-driven slave response
    }
}

static void handle_i2c_master(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
	/*Set slave  address*/
	I2C1->CR2 |=SLAVE_OWN_ADDRESS;
 80005a4:	4b20      	ldr	r3, [pc, #128]	; (8000628 <handle_i2c_master+0x88>)
 80005a6:	685b      	ldr	r3, [r3, #4]
 80005a8:	4a1f      	ldr	r2, [pc, #124]	; (8000628 <handle_i2c_master+0x88>)
 80005aa:	f043 035a 	orr.w	r3, r3, #90	; 0x5a
 80005ae:	6053      	str	r3, [r2, #4]

    // 7-bit addressing
    I2C1->CR2 &= ~(1U << 11);
 80005b0:	4b1d      	ldr	r3, [pc, #116]	; (8000628 <handle_i2c_master+0x88>)
 80005b2:	685b      	ldr	r3, [r3, #4]
 80005b4:	4a1c      	ldr	r2, [pc, #112]	; (8000628 <handle_i2c_master+0x88>)
 80005b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80005ba:	6053      	str	r3, [r2, #4]

    // Set number of bytes to send
    I2C1->CR2 |= (tx_size << 16);
 80005bc:	4b1a      	ldr	r3, [pc, #104]	; (8000628 <handle_i2c_master+0x88>)
 80005be:	685b      	ldr	r3, [r3, #4]
 80005c0:	4a1a      	ldr	r2, [pc, #104]	; (800062c <handle_i2c_master+0x8c>)
 80005c2:	7812      	ldrb	r2, [r2, #0]
 80005c4:	0412      	lsls	r2, r2, #16
 80005c6:	4611      	mov	r1, r2
 80005c8:	4a17      	ldr	r2, [pc, #92]	; (8000628 <handle_i2c_master+0x88>)
 80005ca:	430b      	orrs	r3, r1
 80005cc:	6053      	str	r3, [r2, #4]

    // Enable auto-end
    I2C1->CR2 |= (1U << 25);
 80005ce:	4b16      	ldr	r3, [pc, #88]	; (8000628 <handle_i2c_master+0x88>)
 80005d0:	685b      	ldr	r3, [r3, #4]
 80005d2:	4a15      	ldr	r2, [pc, #84]	; (8000628 <handle_i2c_master+0x88>)
 80005d4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80005d8:	6053      	str	r3, [r2, #4]

    // Generate START
    I2C1->CR2 |= (1U << 13);
 80005da:	4b13      	ldr	r3, [pc, #76]	; (8000628 <handle_i2c_master+0x88>)
 80005dc:	685b      	ldr	r3, [r3, #4]
 80005de:	4a12      	ldr	r2, [pc, #72]	; (8000628 <handle_i2c_master+0x88>)
 80005e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80005e4:	6053      	str	r3, [r2, #4]

    // Wait for STOPF flag
    while (!(I2C1->ISR & (1U << 5)))
 80005e6:	e00d      	b.n	8000604 <handle_i2c_master+0x64>
    {
        if (I2C1->ISR & (1U << 1))  // TXIS flag
 80005e8:	4b0f      	ldr	r3, [pc, #60]	; (8000628 <handle_i2c_master+0x88>)
 80005ea:	699b      	ldr	r3, [r3, #24]
 80005ec:	f003 0302 	and.w	r3, r3, #2
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d007      	beq.n	8000604 <handle_i2c_master+0x64>
        {
            I2C1->TXDR = (*p_tx_buff++);
 80005f4:	4b0e      	ldr	r3, [pc, #56]	; (8000630 <handle_i2c_master+0x90>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	1c5a      	adds	r2, r3, #1
 80005fa:	490d      	ldr	r1, [pc, #52]	; (8000630 <handle_i2c_master+0x90>)
 80005fc:	600a      	str	r2, [r1, #0]
 80005fe:	781a      	ldrb	r2, [r3, #0]
 8000600:	4b09      	ldr	r3, [pc, #36]	; (8000628 <handle_i2c_master+0x88>)
 8000602:	629a      	str	r2, [r3, #40]	; 0x28
    while (!(I2C1->ISR & (1U << 5)))
 8000604:	4b08      	ldr	r3, [pc, #32]	; (8000628 <handle_i2c_master+0x88>)
 8000606:	699b      	ldr	r3, [r3, #24]
 8000608:	f003 0320 	and.w	r3, r3, #32
 800060c:	2b00      	cmp	r3, #0
 800060e:	d0eb      	beq.n	80005e8 <handle_i2c_master+0x48>
        }
    }

    // Clear STOP flag
    I2C1->ICR |= (1U << 5);
 8000610:	4b05      	ldr	r3, [pc, #20]	; (8000628 <handle_i2c_master+0x88>)
 8000612:	69db      	ldr	r3, [r3, #28]
 8000614:	4a04      	ldr	r2, [pc, #16]	; (8000628 <handle_i2c_master+0x88>)
 8000616:	f043 0320 	orr.w	r3, r3, #32
 800061a:	61d3      	str	r3, [r2, #28]
}
 800061c:	bf00      	nop
 800061e:	46bd      	mov	sp, r7
 8000620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000624:	4770      	bx	lr
 8000626:	bf00      	nop
 8000628:	40005400 	.word	0x40005400
 800062c:	20000004 	.word	0x20000004
 8000630:	20000000 	.word	0x20000000

08000634 <slave_reception_callback>:

void slave_reception_callback(void)
{
 8000634:	b480      	push	{r7}
 8000636:	af00      	add	r7, sp, #0
	 /* Read character in Receive Data register.
	  RXNE flag is cleared by reading data in RXDR register */

	  /*Read first 8 bits */
	  rx_buff[rx_idx++] = (I2C2->RXDR & 0xFF);
 8000638:	4b08      	ldr	r3, [pc, #32]	; (800065c <slave_reception_callback+0x28>)
 800063a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800063c:	4b08      	ldr	r3, [pc, #32]	; (8000660 <slave_reception_callback+0x2c>)
 800063e:	781b      	ldrb	r3, [r3, #0]
 8000640:	b2db      	uxtb	r3, r3
 8000642:	1c5a      	adds	r2, r3, #1
 8000644:	b2d0      	uxtb	r0, r2
 8000646:	4a06      	ldr	r2, [pc, #24]	; (8000660 <slave_reception_callback+0x2c>)
 8000648:	7010      	strb	r0, [r2, #0]
 800064a:	461a      	mov	r2, r3
 800064c:	b2c9      	uxtb	r1, r1
 800064e:	4b05      	ldr	r3, [pc, #20]	; (8000664 <slave_reception_callback+0x30>)
 8000650:	5499      	strb	r1, [r3, r2]
}
 8000652:	bf00      	nop
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr
 800065c:	40005800 	.word	0x40005800
 8000660:	2000008e 	.word	0x2000008e
 8000664:	20000088 	.word	0x20000088

08000668 <slave_complete_callback>:

void slave_complete_callback(void)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	af00      	add	r7, sp, #0
    printf("Transmission complete...\n");
 800066c:	4802      	ldr	r0, [pc, #8]	; (8000678 <slave_complete_callback+0x10>)
 800066e:	f000 faa3 	bl	8000bb8 <puts>
}
 8000672:	bf00      	nop
 8000674:	bd80      	pop	{r7, pc}
 8000676:	bf00      	nop
 8000678:	0800150c 	.word	0x0800150c

0800067c <I2C2_EV_IRQHandler>:

void I2C2_EV_IRQHandler(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	af00      	add	r7, sp, #0
    if (I2C2->ISR & (1U << 3))  // ADDR matched
 8000680:	4b18      	ldr	r3, [pc, #96]	; (80006e4 <I2C2_EV_IRQHandler+0x68>)
 8000682:	699b      	ldr	r3, [r3, #24]
 8000684:	f003 0308 	and.w	r3, r3, #8
 8000688:	2b00      	cmp	r3, #0
 800068a:	d011      	beq.n	80006b0 <I2C2_EV_IRQHandler+0x34>
    {
        if (i2c2_get_address_matchcode() == SLAVE_OWN_ADDRESS)
 800068c:	f7ff ff68 	bl	8000560 <i2c2_get_address_matchcode>
 8000690:	4603      	mov	r3, r0
 8000692:	2b5a      	cmp	r3, #90	; 0x5a
 8000694:	d123      	bne.n	80006de <I2C2_EV_IRQHandler+0x62>
        {
            I2C2->ICR |= (1U << 3);  // Clear ADDR
 8000696:	4b13      	ldr	r3, [pc, #76]	; (80006e4 <I2C2_EV_IRQHandler+0x68>)
 8000698:	69db      	ldr	r3, [r3, #28]
 800069a:	4a12      	ldr	r2, [pc, #72]	; (80006e4 <I2C2_EV_IRQHandler+0x68>)
 800069c:	f043 0308 	orr.w	r3, r3, #8
 80006a0:	61d3      	str	r3, [r2, #28]
            I2C2->CR1 |= (1U << 2);  // Enable RXNE interrupt
 80006a2:	4b10      	ldr	r3, [pc, #64]	; (80006e4 <I2C2_EV_IRQHandler+0x68>)
 80006a4:	681b      	ldr	r3, [r3, #0]
 80006a6:	4a0f      	ldr	r2, [pc, #60]	; (80006e4 <I2C2_EV_IRQHandler+0x68>)
 80006a8:	f043 0304 	orr.w	r3, r3, #4
 80006ac:	6013      	str	r3, [r2, #0]
    }
    else
    {
    	// Implement Error
    }
}
 80006ae:	e016      	b.n	80006de <I2C2_EV_IRQHandler+0x62>
    else if (I2C2->ISR & (1U << 2))  // RXNE
 80006b0:	4b0c      	ldr	r3, [pc, #48]	; (80006e4 <I2C2_EV_IRQHandler+0x68>)
 80006b2:	699b      	ldr	r3, [r3, #24]
 80006b4:	f003 0304 	and.w	r3, r3, #4
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d002      	beq.n	80006c2 <I2C2_EV_IRQHandler+0x46>
        slave_reception_callback();
 80006bc:	f7ff ffba 	bl	8000634 <slave_reception_callback>
}
 80006c0:	e00d      	b.n	80006de <I2C2_EV_IRQHandler+0x62>
    else if (I2C2->ISR & (1U << 5))  // STOPF
 80006c2:	4b08      	ldr	r3, [pc, #32]	; (80006e4 <I2C2_EV_IRQHandler+0x68>)
 80006c4:	699b      	ldr	r3, [r3, #24]
 80006c6:	f003 0320 	and.w	r3, r3, #32
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d007      	beq.n	80006de <I2C2_EV_IRQHandler+0x62>
        I2C2->ICR |= (1U << 5);  // Clear STOPF
 80006ce:	4b05      	ldr	r3, [pc, #20]	; (80006e4 <I2C2_EV_IRQHandler+0x68>)
 80006d0:	69db      	ldr	r3, [r3, #28]
 80006d2:	4a04      	ldr	r2, [pc, #16]	; (80006e4 <I2C2_EV_IRQHandler+0x68>)
 80006d4:	f043 0320 	orr.w	r3, r3, #32
 80006d8:	61d3      	str	r3, [r2, #28]
        slave_complete_callback();
 80006da:	f7ff ffc5 	bl	8000668 <slave_complete_callback>
}
 80006de:	bf00      	nop
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40005800 	.word	0x40005800

080006e8 <set_ahb1_periph_clock>:
#include "stm32f7xx.h"
#include "rcc.h"

// Set the AHB1
void set_ahb1_periph_clock(uint32_t perihs)
{
 80006e8:	b480      	push	{r7}
 80006ea:	b083      	sub	sp, #12
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	SET_BIT(RCC->AHB1ENR,perihs);
 80006f0:	4b05      	ldr	r3, [pc, #20]	; (8000708 <set_ahb1_periph_clock+0x20>)
 80006f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80006f4:	4904      	ldr	r1, [pc, #16]	; (8000708 <set_ahb1_periph_clock+0x20>)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	4313      	orrs	r3, r2
 80006fa:	630b      	str	r3, [r1, #48]	; 0x30
}
 80006fc:	bf00      	nop
 80006fe:	370c      	adds	r7, #12
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr
 8000708:	40023800 	.word	0x40023800

0800070c <set_apb1_periph_clock>:
	SET_BIT(RCC->AHB2ENR,perihs);
}

// Set the APB1
void set_apb1_periph_clock(uint32_t perihs)
{
 800070c:	b480      	push	{r7}
 800070e:	b083      	sub	sp, #12
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
	SET_BIT(RCC->APB1ENR,perihs);
 8000714:	4b05      	ldr	r3, [pc, #20]	; (800072c <set_apb1_periph_clock+0x20>)
 8000716:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000718:	4904      	ldr	r1, [pc, #16]	; (800072c <set_apb1_periph_clock+0x20>)
 800071a:	687b      	ldr	r3, [r7, #4]
 800071c:	4313      	orrs	r3, r2
 800071e:	640b      	str	r3, [r1, #64]	; 0x40
}
 8000720:	bf00      	nop
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072a:	4770      	bx	lr
 800072c:	40023800 	.word	0x40023800

08000730 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b086      	sub	sp, #24
 8000734:	af00      	add	r7, sp, #0
 8000736:	60f8      	str	r0, [r7, #12]
 8000738:	60b9      	str	r1, [r7, #8]
 800073a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800073c:	2300      	movs	r3, #0
 800073e:	617b      	str	r3, [r7, #20]
 8000740:	e00a      	b.n	8000758 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000742:	f3af 8000 	nop.w
 8000746:	4601      	mov	r1, r0
 8000748:	68bb      	ldr	r3, [r7, #8]
 800074a:	1c5a      	adds	r2, r3, #1
 800074c:	60ba      	str	r2, [r7, #8]
 800074e:	b2ca      	uxtb	r2, r1
 8000750:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000752:	697b      	ldr	r3, [r7, #20]
 8000754:	3301      	adds	r3, #1
 8000756:	617b      	str	r3, [r7, #20]
 8000758:	697a      	ldr	r2, [r7, #20]
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	429a      	cmp	r2, r3
 800075e:	dbf0      	blt.n	8000742 <_read+0x12>
	}

return len;
 8000760:	687b      	ldr	r3, [r7, #4]
}
 8000762:	4618      	mov	r0, r3
 8000764:	3718      	adds	r7, #24
 8000766:	46bd      	mov	sp, r7
 8000768:	bd80      	pop	{r7, pc}

0800076a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800076a:	b580      	push	{r7, lr}
 800076c:	b086      	sub	sp, #24
 800076e:	af00      	add	r7, sp, #0
 8000770:	60f8      	str	r0, [r7, #12]
 8000772:	60b9      	str	r1, [r7, #8]
 8000774:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000776:	2300      	movs	r3, #0
 8000778:	617b      	str	r3, [r7, #20]
 800077a:	e009      	b.n	8000790 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800077c:	68bb      	ldr	r3, [r7, #8]
 800077e:	1c5a      	adds	r2, r3, #1
 8000780:	60ba      	str	r2, [r7, #8]
 8000782:	781b      	ldrb	r3, [r3, #0]
 8000784:	4618      	mov	r0, r3
 8000786:	f000 f877 	bl	8000878 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800078a:	697b      	ldr	r3, [r7, #20]
 800078c:	3301      	adds	r3, #1
 800078e:	617b      	str	r3, [r7, #20]
 8000790:	697a      	ldr	r2, [r7, #20]
 8000792:	687b      	ldr	r3, [r7, #4]
 8000794:	429a      	cmp	r2, r3
 8000796:	dbf1      	blt.n	800077c <_write+0x12>
	}
	return len;
 8000798:	687b      	ldr	r3, [r7, #4]
}
 800079a:	4618      	mov	r0, r3
 800079c:	3718      	adds	r7, #24
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}

080007a2 <_close>:

int _close(int file)
{
 80007a2:	b480      	push	{r7}
 80007a4:	b083      	sub	sp, #12
 80007a6:	af00      	add	r7, sp, #0
 80007a8:	6078      	str	r0, [r7, #4]
	return -1;
 80007aa:	f04f 33ff 	mov.w	r3, #4294967295
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	370c      	adds	r7, #12
 80007b2:	46bd      	mov	sp, r7
 80007b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b8:	4770      	bx	lr

080007ba <_fstat>:


int _fstat(int file, struct stat *st)
{
 80007ba:	b480      	push	{r7}
 80007bc:	b083      	sub	sp, #12
 80007be:	af00      	add	r7, sp, #0
 80007c0:	6078      	str	r0, [r7, #4]
 80007c2:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80007c4:	683b      	ldr	r3, [r7, #0]
 80007c6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80007ca:	605a      	str	r2, [r3, #4]
	return 0;
 80007cc:	2300      	movs	r3, #0
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr

080007da <_isatty>:

int _isatty(int file)
{
 80007da:	b480      	push	{r7}
 80007dc:	b083      	sub	sp, #12
 80007de:	af00      	add	r7, sp, #0
 80007e0:	6078      	str	r0, [r7, #4]
	return 1;
 80007e2:	2301      	movs	r3, #1
}
 80007e4:	4618      	mov	r0, r3
 80007e6:	370c      	adds	r7, #12
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr

080007f0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b085      	sub	sp, #20
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	60f8      	str	r0, [r7, #12]
 80007f8:	60b9      	str	r1, [r7, #8]
 80007fa:	607a      	str	r2, [r7, #4]
	return 0;
 80007fc:	2300      	movs	r3, #0
}
 80007fe:	4618      	mov	r0, r3
 8000800:	3714      	adds	r7, #20
 8000802:	46bd      	mov	sp, r7
 8000804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000808:	4770      	bx	lr
	...

0800080c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800080c:	b580      	push	{r7, lr}
 800080e:	b086      	sub	sp, #24
 8000810:	af00      	add	r7, sp, #0
 8000812:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000814:	4a14      	ldr	r2, [pc, #80]	; (8000868 <_sbrk+0x5c>)
 8000816:	4b15      	ldr	r3, [pc, #84]	; (800086c <_sbrk+0x60>)
 8000818:	1ad3      	subs	r3, r2, r3
 800081a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000820:	4b13      	ldr	r3, [pc, #76]	; (8000870 <_sbrk+0x64>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	2b00      	cmp	r3, #0
 8000826:	d102      	bne.n	800082e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000828:	4b11      	ldr	r3, [pc, #68]	; (8000870 <_sbrk+0x64>)
 800082a:	4a12      	ldr	r2, [pc, #72]	; (8000874 <_sbrk+0x68>)
 800082c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800082e:	4b10      	ldr	r3, [pc, #64]	; (8000870 <_sbrk+0x64>)
 8000830:	681a      	ldr	r2, [r3, #0]
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	4413      	add	r3, r2
 8000836:	693a      	ldr	r2, [r7, #16]
 8000838:	429a      	cmp	r2, r3
 800083a:	d207      	bcs.n	800084c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800083c:	f000 f91c 	bl	8000a78 <__errno>
 8000840:	4603      	mov	r3, r0
 8000842:	220c      	movs	r2, #12
 8000844:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000846:	f04f 33ff 	mov.w	r3, #4294967295
 800084a:	e009      	b.n	8000860 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800084c:	4b08      	ldr	r3, [pc, #32]	; (8000870 <_sbrk+0x64>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000852:	4b07      	ldr	r3, [pc, #28]	; (8000870 <_sbrk+0x64>)
 8000854:	681a      	ldr	r2, [r3, #0]
 8000856:	687b      	ldr	r3, [r7, #4]
 8000858:	4413      	add	r3, r2
 800085a:	4a05      	ldr	r2, [pc, #20]	; (8000870 <_sbrk+0x64>)
 800085c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800085e:	68fb      	ldr	r3, [r7, #12]
}
 8000860:	4618      	mov	r0, r3
 8000862:	3718      	adds	r7, #24
 8000864:	46bd      	mov	sp, r7
 8000866:	bd80      	pop	{r7, pc}
 8000868:	20050000 	.word	0x20050000
 800086c:	00000400 	.word	0x00000400
 8000870:	20000090 	.word	0x20000090
 8000874:	200000a8 	.word	0x200000a8

08000878 <__io_putchar>:
static void uart_enable(USART_TypeDef *USARTx);
static void uart_write(USART_TypeDef *USARTx , uint8_t value);
static void set_uart_tranfer_direction(USART_TypeDef *USARTx,uint32_t TransferDirection);

int __io_putchar(int ch)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	b082      	sub	sp, #8
 800087c:	af00      	add	r7, sp, #0
 800087e:	6078      	str	r0, [r7, #4]
	uart_write(USART3, ch);
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	b2db      	uxtb	r3, r3
 8000884:	4619      	mov	r1, r3
 8000886:	4804      	ldr	r0, [pc, #16]	; (8000898 <__io_putchar+0x20>)
 8000888:	f000 f84a 	bl	8000920 <uart_write>
	return ch;
 800088c:	687b      	ldr	r3, [r7, #4]
}
 800088e:	4618      	mov	r0, r3
 8000890:	3708      	adds	r7, #8
 8000892:	46bd      	mov	sp, r7
 8000894:	bd80      	pop	{r7, pc}
 8000896:	bf00      	nop
 8000898:	40004800 	.word	0x40004800

0800089c <uart3_tx_init>:

void uart3_tx_init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	af00      	add	r7, sp, #0
	/*1. Enable clock access to GPIOD*/
	 set_ahb1_periph_clock(GPIODEN);
 80008a0:	2008      	movs	r0, #8
 80008a2:	f7ff ff21 	bl	80006e8 <set_ahb1_periph_clock>

	/*2. Set PD8 to mode to alternate function*/
	 set_pin_mode(GPIOD,  UART3_TX,  GPIO_ALTERNATE_MODE);
 80008a6:	2202      	movs	r2, #2
 80008a8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80008ac:	4819      	ldr	r0, [pc, #100]	; (8000914 <uart3_tx_init+0x78>)
 80008ae:	f7ff fcab 	bl	8000208 <set_pin_mode>

	/*3. Set alternate function to USART i.e. AF7 - 0111*/
	 GPIOD->AFR[1] |= (1U<<0);
 80008b2:	4b18      	ldr	r3, [pc, #96]	; (8000914 <uart3_tx_init+0x78>)
 80008b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008b6:	4a17      	ldr	r2, [pc, #92]	; (8000914 <uart3_tx_init+0x78>)
 80008b8:	f043 0301 	orr.w	r3, r3, #1
 80008bc:	6253      	str	r3, [r2, #36]	; 0x24
	 GPIOD->AFR[1] |= (1U<<1);
 80008be:	4b15      	ldr	r3, [pc, #84]	; (8000914 <uart3_tx_init+0x78>)
 80008c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008c2:	4a14      	ldr	r2, [pc, #80]	; (8000914 <uart3_tx_init+0x78>)
 80008c4:	f043 0302 	orr.w	r3, r3, #2
 80008c8:	6253      	str	r3, [r2, #36]	; 0x24
	 GPIOD->AFR[1] |= (1U<<2);
 80008ca:	4b12      	ldr	r3, [pc, #72]	; (8000914 <uart3_tx_init+0x78>)
 80008cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008ce:	4a11      	ldr	r2, [pc, #68]	; (8000914 <uart3_tx_init+0x78>)
 80008d0:	f043 0304 	orr.w	r3, r3, #4
 80008d4:	6253      	str	r3, [r2, #36]	; 0x24
	 GPIOD->AFR[1] &= ~(1U<<3);
 80008d6:	4b0f      	ldr	r3, [pc, #60]	; (8000914 <uart3_tx_init+0x78>)
 80008d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80008da:	4a0e      	ldr	r2, [pc, #56]	; (8000914 <uart3_tx_init+0x78>)
 80008dc:	f023 0308 	bic.w	r3, r3, #8
 80008e0:	6253      	str	r3, [r2, #36]	; 0x24

	/*Enable clock to the USART3 module*/
	 set_apb1_periph_clock(USART3EN);
 80008e2:	f44f 2080 	mov.w	r0, #262144	; 0x40000
 80008e6:	f7ff ff11 	bl	800070c <set_apb1_periph_clock>

	/*Confiugure USART parameters*/
	 config_uart_parameters(USART3,  UART_DATAWIDTH_8B, UART_PARITY_NONE,  UART_STOPBITS_1);
 80008ea:	2300      	movs	r3, #0
 80008ec:	2200      	movs	r2, #0
 80008ee:	2100      	movs	r1, #0
 80008f0:	4809      	ldr	r0, [pc, #36]	; (8000918 <uart3_tx_init+0x7c>)
 80008f2:	f000 f861 	bl	80009b8 <config_uart_parameters>
	 set_uart_tranfer_direction(USART3 ,USART_CR1_TE);
 80008f6:	2108      	movs	r1, #8
 80008f8:	4807      	ldr	r0, [pc, #28]	; (8000918 <uart3_tx_init+0x7c>)
 80008fa:	f000 f837 	bl	800096c <set_uart_tranfer_direction>

	/*Set baudrate*/
	 uart_set_baudrate(USART3, 16000000, 115200);
 80008fe:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000902:	4906      	ldr	r1, [pc, #24]	; (800091c <uart3_tx_init+0x80>)
 8000904:	4804      	ldr	r0, [pc, #16]	; (8000918 <uart3_tx_init+0x7c>)
 8000906:	f000 f844 	bl	8000992 <uart_set_baudrate>

	/*Enable USART*/
	uart_enable(USART3);
 800090a:	4803      	ldr	r0, [pc, #12]	; (8000918 <uart3_tx_init+0x7c>)
 800090c:	f000 f81e 	bl	800094c <uart_enable>
}
 8000910:	bf00      	nop
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40020c00 	.word	0x40020c00
 8000918:	40004800 	.word	0x40004800
 800091c:	00f42400 	.word	0x00f42400

08000920 <uart_write>:
	while(!(USARTx->ISR & USART_ISR_RXNE)){}
	return READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU;
}

void uart_write(USART_TypeDef *USARTx , uint8_t value)
{
 8000920:	b480      	push	{r7}
 8000922:	b083      	sub	sp, #12
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]
 8000928:	460b      	mov	r3, r1
 800092a:	70fb      	strb	r3, [r7, #3]
	/*Make sure transmit data register is empty*/
//	while(!((USARTx->ISR & USART_ISR_TXE)== USART_ISR_TXE)){}
	while(!(USARTx->ISR & USART_ISR_TXE)){}
 800092c:	bf00      	nop
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	69db      	ldr	r3, [r3, #28]
 8000932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000936:	2b00      	cmp	r3, #0
 8000938:	d0f9      	beq.n	800092e <uart_write+0xe>

	/*Write value into transmit data register*/
	USARTx->TDR = value;
 800093a:	78fa      	ldrb	r2, [r7, #3]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000940:	bf00      	nop
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <uart_enable>:

// Enable the usart
static void uart_enable(USART_TypeDef *USARTx)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
	SET_BIT(USARTx->CR1,USART_CR1_UE);
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	681b      	ldr	r3, [r3, #0]
 8000958:	f043 0201 	orr.w	r2, r3, #1
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	601a      	str	r2, [r3, #0]
}
 8000960:	bf00      	nop
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr

0800096c <set_uart_tranfer_direction>:

static void set_uart_tranfer_direction(USART_TypeDef *USARTx,uint32_t TransferDirection)
{
 800096c:	b480      	push	{r7}
 800096e:	b083      	sub	sp, #12
 8000970:	af00      	add	r7, sp, #0
 8000972:	6078      	str	r0, [r7, #4]
 8000974:	6039      	str	r1, [r7, #0]
	MODIFY_REG(USARTx->CR1, USART_CR1_RE | USART_CR1_TE, TransferDirection);
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	f023 020c 	bic.w	r2, r3, #12
 800097e:	683b      	ldr	r3, [r7, #0]
 8000980:	431a      	orrs	r2, r3
 8000982:	687b      	ldr	r3, [r7, #4]
 8000984:	601a      	str	r2, [r3, #0]
}
 8000986:	bf00      	nop
 8000988:	370c      	adds	r7, #12
 800098a:	46bd      	mov	sp, r7
 800098c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000990:	4770      	bx	lr

08000992 <uart_set_baudrate>:

// set the baudrate
static void uart_set_baudrate(USART_TypeDef *USARTx, uint32_t PeriphClk, uint32_t BaudRate)
{
 8000992:	b580      	push	{r7, lr}
 8000994:	b084      	sub	sp, #16
 8000996:	af00      	add	r7, sp, #0
 8000998:	60f8      	str	r0, [r7, #12]
 800099a:	60b9      	str	r1, [r7, #8]
 800099c:	607a      	str	r2, [r7, #4]
	USARTx->BRR = compute_uart_div( PeriphClk,  BaudRate);
 800099e:	6879      	ldr	r1, [r7, #4]
 80009a0:	68b8      	ldr	r0, [r7, #8]
 80009a2:	f000 f82b 	bl	80009fc <compute_uart_div>
 80009a6:	4603      	mov	r3, r0
 80009a8:	461a      	mov	r2, r3
 80009aa:	68fb      	ldr	r3, [r7, #12]
 80009ac:	60da      	str	r2, [r3, #12]
}
 80009ae:	bf00      	nop
 80009b0:	3710      	adds	r7, #16
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}
	...

080009b8 <config_uart_parameters>:

static void config_uart_parameters(USART_TypeDef *USARTx, uint32_t DataWidth, uint32_t Parity, uint32_t StopBits)
{
 80009b8:	b480      	push	{r7}
 80009ba:	b085      	sub	sp, #20
 80009bc:	af00      	add	r7, sp, #0
 80009be:	60f8      	str	r0, [r7, #12]
 80009c0:	60b9      	str	r1, [r7, #8]
 80009c2:	607a      	str	r2, [r7, #4]
 80009c4:	603b      	str	r3, [r7, #0]
	MODIFY_REG(USARTx->CR1, USART_CR1_PS | USART_CR1_PCE | USART_CR1_M, Parity | DataWidth);
 80009c6:	68fb      	ldr	r3, [r7, #12]
 80009c8:	681a      	ldr	r2, [r3, #0]
 80009ca:	4b0b      	ldr	r3, [pc, #44]	; (80009f8 <config_uart_parameters+0x40>)
 80009cc:	4013      	ands	r3, r2
 80009ce:	6879      	ldr	r1, [r7, #4]
 80009d0:	68ba      	ldr	r2, [r7, #8]
 80009d2:	430a      	orrs	r2, r1
 80009d4:	431a      	orrs	r2, r3
 80009d6:	68fb      	ldr	r3, [r7, #12]
 80009d8:	601a      	str	r2, [r3, #0]

	MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	685b      	ldr	r3, [r3, #4]
 80009de:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	431a      	orrs	r2, r3
 80009e6:	68fb      	ldr	r3, [r7, #12]
 80009e8:	605a      	str	r2, [r3, #4]
}
 80009ea:	bf00      	nop
 80009ec:	3714      	adds	r7, #20
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop
 80009f8:	efffe9ff 	.word	0xefffe9ff

080009fc <compute_uart_div>:

// configure the baud rate with peripheral clock
static uint16_t compute_uart_div(uint32_t PeriphClk, uint32_t BaudRate)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b083      	sub	sp, #12
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
 8000a04:	6039      	str	r1, [r7, #0]
	return ((PeriphClk + (BaudRate/2U))/BaudRate);
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	085a      	lsrs	r2, r3, #1
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	441a      	add	r2, r3
 8000a0e:	683b      	ldr	r3, [r7, #0]
 8000a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8000a14:	b29b      	uxth	r3, r3
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	370c      	adds	r7, #12
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a20:	4770      	bx	lr
	...

08000a24 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a24:	480d      	ldr	r0, [pc, #52]	; (8000a5c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a26:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a28:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a2c:	480c      	ldr	r0, [pc, #48]	; (8000a60 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a2e:	490d      	ldr	r1, [pc, #52]	; (8000a64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a30:	4a0d      	ldr	r2, [pc, #52]	; (8000a68 <LoopForever+0xe>)
  movs r3, #0
 8000a32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a34:	e002      	b.n	8000a3c <LoopCopyDataInit>

08000a36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a3a:	3304      	adds	r3, #4

08000a3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a40:	d3f9      	bcc.n	8000a36 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a42:	4a0a      	ldr	r2, [pc, #40]	; (8000a6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a44:	4c0a      	ldr	r4, [pc, #40]	; (8000a70 <LoopForever+0x16>)
  movs r3, #0
 8000a46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a48:	e001      	b.n	8000a4e <LoopFillZerobss>

08000a4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a4c:	3204      	adds	r2, #4

08000a4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a50:	d3fb      	bcc.n	8000a4a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000a52:	f000 f817 	bl	8000a84 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a56:	f7ff fd93 	bl	8000580 <main>

08000a5a <LoopForever>:

LoopForever:
    b LoopForever
 8000a5a:	e7fe      	b.n	8000a5a <LoopForever>
  ldr   r0, =_estack
 8000a5c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000a60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a64:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8000a68:	0800159c 	.word	0x0800159c
  ldr r2, =_sbss
 8000a6c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8000a70:	200000a4 	.word	0x200000a4

08000a74 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000a74:	e7fe      	b.n	8000a74 <ADC_IRQHandler>
	...

08000a78 <__errno>:
 8000a78:	4b01      	ldr	r3, [pc, #4]	; (8000a80 <__errno+0x8>)
 8000a7a:	6818      	ldr	r0, [r3, #0]
 8000a7c:	4770      	bx	lr
 8000a7e:	bf00      	nop
 8000a80:	20000008 	.word	0x20000008

08000a84 <__libc_init_array>:
 8000a84:	b570      	push	{r4, r5, r6, lr}
 8000a86:	4d0d      	ldr	r5, [pc, #52]	; (8000abc <__libc_init_array+0x38>)
 8000a88:	4c0d      	ldr	r4, [pc, #52]	; (8000ac0 <__libc_init_array+0x3c>)
 8000a8a:	1b64      	subs	r4, r4, r5
 8000a8c:	10a4      	asrs	r4, r4, #2
 8000a8e:	2600      	movs	r6, #0
 8000a90:	42a6      	cmp	r6, r4
 8000a92:	d109      	bne.n	8000aa8 <__libc_init_array+0x24>
 8000a94:	4d0b      	ldr	r5, [pc, #44]	; (8000ac4 <__libc_init_array+0x40>)
 8000a96:	4c0c      	ldr	r4, [pc, #48]	; (8000ac8 <__libc_init_array+0x44>)
 8000a98:	f000 fd1e 	bl	80014d8 <_init>
 8000a9c:	1b64      	subs	r4, r4, r5
 8000a9e:	10a4      	asrs	r4, r4, #2
 8000aa0:	2600      	movs	r6, #0
 8000aa2:	42a6      	cmp	r6, r4
 8000aa4:	d105      	bne.n	8000ab2 <__libc_init_array+0x2e>
 8000aa6:	bd70      	pop	{r4, r5, r6, pc}
 8000aa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8000aac:	4798      	blx	r3
 8000aae:	3601      	adds	r6, #1
 8000ab0:	e7ee      	b.n	8000a90 <__libc_init_array+0xc>
 8000ab2:	f855 3b04 	ldr.w	r3, [r5], #4
 8000ab6:	4798      	blx	r3
 8000ab8:	3601      	adds	r6, #1
 8000aba:	e7f2      	b.n	8000aa2 <__libc_init_array+0x1e>
 8000abc:	08001594 	.word	0x08001594
 8000ac0:	08001594 	.word	0x08001594
 8000ac4:	08001594 	.word	0x08001594
 8000ac8:	08001598 	.word	0x08001598

08000acc <memset>:
 8000acc:	4402      	add	r2, r0
 8000ace:	4603      	mov	r3, r0
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d100      	bne.n	8000ad6 <memset+0xa>
 8000ad4:	4770      	bx	lr
 8000ad6:	f803 1b01 	strb.w	r1, [r3], #1
 8000ada:	e7f9      	b.n	8000ad0 <memset+0x4>

08000adc <_puts_r>:
 8000adc:	b570      	push	{r4, r5, r6, lr}
 8000ade:	460e      	mov	r6, r1
 8000ae0:	4605      	mov	r5, r0
 8000ae2:	b118      	cbz	r0, 8000aec <_puts_r+0x10>
 8000ae4:	6983      	ldr	r3, [r0, #24]
 8000ae6:	b90b      	cbnz	r3, 8000aec <_puts_r+0x10>
 8000ae8:	f000 fa48 	bl	8000f7c <__sinit>
 8000aec:	69ab      	ldr	r3, [r5, #24]
 8000aee:	68ac      	ldr	r4, [r5, #8]
 8000af0:	b913      	cbnz	r3, 8000af8 <_puts_r+0x1c>
 8000af2:	4628      	mov	r0, r5
 8000af4:	f000 fa42 	bl	8000f7c <__sinit>
 8000af8:	4b2c      	ldr	r3, [pc, #176]	; (8000bac <_puts_r+0xd0>)
 8000afa:	429c      	cmp	r4, r3
 8000afc:	d120      	bne.n	8000b40 <_puts_r+0x64>
 8000afe:	686c      	ldr	r4, [r5, #4]
 8000b00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000b02:	07db      	lsls	r3, r3, #31
 8000b04:	d405      	bmi.n	8000b12 <_puts_r+0x36>
 8000b06:	89a3      	ldrh	r3, [r4, #12]
 8000b08:	0598      	lsls	r0, r3, #22
 8000b0a:	d402      	bmi.n	8000b12 <_puts_r+0x36>
 8000b0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000b0e:	f000 fad3 	bl	80010b8 <__retarget_lock_acquire_recursive>
 8000b12:	89a3      	ldrh	r3, [r4, #12]
 8000b14:	0719      	lsls	r1, r3, #28
 8000b16:	d51d      	bpl.n	8000b54 <_puts_r+0x78>
 8000b18:	6923      	ldr	r3, [r4, #16]
 8000b1a:	b1db      	cbz	r3, 8000b54 <_puts_r+0x78>
 8000b1c:	3e01      	subs	r6, #1
 8000b1e:	68a3      	ldr	r3, [r4, #8]
 8000b20:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8000b24:	3b01      	subs	r3, #1
 8000b26:	60a3      	str	r3, [r4, #8]
 8000b28:	bb39      	cbnz	r1, 8000b7a <_puts_r+0x9e>
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	da38      	bge.n	8000ba0 <_puts_r+0xc4>
 8000b2e:	4622      	mov	r2, r4
 8000b30:	210a      	movs	r1, #10
 8000b32:	4628      	mov	r0, r5
 8000b34:	f000 f848 	bl	8000bc8 <__swbuf_r>
 8000b38:	3001      	adds	r0, #1
 8000b3a:	d011      	beq.n	8000b60 <_puts_r+0x84>
 8000b3c:	250a      	movs	r5, #10
 8000b3e:	e011      	b.n	8000b64 <_puts_r+0x88>
 8000b40:	4b1b      	ldr	r3, [pc, #108]	; (8000bb0 <_puts_r+0xd4>)
 8000b42:	429c      	cmp	r4, r3
 8000b44:	d101      	bne.n	8000b4a <_puts_r+0x6e>
 8000b46:	68ac      	ldr	r4, [r5, #8]
 8000b48:	e7da      	b.n	8000b00 <_puts_r+0x24>
 8000b4a:	4b1a      	ldr	r3, [pc, #104]	; (8000bb4 <_puts_r+0xd8>)
 8000b4c:	429c      	cmp	r4, r3
 8000b4e:	bf08      	it	eq
 8000b50:	68ec      	ldreq	r4, [r5, #12]
 8000b52:	e7d5      	b.n	8000b00 <_puts_r+0x24>
 8000b54:	4621      	mov	r1, r4
 8000b56:	4628      	mov	r0, r5
 8000b58:	f000 f888 	bl	8000c6c <__swsetup_r>
 8000b5c:	2800      	cmp	r0, #0
 8000b5e:	d0dd      	beq.n	8000b1c <_puts_r+0x40>
 8000b60:	f04f 35ff 	mov.w	r5, #4294967295
 8000b64:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000b66:	07da      	lsls	r2, r3, #31
 8000b68:	d405      	bmi.n	8000b76 <_puts_r+0x9a>
 8000b6a:	89a3      	ldrh	r3, [r4, #12]
 8000b6c:	059b      	lsls	r3, r3, #22
 8000b6e:	d402      	bmi.n	8000b76 <_puts_r+0x9a>
 8000b70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000b72:	f000 faa2 	bl	80010ba <__retarget_lock_release_recursive>
 8000b76:	4628      	mov	r0, r5
 8000b78:	bd70      	pop	{r4, r5, r6, pc}
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	da04      	bge.n	8000b88 <_puts_r+0xac>
 8000b7e:	69a2      	ldr	r2, [r4, #24]
 8000b80:	429a      	cmp	r2, r3
 8000b82:	dc06      	bgt.n	8000b92 <_puts_r+0xb6>
 8000b84:	290a      	cmp	r1, #10
 8000b86:	d004      	beq.n	8000b92 <_puts_r+0xb6>
 8000b88:	6823      	ldr	r3, [r4, #0]
 8000b8a:	1c5a      	adds	r2, r3, #1
 8000b8c:	6022      	str	r2, [r4, #0]
 8000b8e:	7019      	strb	r1, [r3, #0]
 8000b90:	e7c5      	b.n	8000b1e <_puts_r+0x42>
 8000b92:	4622      	mov	r2, r4
 8000b94:	4628      	mov	r0, r5
 8000b96:	f000 f817 	bl	8000bc8 <__swbuf_r>
 8000b9a:	3001      	adds	r0, #1
 8000b9c:	d1bf      	bne.n	8000b1e <_puts_r+0x42>
 8000b9e:	e7df      	b.n	8000b60 <_puts_r+0x84>
 8000ba0:	6823      	ldr	r3, [r4, #0]
 8000ba2:	250a      	movs	r5, #10
 8000ba4:	1c5a      	adds	r2, r3, #1
 8000ba6:	6022      	str	r2, [r4, #0]
 8000ba8:	701d      	strb	r5, [r3, #0]
 8000baa:	e7db      	b.n	8000b64 <_puts_r+0x88>
 8000bac:	08001554 	.word	0x08001554
 8000bb0:	08001574 	.word	0x08001574
 8000bb4:	08001534 	.word	0x08001534

08000bb8 <puts>:
 8000bb8:	4b02      	ldr	r3, [pc, #8]	; (8000bc4 <puts+0xc>)
 8000bba:	4601      	mov	r1, r0
 8000bbc:	6818      	ldr	r0, [r3, #0]
 8000bbe:	f7ff bf8d 	b.w	8000adc <_puts_r>
 8000bc2:	bf00      	nop
 8000bc4:	20000008 	.word	0x20000008

08000bc8 <__swbuf_r>:
 8000bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bca:	460e      	mov	r6, r1
 8000bcc:	4614      	mov	r4, r2
 8000bce:	4605      	mov	r5, r0
 8000bd0:	b118      	cbz	r0, 8000bda <__swbuf_r+0x12>
 8000bd2:	6983      	ldr	r3, [r0, #24]
 8000bd4:	b90b      	cbnz	r3, 8000bda <__swbuf_r+0x12>
 8000bd6:	f000 f9d1 	bl	8000f7c <__sinit>
 8000bda:	4b21      	ldr	r3, [pc, #132]	; (8000c60 <__swbuf_r+0x98>)
 8000bdc:	429c      	cmp	r4, r3
 8000bde:	d12b      	bne.n	8000c38 <__swbuf_r+0x70>
 8000be0:	686c      	ldr	r4, [r5, #4]
 8000be2:	69a3      	ldr	r3, [r4, #24]
 8000be4:	60a3      	str	r3, [r4, #8]
 8000be6:	89a3      	ldrh	r3, [r4, #12]
 8000be8:	071a      	lsls	r2, r3, #28
 8000bea:	d52f      	bpl.n	8000c4c <__swbuf_r+0x84>
 8000bec:	6923      	ldr	r3, [r4, #16]
 8000bee:	b36b      	cbz	r3, 8000c4c <__swbuf_r+0x84>
 8000bf0:	6923      	ldr	r3, [r4, #16]
 8000bf2:	6820      	ldr	r0, [r4, #0]
 8000bf4:	1ac0      	subs	r0, r0, r3
 8000bf6:	6963      	ldr	r3, [r4, #20]
 8000bf8:	b2f6      	uxtb	r6, r6
 8000bfa:	4283      	cmp	r3, r0
 8000bfc:	4637      	mov	r7, r6
 8000bfe:	dc04      	bgt.n	8000c0a <__swbuf_r+0x42>
 8000c00:	4621      	mov	r1, r4
 8000c02:	4628      	mov	r0, r5
 8000c04:	f000 f926 	bl	8000e54 <_fflush_r>
 8000c08:	bb30      	cbnz	r0, 8000c58 <__swbuf_r+0x90>
 8000c0a:	68a3      	ldr	r3, [r4, #8]
 8000c0c:	3b01      	subs	r3, #1
 8000c0e:	60a3      	str	r3, [r4, #8]
 8000c10:	6823      	ldr	r3, [r4, #0]
 8000c12:	1c5a      	adds	r2, r3, #1
 8000c14:	6022      	str	r2, [r4, #0]
 8000c16:	701e      	strb	r6, [r3, #0]
 8000c18:	6963      	ldr	r3, [r4, #20]
 8000c1a:	3001      	adds	r0, #1
 8000c1c:	4283      	cmp	r3, r0
 8000c1e:	d004      	beq.n	8000c2a <__swbuf_r+0x62>
 8000c20:	89a3      	ldrh	r3, [r4, #12]
 8000c22:	07db      	lsls	r3, r3, #31
 8000c24:	d506      	bpl.n	8000c34 <__swbuf_r+0x6c>
 8000c26:	2e0a      	cmp	r6, #10
 8000c28:	d104      	bne.n	8000c34 <__swbuf_r+0x6c>
 8000c2a:	4621      	mov	r1, r4
 8000c2c:	4628      	mov	r0, r5
 8000c2e:	f000 f911 	bl	8000e54 <_fflush_r>
 8000c32:	b988      	cbnz	r0, 8000c58 <__swbuf_r+0x90>
 8000c34:	4638      	mov	r0, r7
 8000c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8000c38:	4b0a      	ldr	r3, [pc, #40]	; (8000c64 <__swbuf_r+0x9c>)
 8000c3a:	429c      	cmp	r4, r3
 8000c3c:	d101      	bne.n	8000c42 <__swbuf_r+0x7a>
 8000c3e:	68ac      	ldr	r4, [r5, #8]
 8000c40:	e7cf      	b.n	8000be2 <__swbuf_r+0x1a>
 8000c42:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <__swbuf_r+0xa0>)
 8000c44:	429c      	cmp	r4, r3
 8000c46:	bf08      	it	eq
 8000c48:	68ec      	ldreq	r4, [r5, #12]
 8000c4a:	e7ca      	b.n	8000be2 <__swbuf_r+0x1a>
 8000c4c:	4621      	mov	r1, r4
 8000c4e:	4628      	mov	r0, r5
 8000c50:	f000 f80c 	bl	8000c6c <__swsetup_r>
 8000c54:	2800      	cmp	r0, #0
 8000c56:	d0cb      	beq.n	8000bf0 <__swbuf_r+0x28>
 8000c58:	f04f 37ff 	mov.w	r7, #4294967295
 8000c5c:	e7ea      	b.n	8000c34 <__swbuf_r+0x6c>
 8000c5e:	bf00      	nop
 8000c60:	08001554 	.word	0x08001554
 8000c64:	08001574 	.word	0x08001574
 8000c68:	08001534 	.word	0x08001534

08000c6c <__swsetup_r>:
 8000c6c:	4b32      	ldr	r3, [pc, #200]	; (8000d38 <__swsetup_r+0xcc>)
 8000c6e:	b570      	push	{r4, r5, r6, lr}
 8000c70:	681d      	ldr	r5, [r3, #0]
 8000c72:	4606      	mov	r6, r0
 8000c74:	460c      	mov	r4, r1
 8000c76:	b125      	cbz	r5, 8000c82 <__swsetup_r+0x16>
 8000c78:	69ab      	ldr	r3, [r5, #24]
 8000c7a:	b913      	cbnz	r3, 8000c82 <__swsetup_r+0x16>
 8000c7c:	4628      	mov	r0, r5
 8000c7e:	f000 f97d 	bl	8000f7c <__sinit>
 8000c82:	4b2e      	ldr	r3, [pc, #184]	; (8000d3c <__swsetup_r+0xd0>)
 8000c84:	429c      	cmp	r4, r3
 8000c86:	d10f      	bne.n	8000ca8 <__swsetup_r+0x3c>
 8000c88:	686c      	ldr	r4, [r5, #4]
 8000c8a:	89a3      	ldrh	r3, [r4, #12]
 8000c8c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000c90:	0719      	lsls	r1, r3, #28
 8000c92:	d42c      	bmi.n	8000cee <__swsetup_r+0x82>
 8000c94:	06dd      	lsls	r5, r3, #27
 8000c96:	d411      	bmi.n	8000cbc <__swsetup_r+0x50>
 8000c98:	2309      	movs	r3, #9
 8000c9a:	6033      	str	r3, [r6, #0]
 8000c9c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8000ca0:	81a3      	strh	r3, [r4, #12]
 8000ca2:	f04f 30ff 	mov.w	r0, #4294967295
 8000ca6:	e03e      	b.n	8000d26 <__swsetup_r+0xba>
 8000ca8:	4b25      	ldr	r3, [pc, #148]	; (8000d40 <__swsetup_r+0xd4>)
 8000caa:	429c      	cmp	r4, r3
 8000cac:	d101      	bne.n	8000cb2 <__swsetup_r+0x46>
 8000cae:	68ac      	ldr	r4, [r5, #8]
 8000cb0:	e7eb      	b.n	8000c8a <__swsetup_r+0x1e>
 8000cb2:	4b24      	ldr	r3, [pc, #144]	; (8000d44 <__swsetup_r+0xd8>)
 8000cb4:	429c      	cmp	r4, r3
 8000cb6:	bf08      	it	eq
 8000cb8:	68ec      	ldreq	r4, [r5, #12]
 8000cba:	e7e6      	b.n	8000c8a <__swsetup_r+0x1e>
 8000cbc:	0758      	lsls	r0, r3, #29
 8000cbe:	d512      	bpl.n	8000ce6 <__swsetup_r+0x7a>
 8000cc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000cc2:	b141      	cbz	r1, 8000cd6 <__swsetup_r+0x6a>
 8000cc4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000cc8:	4299      	cmp	r1, r3
 8000cca:	d002      	beq.n	8000cd2 <__swsetup_r+0x66>
 8000ccc:	4630      	mov	r0, r6
 8000cce:	f000 fa5b 	bl	8001188 <_free_r>
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	6363      	str	r3, [r4, #52]	; 0x34
 8000cd6:	89a3      	ldrh	r3, [r4, #12]
 8000cd8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8000cdc:	81a3      	strh	r3, [r4, #12]
 8000cde:	2300      	movs	r3, #0
 8000ce0:	6063      	str	r3, [r4, #4]
 8000ce2:	6923      	ldr	r3, [r4, #16]
 8000ce4:	6023      	str	r3, [r4, #0]
 8000ce6:	89a3      	ldrh	r3, [r4, #12]
 8000ce8:	f043 0308 	orr.w	r3, r3, #8
 8000cec:	81a3      	strh	r3, [r4, #12]
 8000cee:	6923      	ldr	r3, [r4, #16]
 8000cf0:	b94b      	cbnz	r3, 8000d06 <__swsetup_r+0x9a>
 8000cf2:	89a3      	ldrh	r3, [r4, #12]
 8000cf4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8000cf8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000cfc:	d003      	beq.n	8000d06 <__swsetup_r+0x9a>
 8000cfe:	4621      	mov	r1, r4
 8000d00:	4630      	mov	r0, r6
 8000d02:	f000 fa01 	bl	8001108 <__smakebuf_r>
 8000d06:	89a0      	ldrh	r0, [r4, #12]
 8000d08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8000d0c:	f010 0301 	ands.w	r3, r0, #1
 8000d10:	d00a      	beq.n	8000d28 <__swsetup_r+0xbc>
 8000d12:	2300      	movs	r3, #0
 8000d14:	60a3      	str	r3, [r4, #8]
 8000d16:	6963      	ldr	r3, [r4, #20]
 8000d18:	425b      	negs	r3, r3
 8000d1a:	61a3      	str	r3, [r4, #24]
 8000d1c:	6923      	ldr	r3, [r4, #16]
 8000d1e:	b943      	cbnz	r3, 8000d32 <__swsetup_r+0xc6>
 8000d20:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8000d24:	d1ba      	bne.n	8000c9c <__swsetup_r+0x30>
 8000d26:	bd70      	pop	{r4, r5, r6, pc}
 8000d28:	0781      	lsls	r1, r0, #30
 8000d2a:	bf58      	it	pl
 8000d2c:	6963      	ldrpl	r3, [r4, #20]
 8000d2e:	60a3      	str	r3, [r4, #8]
 8000d30:	e7f4      	b.n	8000d1c <__swsetup_r+0xb0>
 8000d32:	2000      	movs	r0, #0
 8000d34:	e7f7      	b.n	8000d26 <__swsetup_r+0xba>
 8000d36:	bf00      	nop
 8000d38:	20000008 	.word	0x20000008
 8000d3c:	08001554 	.word	0x08001554
 8000d40:	08001574 	.word	0x08001574
 8000d44:	08001534 	.word	0x08001534

08000d48 <__sflush_r>:
 8000d48:	898a      	ldrh	r2, [r1, #12]
 8000d4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000d4e:	4605      	mov	r5, r0
 8000d50:	0710      	lsls	r0, r2, #28
 8000d52:	460c      	mov	r4, r1
 8000d54:	d458      	bmi.n	8000e08 <__sflush_r+0xc0>
 8000d56:	684b      	ldr	r3, [r1, #4]
 8000d58:	2b00      	cmp	r3, #0
 8000d5a:	dc05      	bgt.n	8000d68 <__sflush_r+0x20>
 8000d5c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8000d5e:	2b00      	cmp	r3, #0
 8000d60:	dc02      	bgt.n	8000d68 <__sflush_r+0x20>
 8000d62:	2000      	movs	r0, #0
 8000d64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000d6a:	2e00      	cmp	r6, #0
 8000d6c:	d0f9      	beq.n	8000d62 <__sflush_r+0x1a>
 8000d6e:	2300      	movs	r3, #0
 8000d70:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8000d74:	682f      	ldr	r7, [r5, #0]
 8000d76:	602b      	str	r3, [r5, #0]
 8000d78:	d032      	beq.n	8000de0 <__sflush_r+0x98>
 8000d7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8000d7c:	89a3      	ldrh	r3, [r4, #12]
 8000d7e:	075a      	lsls	r2, r3, #29
 8000d80:	d505      	bpl.n	8000d8e <__sflush_r+0x46>
 8000d82:	6863      	ldr	r3, [r4, #4]
 8000d84:	1ac0      	subs	r0, r0, r3
 8000d86:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8000d88:	b10b      	cbz	r3, 8000d8e <__sflush_r+0x46>
 8000d8a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8000d8c:	1ac0      	subs	r0, r0, r3
 8000d8e:	2300      	movs	r3, #0
 8000d90:	4602      	mov	r2, r0
 8000d92:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8000d94:	6a21      	ldr	r1, [r4, #32]
 8000d96:	4628      	mov	r0, r5
 8000d98:	47b0      	blx	r6
 8000d9a:	1c43      	adds	r3, r0, #1
 8000d9c:	89a3      	ldrh	r3, [r4, #12]
 8000d9e:	d106      	bne.n	8000dae <__sflush_r+0x66>
 8000da0:	6829      	ldr	r1, [r5, #0]
 8000da2:	291d      	cmp	r1, #29
 8000da4:	d82c      	bhi.n	8000e00 <__sflush_r+0xb8>
 8000da6:	4a2a      	ldr	r2, [pc, #168]	; (8000e50 <__sflush_r+0x108>)
 8000da8:	40ca      	lsrs	r2, r1
 8000daa:	07d6      	lsls	r6, r2, #31
 8000dac:	d528      	bpl.n	8000e00 <__sflush_r+0xb8>
 8000dae:	2200      	movs	r2, #0
 8000db0:	6062      	str	r2, [r4, #4]
 8000db2:	04d9      	lsls	r1, r3, #19
 8000db4:	6922      	ldr	r2, [r4, #16]
 8000db6:	6022      	str	r2, [r4, #0]
 8000db8:	d504      	bpl.n	8000dc4 <__sflush_r+0x7c>
 8000dba:	1c42      	adds	r2, r0, #1
 8000dbc:	d101      	bne.n	8000dc2 <__sflush_r+0x7a>
 8000dbe:	682b      	ldr	r3, [r5, #0]
 8000dc0:	b903      	cbnz	r3, 8000dc4 <__sflush_r+0x7c>
 8000dc2:	6560      	str	r0, [r4, #84]	; 0x54
 8000dc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8000dc6:	602f      	str	r7, [r5, #0]
 8000dc8:	2900      	cmp	r1, #0
 8000dca:	d0ca      	beq.n	8000d62 <__sflush_r+0x1a>
 8000dcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8000dd0:	4299      	cmp	r1, r3
 8000dd2:	d002      	beq.n	8000dda <__sflush_r+0x92>
 8000dd4:	4628      	mov	r0, r5
 8000dd6:	f000 f9d7 	bl	8001188 <_free_r>
 8000dda:	2000      	movs	r0, #0
 8000ddc:	6360      	str	r0, [r4, #52]	; 0x34
 8000dde:	e7c1      	b.n	8000d64 <__sflush_r+0x1c>
 8000de0:	6a21      	ldr	r1, [r4, #32]
 8000de2:	2301      	movs	r3, #1
 8000de4:	4628      	mov	r0, r5
 8000de6:	47b0      	blx	r6
 8000de8:	1c41      	adds	r1, r0, #1
 8000dea:	d1c7      	bne.n	8000d7c <__sflush_r+0x34>
 8000dec:	682b      	ldr	r3, [r5, #0]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d0c4      	beq.n	8000d7c <__sflush_r+0x34>
 8000df2:	2b1d      	cmp	r3, #29
 8000df4:	d001      	beq.n	8000dfa <__sflush_r+0xb2>
 8000df6:	2b16      	cmp	r3, #22
 8000df8:	d101      	bne.n	8000dfe <__sflush_r+0xb6>
 8000dfa:	602f      	str	r7, [r5, #0]
 8000dfc:	e7b1      	b.n	8000d62 <__sflush_r+0x1a>
 8000dfe:	89a3      	ldrh	r3, [r4, #12]
 8000e00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e04:	81a3      	strh	r3, [r4, #12]
 8000e06:	e7ad      	b.n	8000d64 <__sflush_r+0x1c>
 8000e08:	690f      	ldr	r7, [r1, #16]
 8000e0a:	2f00      	cmp	r7, #0
 8000e0c:	d0a9      	beq.n	8000d62 <__sflush_r+0x1a>
 8000e0e:	0793      	lsls	r3, r2, #30
 8000e10:	680e      	ldr	r6, [r1, #0]
 8000e12:	bf08      	it	eq
 8000e14:	694b      	ldreq	r3, [r1, #20]
 8000e16:	600f      	str	r7, [r1, #0]
 8000e18:	bf18      	it	ne
 8000e1a:	2300      	movne	r3, #0
 8000e1c:	eba6 0807 	sub.w	r8, r6, r7
 8000e20:	608b      	str	r3, [r1, #8]
 8000e22:	f1b8 0f00 	cmp.w	r8, #0
 8000e26:	dd9c      	ble.n	8000d62 <__sflush_r+0x1a>
 8000e28:	6a21      	ldr	r1, [r4, #32]
 8000e2a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8000e2c:	4643      	mov	r3, r8
 8000e2e:	463a      	mov	r2, r7
 8000e30:	4628      	mov	r0, r5
 8000e32:	47b0      	blx	r6
 8000e34:	2800      	cmp	r0, #0
 8000e36:	dc06      	bgt.n	8000e46 <__sflush_r+0xfe>
 8000e38:	89a3      	ldrh	r3, [r4, #12]
 8000e3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e3e:	81a3      	strh	r3, [r4, #12]
 8000e40:	f04f 30ff 	mov.w	r0, #4294967295
 8000e44:	e78e      	b.n	8000d64 <__sflush_r+0x1c>
 8000e46:	4407      	add	r7, r0
 8000e48:	eba8 0800 	sub.w	r8, r8, r0
 8000e4c:	e7e9      	b.n	8000e22 <__sflush_r+0xda>
 8000e4e:	bf00      	nop
 8000e50:	20400001 	.word	0x20400001

08000e54 <_fflush_r>:
 8000e54:	b538      	push	{r3, r4, r5, lr}
 8000e56:	690b      	ldr	r3, [r1, #16]
 8000e58:	4605      	mov	r5, r0
 8000e5a:	460c      	mov	r4, r1
 8000e5c:	b913      	cbnz	r3, 8000e64 <_fflush_r+0x10>
 8000e5e:	2500      	movs	r5, #0
 8000e60:	4628      	mov	r0, r5
 8000e62:	bd38      	pop	{r3, r4, r5, pc}
 8000e64:	b118      	cbz	r0, 8000e6e <_fflush_r+0x1a>
 8000e66:	6983      	ldr	r3, [r0, #24]
 8000e68:	b90b      	cbnz	r3, 8000e6e <_fflush_r+0x1a>
 8000e6a:	f000 f887 	bl	8000f7c <__sinit>
 8000e6e:	4b14      	ldr	r3, [pc, #80]	; (8000ec0 <_fflush_r+0x6c>)
 8000e70:	429c      	cmp	r4, r3
 8000e72:	d11b      	bne.n	8000eac <_fflush_r+0x58>
 8000e74:	686c      	ldr	r4, [r5, #4]
 8000e76:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d0ef      	beq.n	8000e5e <_fflush_r+0xa>
 8000e7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8000e80:	07d0      	lsls	r0, r2, #31
 8000e82:	d404      	bmi.n	8000e8e <_fflush_r+0x3a>
 8000e84:	0599      	lsls	r1, r3, #22
 8000e86:	d402      	bmi.n	8000e8e <_fflush_r+0x3a>
 8000e88:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000e8a:	f000 f915 	bl	80010b8 <__retarget_lock_acquire_recursive>
 8000e8e:	4628      	mov	r0, r5
 8000e90:	4621      	mov	r1, r4
 8000e92:	f7ff ff59 	bl	8000d48 <__sflush_r>
 8000e96:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8000e98:	07da      	lsls	r2, r3, #31
 8000e9a:	4605      	mov	r5, r0
 8000e9c:	d4e0      	bmi.n	8000e60 <_fflush_r+0xc>
 8000e9e:	89a3      	ldrh	r3, [r4, #12]
 8000ea0:	059b      	lsls	r3, r3, #22
 8000ea2:	d4dd      	bmi.n	8000e60 <_fflush_r+0xc>
 8000ea4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8000ea6:	f000 f908 	bl	80010ba <__retarget_lock_release_recursive>
 8000eaa:	e7d9      	b.n	8000e60 <_fflush_r+0xc>
 8000eac:	4b05      	ldr	r3, [pc, #20]	; (8000ec4 <_fflush_r+0x70>)
 8000eae:	429c      	cmp	r4, r3
 8000eb0:	d101      	bne.n	8000eb6 <_fflush_r+0x62>
 8000eb2:	68ac      	ldr	r4, [r5, #8]
 8000eb4:	e7df      	b.n	8000e76 <_fflush_r+0x22>
 8000eb6:	4b04      	ldr	r3, [pc, #16]	; (8000ec8 <_fflush_r+0x74>)
 8000eb8:	429c      	cmp	r4, r3
 8000eba:	bf08      	it	eq
 8000ebc:	68ec      	ldreq	r4, [r5, #12]
 8000ebe:	e7da      	b.n	8000e76 <_fflush_r+0x22>
 8000ec0:	08001554 	.word	0x08001554
 8000ec4:	08001574 	.word	0x08001574
 8000ec8:	08001534 	.word	0x08001534

08000ecc <std>:
 8000ecc:	2300      	movs	r3, #0
 8000ece:	b510      	push	{r4, lr}
 8000ed0:	4604      	mov	r4, r0
 8000ed2:	e9c0 3300 	strd	r3, r3, [r0]
 8000ed6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8000eda:	6083      	str	r3, [r0, #8]
 8000edc:	8181      	strh	r1, [r0, #12]
 8000ede:	6643      	str	r3, [r0, #100]	; 0x64
 8000ee0:	81c2      	strh	r2, [r0, #14]
 8000ee2:	6183      	str	r3, [r0, #24]
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	2208      	movs	r2, #8
 8000ee8:	305c      	adds	r0, #92	; 0x5c
 8000eea:	f7ff fdef 	bl	8000acc <memset>
 8000eee:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <std+0x38>)
 8000ef0:	6263      	str	r3, [r4, #36]	; 0x24
 8000ef2:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <std+0x3c>)
 8000ef4:	62a3      	str	r3, [r4, #40]	; 0x28
 8000ef6:	4b05      	ldr	r3, [pc, #20]	; (8000f0c <std+0x40>)
 8000ef8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8000efa:	4b05      	ldr	r3, [pc, #20]	; (8000f10 <std+0x44>)
 8000efc:	6224      	str	r4, [r4, #32]
 8000efe:	6323      	str	r3, [r4, #48]	; 0x30
 8000f00:	bd10      	pop	{r4, pc}
 8000f02:	bf00      	nop
 8000f04:	08001369 	.word	0x08001369
 8000f08:	0800138b 	.word	0x0800138b
 8000f0c:	080013c3 	.word	0x080013c3
 8000f10:	080013e7 	.word	0x080013e7

08000f14 <_cleanup_r>:
 8000f14:	4901      	ldr	r1, [pc, #4]	; (8000f1c <_cleanup_r+0x8>)
 8000f16:	f000 b8af 	b.w	8001078 <_fwalk_reent>
 8000f1a:	bf00      	nop
 8000f1c:	08000e55 	.word	0x08000e55

08000f20 <__sfmoreglue>:
 8000f20:	b570      	push	{r4, r5, r6, lr}
 8000f22:	2268      	movs	r2, #104	; 0x68
 8000f24:	1e4d      	subs	r5, r1, #1
 8000f26:	4355      	muls	r5, r2
 8000f28:	460e      	mov	r6, r1
 8000f2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8000f2e:	f000 f997 	bl	8001260 <_malloc_r>
 8000f32:	4604      	mov	r4, r0
 8000f34:	b140      	cbz	r0, 8000f48 <__sfmoreglue+0x28>
 8000f36:	2100      	movs	r1, #0
 8000f38:	e9c0 1600 	strd	r1, r6, [r0]
 8000f3c:	300c      	adds	r0, #12
 8000f3e:	60a0      	str	r0, [r4, #8]
 8000f40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8000f44:	f7ff fdc2 	bl	8000acc <memset>
 8000f48:	4620      	mov	r0, r4
 8000f4a:	bd70      	pop	{r4, r5, r6, pc}

08000f4c <__sfp_lock_acquire>:
 8000f4c:	4801      	ldr	r0, [pc, #4]	; (8000f54 <__sfp_lock_acquire+0x8>)
 8000f4e:	f000 b8b3 	b.w	80010b8 <__retarget_lock_acquire_recursive>
 8000f52:	bf00      	nop
 8000f54:	20000095 	.word	0x20000095

08000f58 <__sfp_lock_release>:
 8000f58:	4801      	ldr	r0, [pc, #4]	; (8000f60 <__sfp_lock_release+0x8>)
 8000f5a:	f000 b8ae 	b.w	80010ba <__retarget_lock_release_recursive>
 8000f5e:	bf00      	nop
 8000f60:	20000095 	.word	0x20000095

08000f64 <__sinit_lock_acquire>:
 8000f64:	4801      	ldr	r0, [pc, #4]	; (8000f6c <__sinit_lock_acquire+0x8>)
 8000f66:	f000 b8a7 	b.w	80010b8 <__retarget_lock_acquire_recursive>
 8000f6a:	bf00      	nop
 8000f6c:	20000096 	.word	0x20000096

08000f70 <__sinit_lock_release>:
 8000f70:	4801      	ldr	r0, [pc, #4]	; (8000f78 <__sinit_lock_release+0x8>)
 8000f72:	f000 b8a2 	b.w	80010ba <__retarget_lock_release_recursive>
 8000f76:	bf00      	nop
 8000f78:	20000096 	.word	0x20000096

08000f7c <__sinit>:
 8000f7c:	b510      	push	{r4, lr}
 8000f7e:	4604      	mov	r4, r0
 8000f80:	f7ff fff0 	bl	8000f64 <__sinit_lock_acquire>
 8000f84:	69a3      	ldr	r3, [r4, #24]
 8000f86:	b11b      	cbz	r3, 8000f90 <__sinit+0x14>
 8000f88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000f8c:	f7ff bff0 	b.w	8000f70 <__sinit_lock_release>
 8000f90:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8000f94:	6523      	str	r3, [r4, #80]	; 0x50
 8000f96:	4b13      	ldr	r3, [pc, #76]	; (8000fe4 <__sinit+0x68>)
 8000f98:	4a13      	ldr	r2, [pc, #76]	; (8000fe8 <__sinit+0x6c>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	62a2      	str	r2, [r4, #40]	; 0x28
 8000f9e:	42a3      	cmp	r3, r4
 8000fa0:	bf04      	itt	eq
 8000fa2:	2301      	moveq	r3, #1
 8000fa4:	61a3      	streq	r3, [r4, #24]
 8000fa6:	4620      	mov	r0, r4
 8000fa8:	f000 f820 	bl	8000fec <__sfp>
 8000fac:	6060      	str	r0, [r4, #4]
 8000fae:	4620      	mov	r0, r4
 8000fb0:	f000 f81c 	bl	8000fec <__sfp>
 8000fb4:	60a0      	str	r0, [r4, #8]
 8000fb6:	4620      	mov	r0, r4
 8000fb8:	f000 f818 	bl	8000fec <__sfp>
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	60e0      	str	r0, [r4, #12]
 8000fc0:	2104      	movs	r1, #4
 8000fc2:	6860      	ldr	r0, [r4, #4]
 8000fc4:	f7ff ff82 	bl	8000ecc <std>
 8000fc8:	68a0      	ldr	r0, [r4, #8]
 8000fca:	2201      	movs	r2, #1
 8000fcc:	2109      	movs	r1, #9
 8000fce:	f7ff ff7d 	bl	8000ecc <std>
 8000fd2:	68e0      	ldr	r0, [r4, #12]
 8000fd4:	2202      	movs	r2, #2
 8000fd6:	2112      	movs	r1, #18
 8000fd8:	f7ff ff78 	bl	8000ecc <std>
 8000fdc:	2301      	movs	r3, #1
 8000fde:	61a3      	str	r3, [r4, #24]
 8000fe0:	e7d2      	b.n	8000f88 <__sinit+0xc>
 8000fe2:	bf00      	nop
 8000fe4:	08001530 	.word	0x08001530
 8000fe8:	08000f15 	.word	0x08000f15

08000fec <__sfp>:
 8000fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000fee:	4607      	mov	r7, r0
 8000ff0:	f7ff ffac 	bl	8000f4c <__sfp_lock_acquire>
 8000ff4:	4b1e      	ldr	r3, [pc, #120]	; (8001070 <__sfp+0x84>)
 8000ff6:	681e      	ldr	r6, [r3, #0]
 8000ff8:	69b3      	ldr	r3, [r6, #24]
 8000ffa:	b913      	cbnz	r3, 8001002 <__sfp+0x16>
 8000ffc:	4630      	mov	r0, r6
 8000ffe:	f7ff ffbd 	bl	8000f7c <__sinit>
 8001002:	3648      	adds	r6, #72	; 0x48
 8001004:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8001008:	3b01      	subs	r3, #1
 800100a:	d503      	bpl.n	8001014 <__sfp+0x28>
 800100c:	6833      	ldr	r3, [r6, #0]
 800100e:	b30b      	cbz	r3, 8001054 <__sfp+0x68>
 8001010:	6836      	ldr	r6, [r6, #0]
 8001012:	e7f7      	b.n	8001004 <__sfp+0x18>
 8001014:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8001018:	b9d5      	cbnz	r5, 8001050 <__sfp+0x64>
 800101a:	4b16      	ldr	r3, [pc, #88]	; (8001074 <__sfp+0x88>)
 800101c:	60e3      	str	r3, [r4, #12]
 800101e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8001022:	6665      	str	r5, [r4, #100]	; 0x64
 8001024:	f000 f847 	bl	80010b6 <__retarget_lock_init_recursive>
 8001028:	f7ff ff96 	bl	8000f58 <__sfp_lock_release>
 800102c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8001030:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8001034:	6025      	str	r5, [r4, #0]
 8001036:	61a5      	str	r5, [r4, #24]
 8001038:	2208      	movs	r2, #8
 800103a:	4629      	mov	r1, r5
 800103c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8001040:	f7ff fd44 	bl	8000acc <memset>
 8001044:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8001048:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800104c:	4620      	mov	r0, r4
 800104e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001050:	3468      	adds	r4, #104	; 0x68
 8001052:	e7d9      	b.n	8001008 <__sfp+0x1c>
 8001054:	2104      	movs	r1, #4
 8001056:	4638      	mov	r0, r7
 8001058:	f7ff ff62 	bl	8000f20 <__sfmoreglue>
 800105c:	4604      	mov	r4, r0
 800105e:	6030      	str	r0, [r6, #0]
 8001060:	2800      	cmp	r0, #0
 8001062:	d1d5      	bne.n	8001010 <__sfp+0x24>
 8001064:	f7ff ff78 	bl	8000f58 <__sfp_lock_release>
 8001068:	230c      	movs	r3, #12
 800106a:	603b      	str	r3, [r7, #0]
 800106c:	e7ee      	b.n	800104c <__sfp+0x60>
 800106e:	bf00      	nop
 8001070:	08001530 	.word	0x08001530
 8001074:	ffff0001 	.word	0xffff0001

08001078 <_fwalk_reent>:
 8001078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800107c:	4606      	mov	r6, r0
 800107e:	4688      	mov	r8, r1
 8001080:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8001084:	2700      	movs	r7, #0
 8001086:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800108a:	f1b9 0901 	subs.w	r9, r9, #1
 800108e:	d505      	bpl.n	800109c <_fwalk_reent+0x24>
 8001090:	6824      	ldr	r4, [r4, #0]
 8001092:	2c00      	cmp	r4, #0
 8001094:	d1f7      	bne.n	8001086 <_fwalk_reent+0xe>
 8001096:	4638      	mov	r0, r7
 8001098:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800109c:	89ab      	ldrh	r3, [r5, #12]
 800109e:	2b01      	cmp	r3, #1
 80010a0:	d907      	bls.n	80010b2 <_fwalk_reent+0x3a>
 80010a2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80010a6:	3301      	adds	r3, #1
 80010a8:	d003      	beq.n	80010b2 <_fwalk_reent+0x3a>
 80010aa:	4629      	mov	r1, r5
 80010ac:	4630      	mov	r0, r6
 80010ae:	47c0      	blx	r8
 80010b0:	4307      	orrs	r7, r0
 80010b2:	3568      	adds	r5, #104	; 0x68
 80010b4:	e7e9      	b.n	800108a <_fwalk_reent+0x12>

080010b6 <__retarget_lock_init_recursive>:
 80010b6:	4770      	bx	lr

080010b8 <__retarget_lock_acquire_recursive>:
 80010b8:	4770      	bx	lr

080010ba <__retarget_lock_release_recursive>:
 80010ba:	4770      	bx	lr

080010bc <__swhatbuf_r>:
 80010bc:	b570      	push	{r4, r5, r6, lr}
 80010be:	460e      	mov	r6, r1
 80010c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80010c4:	2900      	cmp	r1, #0
 80010c6:	b096      	sub	sp, #88	; 0x58
 80010c8:	4614      	mov	r4, r2
 80010ca:	461d      	mov	r5, r3
 80010cc:	da08      	bge.n	80010e0 <__swhatbuf_r+0x24>
 80010ce:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80010d2:	2200      	movs	r2, #0
 80010d4:	602a      	str	r2, [r5, #0]
 80010d6:	061a      	lsls	r2, r3, #24
 80010d8:	d410      	bmi.n	80010fc <__swhatbuf_r+0x40>
 80010da:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80010de:	e00e      	b.n	80010fe <__swhatbuf_r+0x42>
 80010e0:	466a      	mov	r2, sp
 80010e2:	f000 f9a7 	bl	8001434 <_fstat_r>
 80010e6:	2800      	cmp	r0, #0
 80010e8:	dbf1      	blt.n	80010ce <__swhatbuf_r+0x12>
 80010ea:	9a01      	ldr	r2, [sp, #4]
 80010ec:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80010f0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80010f4:	425a      	negs	r2, r3
 80010f6:	415a      	adcs	r2, r3
 80010f8:	602a      	str	r2, [r5, #0]
 80010fa:	e7ee      	b.n	80010da <__swhatbuf_r+0x1e>
 80010fc:	2340      	movs	r3, #64	; 0x40
 80010fe:	2000      	movs	r0, #0
 8001100:	6023      	str	r3, [r4, #0]
 8001102:	b016      	add	sp, #88	; 0x58
 8001104:	bd70      	pop	{r4, r5, r6, pc}
	...

08001108 <__smakebuf_r>:
 8001108:	898b      	ldrh	r3, [r1, #12]
 800110a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800110c:	079d      	lsls	r5, r3, #30
 800110e:	4606      	mov	r6, r0
 8001110:	460c      	mov	r4, r1
 8001112:	d507      	bpl.n	8001124 <__smakebuf_r+0x1c>
 8001114:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8001118:	6023      	str	r3, [r4, #0]
 800111a:	6123      	str	r3, [r4, #16]
 800111c:	2301      	movs	r3, #1
 800111e:	6163      	str	r3, [r4, #20]
 8001120:	b002      	add	sp, #8
 8001122:	bd70      	pop	{r4, r5, r6, pc}
 8001124:	ab01      	add	r3, sp, #4
 8001126:	466a      	mov	r2, sp
 8001128:	f7ff ffc8 	bl	80010bc <__swhatbuf_r>
 800112c:	9900      	ldr	r1, [sp, #0]
 800112e:	4605      	mov	r5, r0
 8001130:	4630      	mov	r0, r6
 8001132:	f000 f895 	bl	8001260 <_malloc_r>
 8001136:	b948      	cbnz	r0, 800114c <__smakebuf_r+0x44>
 8001138:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800113c:	059a      	lsls	r2, r3, #22
 800113e:	d4ef      	bmi.n	8001120 <__smakebuf_r+0x18>
 8001140:	f023 0303 	bic.w	r3, r3, #3
 8001144:	f043 0302 	orr.w	r3, r3, #2
 8001148:	81a3      	strh	r3, [r4, #12]
 800114a:	e7e3      	b.n	8001114 <__smakebuf_r+0xc>
 800114c:	4b0d      	ldr	r3, [pc, #52]	; (8001184 <__smakebuf_r+0x7c>)
 800114e:	62b3      	str	r3, [r6, #40]	; 0x28
 8001150:	89a3      	ldrh	r3, [r4, #12]
 8001152:	6020      	str	r0, [r4, #0]
 8001154:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001158:	81a3      	strh	r3, [r4, #12]
 800115a:	9b00      	ldr	r3, [sp, #0]
 800115c:	6163      	str	r3, [r4, #20]
 800115e:	9b01      	ldr	r3, [sp, #4]
 8001160:	6120      	str	r0, [r4, #16]
 8001162:	b15b      	cbz	r3, 800117c <__smakebuf_r+0x74>
 8001164:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001168:	4630      	mov	r0, r6
 800116a:	f000 f975 	bl	8001458 <_isatty_r>
 800116e:	b128      	cbz	r0, 800117c <__smakebuf_r+0x74>
 8001170:	89a3      	ldrh	r3, [r4, #12]
 8001172:	f023 0303 	bic.w	r3, r3, #3
 8001176:	f043 0301 	orr.w	r3, r3, #1
 800117a:	81a3      	strh	r3, [r4, #12]
 800117c:	89a0      	ldrh	r0, [r4, #12]
 800117e:	4305      	orrs	r5, r0
 8001180:	81a5      	strh	r5, [r4, #12]
 8001182:	e7cd      	b.n	8001120 <__smakebuf_r+0x18>
 8001184:	08000f15 	.word	0x08000f15

08001188 <_free_r>:
 8001188:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800118a:	2900      	cmp	r1, #0
 800118c:	d044      	beq.n	8001218 <_free_r+0x90>
 800118e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8001192:	9001      	str	r0, [sp, #4]
 8001194:	2b00      	cmp	r3, #0
 8001196:	f1a1 0404 	sub.w	r4, r1, #4
 800119a:	bfb8      	it	lt
 800119c:	18e4      	addlt	r4, r4, r3
 800119e:	f000 f97d 	bl	800149c <__malloc_lock>
 80011a2:	4a1e      	ldr	r2, [pc, #120]	; (800121c <_free_r+0x94>)
 80011a4:	9801      	ldr	r0, [sp, #4]
 80011a6:	6813      	ldr	r3, [r2, #0]
 80011a8:	b933      	cbnz	r3, 80011b8 <_free_r+0x30>
 80011aa:	6063      	str	r3, [r4, #4]
 80011ac:	6014      	str	r4, [r2, #0]
 80011ae:	b003      	add	sp, #12
 80011b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80011b4:	f000 b978 	b.w	80014a8 <__malloc_unlock>
 80011b8:	42a3      	cmp	r3, r4
 80011ba:	d908      	bls.n	80011ce <_free_r+0x46>
 80011bc:	6825      	ldr	r5, [r4, #0]
 80011be:	1961      	adds	r1, r4, r5
 80011c0:	428b      	cmp	r3, r1
 80011c2:	bf01      	itttt	eq
 80011c4:	6819      	ldreq	r1, [r3, #0]
 80011c6:	685b      	ldreq	r3, [r3, #4]
 80011c8:	1949      	addeq	r1, r1, r5
 80011ca:	6021      	streq	r1, [r4, #0]
 80011cc:	e7ed      	b.n	80011aa <_free_r+0x22>
 80011ce:	461a      	mov	r2, r3
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	b10b      	cbz	r3, 80011d8 <_free_r+0x50>
 80011d4:	42a3      	cmp	r3, r4
 80011d6:	d9fa      	bls.n	80011ce <_free_r+0x46>
 80011d8:	6811      	ldr	r1, [r2, #0]
 80011da:	1855      	adds	r5, r2, r1
 80011dc:	42a5      	cmp	r5, r4
 80011de:	d10b      	bne.n	80011f8 <_free_r+0x70>
 80011e0:	6824      	ldr	r4, [r4, #0]
 80011e2:	4421      	add	r1, r4
 80011e4:	1854      	adds	r4, r2, r1
 80011e6:	42a3      	cmp	r3, r4
 80011e8:	6011      	str	r1, [r2, #0]
 80011ea:	d1e0      	bne.n	80011ae <_free_r+0x26>
 80011ec:	681c      	ldr	r4, [r3, #0]
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	6053      	str	r3, [r2, #4]
 80011f2:	4421      	add	r1, r4
 80011f4:	6011      	str	r1, [r2, #0]
 80011f6:	e7da      	b.n	80011ae <_free_r+0x26>
 80011f8:	d902      	bls.n	8001200 <_free_r+0x78>
 80011fa:	230c      	movs	r3, #12
 80011fc:	6003      	str	r3, [r0, #0]
 80011fe:	e7d6      	b.n	80011ae <_free_r+0x26>
 8001200:	6825      	ldr	r5, [r4, #0]
 8001202:	1961      	adds	r1, r4, r5
 8001204:	428b      	cmp	r3, r1
 8001206:	bf04      	itt	eq
 8001208:	6819      	ldreq	r1, [r3, #0]
 800120a:	685b      	ldreq	r3, [r3, #4]
 800120c:	6063      	str	r3, [r4, #4]
 800120e:	bf04      	itt	eq
 8001210:	1949      	addeq	r1, r1, r5
 8001212:	6021      	streq	r1, [r4, #0]
 8001214:	6054      	str	r4, [r2, #4]
 8001216:	e7ca      	b.n	80011ae <_free_r+0x26>
 8001218:	b003      	add	sp, #12
 800121a:	bd30      	pop	{r4, r5, pc}
 800121c:	20000098 	.word	0x20000098

08001220 <sbrk_aligned>:
 8001220:	b570      	push	{r4, r5, r6, lr}
 8001222:	4e0e      	ldr	r6, [pc, #56]	; (800125c <sbrk_aligned+0x3c>)
 8001224:	460c      	mov	r4, r1
 8001226:	6831      	ldr	r1, [r6, #0]
 8001228:	4605      	mov	r5, r0
 800122a:	b911      	cbnz	r1, 8001232 <sbrk_aligned+0x12>
 800122c:	f000 f88c 	bl	8001348 <_sbrk_r>
 8001230:	6030      	str	r0, [r6, #0]
 8001232:	4621      	mov	r1, r4
 8001234:	4628      	mov	r0, r5
 8001236:	f000 f887 	bl	8001348 <_sbrk_r>
 800123a:	1c43      	adds	r3, r0, #1
 800123c:	d00a      	beq.n	8001254 <sbrk_aligned+0x34>
 800123e:	1cc4      	adds	r4, r0, #3
 8001240:	f024 0403 	bic.w	r4, r4, #3
 8001244:	42a0      	cmp	r0, r4
 8001246:	d007      	beq.n	8001258 <sbrk_aligned+0x38>
 8001248:	1a21      	subs	r1, r4, r0
 800124a:	4628      	mov	r0, r5
 800124c:	f000 f87c 	bl	8001348 <_sbrk_r>
 8001250:	3001      	adds	r0, #1
 8001252:	d101      	bne.n	8001258 <sbrk_aligned+0x38>
 8001254:	f04f 34ff 	mov.w	r4, #4294967295
 8001258:	4620      	mov	r0, r4
 800125a:	bd70      	pop	{r4, r5, r6, pc}
 800125c:	2000009c 	.word	0x2000009c

08001260 <_malloc_r>:
 8001260:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001264:	1ccd      	adds	r5, r1, #3
 8001266:	f025 0503 	bic.w	r5, r5, #3
 800126a:	3508      	adds	r5, #8
 800126c:	2d0c      	cmp	r5, #12
 800126e:	bf38      	it	cc
 8001270:	250c      	movcc	r5, #12
 8001272:	2d00      	cmp	r5, #0
 8001274:	4607      	mov	r7, r0
 8001276:	db01      	blt.n	800127c <_malloc_r+0x1c>
 8001278:	42a9      	cmp	r1, r5
 800127a:	d905      	bls.n	8001288 <_malloc_r+0x28>
 800127c:	230c      	movs	r3, #12
 800127e:	603b      	str	r3, [r7, #0]
 8001280:	2600      	movs	r6, #0
 8001282:	4630      	mov	r0, r6
 8001284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001288:	4e2e      	ldr	r6, [pc, #184]	; (8001344 <_malloc_r+0xe4>)
 800128a:	f000 f907 	bl	800149c <__malloc_lock>
 800128e:	6833      	ldr	r3, [r6, #0]
 8001290:	461c      	mov	r4, r3
 8001292:	bb34      	cbnz	r4, 80012e2 <_malloc_r+0x82>
 8001294:	4629      	mov	r1, r5
 8001296:	4638      	mov	r0, r7
 8001298:	f7ff ffc2 	bl	8001220 <sbrk_aligned>
 800129c:	1c43      	adds	r3, r0, #1
 800129e:	4604      	mov	r4, r0
 80012a0:	d14d      	bne.n	800133e <_malloc_r+0xde>
 80012a2:	6834      	ldr	r4, [r6, #0]
 80012a4:	4626      	mov	r6, r4
 80012a6:	2e00      	cmp	r6, #0
 80012a8:	d140      	bne.n	800132c <_malloc_r+0xcc>
 80012aa:	6823      	ldr	r3, [r4, #0]
 80012ac:	4631      	mov	r1, r6
 80012ae:	4638      	mov	r0, r7
 80012b0:	eb04 0803 	add.w	r8, r4, r3
 80012b4:	f000 f848 	bl	8001348 <_sbrk_r>
 80012b8:	4580      	cmp	r8, r0
 80012ba:	d13a      	bne.n	8001332 <_malloc_r+0xd2>
 80012bc:	6821      	ldr	r1, [r4, #0]
 80012be:	3503      	adds	r5, #3
 80012c0:	1a6d      	subs	r5, r5, r1
 80012c2:	f025 0503 	bic.w	r5, r5, #3
 80012c6:	3508      	adds	r5, #8
 80012c8:	2d0c      	cmp	r5, #12
 80012ca:	bf38      	it	cc
 80012cc:	250c      	movcc	r5, #12
 80012ce:	4629      	mov	r1, r5
 80012d0:	4638      	mov	r0, r7
 80012d2:	f7ff ffa5 	bl	8001220 <sbrk_aligned>
 80012d6:	3001      	adds	r0, #1
 80012d8:	d02b      	beq.n	8001332 <_malloc_r+0xd2>
 80012da:	6823      	ldr	r3, [r4, #0]
 80012dc:	442b      	add	r3, r5
 80012de:	6023      	str	r3, [r4, #0]
 80012e0:	e00e      	b.n	8001300 <_malloc_r+0xa0>
 80012e2:	6822      	ldr	r2, [r4, #0]
 80012e4:	1b52      	subs	r2, r2, r5
 80012e6:	d41e      	bmi.n	8001326 <_malloc_r+0xc6>
 80012e8:	2a0b      	cmp	r2, #11
 80012ea:	d916      	bls.n	800131a <_malloc_r+0xba>
 80012ec:	1961      	adds	r1, r4, r5
 80012ee:	42a3      	cmp	r3, r4
 80012f0:	6025      	str	r5, [r4, #0]
 80012f2:	bf18      	it	ne
 80012f4:	6059      	strne	r1, [r3, #4]
 80012f6:	6863      	ldr	r3, [r4, #4]
 80012f8:	bf08      	it	eq
 80012fa:	6031      	streq	r1, [r6, #0]
 80012fc:	5162      	str	r2, [r4, r5]
 80012fe:	604b      	str	r3, [r1, #4]
 8001300:	4638      	mov	r0, r7
 8001302:	f104 060b 	add.w	r6, r4, #11
 8001306:	f000 f8cf 	bl	80014a8 <__malloc_unlock>
 800130a:	f026 0607 	bic.w	r6, r6, #7
 800130e:	1d23      	adds	r3, r4, #4
 8001310:	1af2      	subs	r2, r6, r3
 8001312:	d0b6      	beq.n	8001282 <_malloc_r+0x22>
 8001314:	1b9b      	subs	r3, r3, r6
 8001316:	50a3      	str	r3, [r4, r2]
 8001318:	e7b3      	b.n	8001282 <_malloc_r+0x22>
 800131a:	6862      	ldr	r2, [r4, #4]
 800131c:	42a3      	cmp	r3, r4
 800131e:	bf0c      	ite	eq
 8001320:	6032      	streq	r2, [r6, #0]
 8001322:	605a      	strne	r2, [r3, #4]
 8001324:	e7ec      	b.n	8001300 <_malloc_r+0xa0>
 8001326:	4623      	mov	r3, r4
 8001328:	6864      	ldr	r4, [r4, #4]
 800132a:	e7b2      	b.n	8001292 <_malloc_r+0x32>
 800132c:	4634      	mov	r4, r6
 800132e:	6876      	ldr	r6, [r6, #4]
 8001330:	e7b9      	b.n	80012a6 <_malloc_r+0x46>
 8001332:	230c      	movs	r3, #12
 8001334:	603b      	str	r3, [r7, #0]
 8001336:	4638      	mov	r0, r7
 8001338:	f000 f8b6 	bl	80014a8 <__malloc_unlock>
 800133c:	e7a1      	b.n	8001282 <_malloc_r+0x22>
 800133e:	6025      	str	r5, [r4, #0]
 8001340:	e7de      	b.n	8001300 <_malloc_r+0xa0>
 8001342:	bf00      	nop
 8001344:	20000098 	.word	0x20000098

08001348 <_sbrk_r>:
 8001348:	b538      	push	{r3, r4, r5, lr}
 800134a:	4d06      	ldr	r5, [pc, #24]	; (8001364 <_sbrk_r+0x1c>)
 800134c:	2300      	movs	r3, #0
 800134e:	4604      	mov	r4, r0
 8001350:	4608      	mov	r0, r1
 8001352:	602b      	str	r3, [r5, #0]
 8001354:	f7ff fa5a 	bl	800080c <_sbrk>
 8001358:	1c43      	adds	r3, r0, #1
 800135a:	d102      	bne.n	8001362 <_sbrk_r+0x1a>
 800135c:	682b      	ldr	r3, [r5, #0]
 800135e:	b103      	cbz	r3, 8001362 <_sbrk_r+0x1a>
 8001360:	6023      	str	r3, [r4, #0]
 8001362:	bd38      	pop	{r3, r4, r5, pc}
 8001364:	200000a0 	.word	0x200000a0

08001368 <__sread>:
 8001368:	b510      	push	{r4, lr}
 800136a:	460c      	mov	r4, r1
 800136c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001370:	f000 f8a0 	bl	80014b4 <_read_r>
 8001374:	2800      	cmp	r0, #0
 8001376:	bfab      	itete	ge
 8001378:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800137a:	89a3      	ldrhlt	r3, [r4, #12]
 800137c:	181b      	addge	r3, r3, r0
 800137e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8001382:	bfac      	ite	ge
 8001384:	6563      	strge	r3, [r4, #84]	; 0x54
 8001386:	81a3      	strhlt	r3, [r4, #12]
 8001388:	bd10      	pop	{r4, pc}

0800138a <__swrite>:
 800138a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800138e:	461f      	mov	r7, r3
 8001390:	898b      	ldrh	r3, [r1, #12]
 8001392:	05db      	lsls	r3, r3, #23
 8001394:	4605      	mov	r5, r0
 8001396:	460c      	mov	r4, r1
 8001398:	4616      	mov	r6, r2
 800139a:	d505      	bpl.n	80013a8 <__swrite+0x1e>
 800139c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013a0:	2302      	movs	r3, #2
 80013a2:	2200      	movs	r2, #0
 80013a4:	f000 f868 	bl	8001478 <_lseek_r>
 80013a8:	89a3      	ldrh	r3, [r4, #12]
 80013aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80013ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80013b2:	81a3      	strh	r3, [r4, #12]
 80013b4:	4632      	mov	r2, r6
 80013b6:	463b      	mov	r3, r7
 80013b8:	4628      	mov	r0, r5
 80013ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80013be:	f000 b817 	b.w	80013f0 <_write_r>

080013c2 <__sseek>:
 80013c2:	b510      	push	{r4, lr}
 80013c4:	460c      	mov	r4, r1
 80013c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013ca:	f000 f855 	bl	8001478 <_lseek_r>
 80013ce:	1c43      	adds	r3, r0, #1
 80013d0:	89a3      	ldrh	r3, [r4, #12]
 80013d2:	bf15      	itete	ne
 80013d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80013d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80013da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80013de:	81a3      	strheq	r3, [r4, #12]
 80013e0:	bf18      	it	ne
 80013e2:	81a3      	strhne	r3, [r4, #12]
 80013e4:	bd10      	pop	{r4, pc}

080013e6 <__sclose>:
 80013e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80013ea:	f000 b813 	b.w	8001414 <_close_r>
	...

080013f0 <_write_r>:
 80013f0:	b538      	push	{r3, r4, r5, lr}
 80013f2:	4d07      	ldr	r5, [pc, #28]	; (8001410 <_write_r+0x20>)
 80013f4:	4604      	mov	r4, r0
 80013f6:	4608      	mov	r0, r1
 80013f8:	4611      	mov	r1, r2
 80013fa:	2200      	movs	r2, #0
 80013fc:	602a      	str	r2, [r5, #0]
 80013fe:	461a      	mov	r2, r3
 8001400:	f7ff f9b3 	bl	800076a <_write>
 8001404:	1c43      	adds	r3, r0, #1
 8001406:	d102      	bne.n	800140e <_write_r+0x1e>
 8001408:	682b      	ldr	r3, [r5, #0]
 800140a:	b103      	cbz	r3, 800140e <_write_r+0x1e>
 800140c:	6023      	str	r3, [r4, #0]
 800140e:	bd38      	pop	{r3, r4, r5, pc}
 8001410:	200000a0 	.word	0x200000a0

08001414 <_close_r>:
 8001414:	b538      	push	{r3, r4, r5, lr}
 8001416:	4d06      	ldr	r5, [pc, #24]	; (8001430 <_close_r+0x1c>)
 8001418:	2300      	movs	r3, #0
 800141a:	4604      	mov	r4, r0
 800141c:	4608      	mov	r0, r1
 800141e:	602b      	str	r3, [r5, #0]
 8001420:	f7ff f9bf 	bl	80007a2 <_close>
 8001424:	1c43      	adds	r3, r0, #1
 8001426:	d102      	bne.n	800142e <_close_r+0x1a>
 8001428:	682b      	ldr	r3, [r5, #0]
 800142a:	b103      	cbz	r3, 800142e <_close_r+0x1a>
 800142c:	6023      	str	r3, [r4, #0]
 800142e:	bd38      	pop	{r3, r4, r5, pc}
 8001430:	200000a0 	.word	0x200000a0

08001434 <_fstat_r>:
 8001434:	b538      	push	{r3, r4, r5, lr}
 8001436:	4d07      	ldr	r5, [pc, #28]	; (8001454 <_fstat_r+0x20>)
 8001438:	2300      	movs	r3, #0
 800143a:	4604      	mov	r4, r0
 800143c:	4608      	mov	r0, r1
 800143e:	4611      	mov	r1, r2
 8001440:	602b      	str	r3, [r5, #0]
 8001442:	f7ff f9ba 	bl	80007ba <_fstat>
 8001446:	1c43      	adds	r3, r0, #1
 8001448:	d102      	bne.n	8001450 <_fstat_r+0x1c>
 800144a:	682b      	ldr	r3, [r5, #0]
 800144c:	b103      	cbz	r3, 8001450 <_fstat_r+0x1c>
 800144e:	6023      	str	r3, [r4, #0]
 8001450:	bd38      	pop	{r3, r4, r5, pc}
 8001452:	bf00      	nop
 8001454:	200000a0 	.word	0x200000a0

08001458 <_isatty_r>:
 8001458:	b538      	push	{r3, r4, r5, lr}
 800145a:	4d06      	ldr	r5, [pc, #24]	; (8001474 <_isatty_r+0x1c>)
 800145c:	2300      	movs	r3, #0
 800145e:	4604      	mov	r4, r0
 8001460:	4608      	mov	r0, r1
 8001462:	602b      	str	r3, [r5, #0]
 8001464:	f7ff f9b9 	bl	80007da <_isatty>
 8001468:	1c43      	adds	r3, r0, #1
 800146a:	d102      	bne.n	8001472 <_isatty_r+0x1a>
 800146c:	682b      	ldr	r3, [r5, #0]
 800146e:	b103      	cbz	r3, 8001472 <_isatty_r+0x1a>
 8001470:	6023      	str	r3, [r4, #0]
 8001472:	bd38      	pop	{r3, r4, r5, pc}
 8001474:	200000a0 	.word	0x200000a0

08001478 <_lseek_r>:
 8001478:	b538      	push	{r3, r4, r5, lr}
 800147a:	4d07      	ldr	r5, [pc, #28]	; (8001498 <_lseek_r+0x20>)
 800147c:	4604      	mov	r4, r0
 800147e:	4608      	mov	r0, r1
 8001480:	4611      	mov	r1, r2
 8001482:	2200      	movs	r2, #0
 8001484:	602a      	str	r2, [r5, #0]
 8001486:	461a      	mov	r2, r3
 8001488:	f7ff f9b2 	bl	80007f0 <_lseek>
 800148c:	1c43      	adds	r3, r0, #1
 800148e:	d102      	bne.n	8001496 <_lseek_r+0x1e>
 8001490:	682b      	ldr	r3, [r5, #0]
 8001492:	b103      	cbz	r3, 8001496 <_lseek_r+0x1e>
 8001494:	6023      	str	r3, [r4, #0]
 8001496:	bd38      	pop	{r3, r4, r5, pc}
 8001498:	200000a0 	.word	0x200000a0

0800149c <__malloc_lock>:
 800149c:	4801      	ldr	r0, [pc, #4]	; (80014a4 <__malloc_lock+0x8>)
 800149e:	f7ff be0b 	b.w	80010b8 <__retarget_lock_acquire_recursive>
 80014a2:	bf00      	nop
 80014a4:	20000094 	.word	0x20000094

080014a8 <__malloc_unlock>:
 80014a8:	4801      	ldr	r0, [pc, #4]	; (80014b0 <__malloc_unlock+0x8>)
 80014aa:	f7ff be06 	b.w	80010ba <__retarget_lock_release_recursive>
 80014ae:	bf00      	nop
 80014b0:	20000094 	.word	0x20000094

080014b4 <_read_r>:
 80014b4:	b538      	push	{r3, r4, r5, lr}
 80014b6:	4d07      	ldr	r5, [pc, #28]	; (80014d4 <_read_r+0x20>)
 80014b8:	4604      	mov	r4, r0
 80014ba:	4608      	mov	r0, r1
 80014bc:	4611      	mov	r1, r2
 80014be:	2200      	movs	r2, #0
 80014c0:	602a      	str	r2, [r5, #0]
 80014c2:	461a      	mov	r2, r3
 80014c4:	f7ff f934 	bl	8000730 <_read>
 80014c8:	1c43      	adds	r3, r0, #1
 80014ca:	d102      	bne.n	80014d2 <_read_r+0x1e>
 80014cc:	682b      	ldr	r3, [r5, #0]
 80014ce:	b103      	cbz	r3, 80014d2 <_read_r+0x1e>
 80014d0:	6023      	str	r3, [r4, #0]
 80014d2:	bd38      	pop	{r3, r4, r5, pc}
 80014d4:	200000a0 	.word	0x200000a0

080014d8 <_init>:
 80014d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014da:	bf00      	nop
 80014dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014de:	bc08      	pop	{r3}
 80014e0:	469e      	mov	lr, r3
 80014e2:	4770      	bx	lr

080014e4 <_fini>:
 80014e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014e6:	bf00      	nop
 80014e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80014ea:	bc08      	pop	{r3}
 80014ec:	469e      	mov	lr, r3
 80014ee:	4770      	bx	lr
